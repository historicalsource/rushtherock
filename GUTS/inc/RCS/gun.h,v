head	1.3;
access;
symbols
	CJ_206:1.2
	CJ2_05:1.2
	CJ2_04:1.2;
locks; strict;
comment	@ * @;


1.3
date	97.01.07.21.33.29;	author albaugh;	state Exp;
branches;
next	1.2;

1.2
date	95.06.01.20.28.22;	author albaugh;	state Exp;
branches;
next	1.1;

1.1
date	95.04.11.23.38.37;	author albaugh;	state Exp;
branches;
next	;


desc
@Some externs and #defines for the gun chip as used in CoJag
@


1.3
log
@added bit for new style gun chip (B_NEWSTYLE)
@
text
@/*
 *	gun.h
 *
 *		Copyright 1995 Atari Games, Time Warner Interactive.
 *	Unauthorized reproduction, adaptation, distribution, performance or 
 *	display of this computer program or the associated audiovisual work
 *	is strictly prohibited.
 *
 *	This file contains the "linkage" information needed to use
 *	the Atari Games light-gun chip software. Details of implementation
 *	can be found in the file gun.c, an example implementation for
 *	the CoJag system.
 */

#define N_GUNS (2)

/* When packed into the return value from ctl_rd_gun(), the following shifts
 * are used
 */
#define GUN_VERT_SHF (0)	/* Vertical posn in D0..7 */
#define GUN_HORZ_SHF (8)	/* Horizontal posn in D8..16 */
#define GUN_STAT_SHF (17)	/* Status bits in D17..26 */

/*	Appropriate masks for the H and V positions (right-justified)
 */
#define GUN_VERT_MASK (0xFF)
#define GUN_HORZ_MASK (0x1FF)

/*	Location of the relevant "status" bits within the status field.
 *	That is, the RELOAD switch (if present) is tested by:
 *	gun_val & (1<<(GUN_STAT_SHF+B_RELOAD));
 */
#define B_NEW_VAL (0)
#define B_GUN_TRIG (2)
#define B_RELOAD (4)
#define B_SHOOTING (6)
#define B_SHOT (7)
#define B_RELOADED (8)
#define B_NEWSTYLE (9)

/*		gun_vb()
 *	Called during Vertical blanking, reads the gun chip and stores the
 *	result for reading at any time. Returns != 0 if the caller
 *	should flash the screen white (to aid in location the gun) for
 *	the duration of the next frame.
 */
extern int gun_vb();

/*		ctl_rd_gun(which)
 *	Returns the current state of the gun designated by <which>
 *	valid values for <which> range from 0 to (N_GUNS-1). The
 *	correspondance between gun index and physical gun location
 *	is beyond the scope of this document :-)
 *
 *	Return value is a 32-bit integer packed per the GUN_*_SHF
 *	definitions above. That is, to get the horizontal coordinate
 *	of the first gun, use:
 *
 *	U32 val = ctl_rd_gun(0);
 *	m_uint hpos = (val >> GUN_HORZ_SHF)&GUN_HORZ_MASK;
 */
extern U32 ctl_rd_gun(int which);

/*		gun_init()
 *	resets the correction factors from EEPROM, and initializes
 *	miscellaneous gun state. Currently returns N_GUNS, but may
 *	in the future return may depend on results of "mini-diagnostic".
 *	In that case, a return of 0 will mean "No guns connected"
 *	and negative numbers will signal hardware errors. The game
 *	programmer should never need to call this, as it _should_
 *	be called as part of normal GUTS start-up, but calling it
 *	should be harmless.
 */
extern int gun_init();

/*		gun_retrigger(which)
 *	resets the trigger status on the gun selected by <which>,
 *	so that it will re-trigger if the actual trigger is still
 *	held.
 */
extern void gun_retrigger(int which);
@


1.2
log
@added prototype for gun_retrigger(), als added "SHOOTING" bit and
fixed some typos in comments.
@
text
@d22 1
a22 1
#define GUN_STAT_SHF (17)	/* Status bits in D17..25 */
d39 1
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
#define GUN_STAT_SHF (17)	/* Status bits in D17..22 */
d30 1
a30 1
 *	That is, the RELAOD switch (if present) is tested by:
d36 3
d74 7
@
