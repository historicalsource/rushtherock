head	1.20;
access;
symbols
	CJ_206:1.20
	CJ2_05:1.20
	CJ2_04:1.20;
locks; strict;
comment	@;; @;


1.20
date	96.02.29.05.14.00;	author shepperd;	state Exp;
branches;
next	1.19;

1.19
date	96.02.08.20.45.54;	author shepperd;	state Exp;
branches;
next	1.18;

1.18
date	96.01.23.19.05.29;	author shepperd;	state Exp;
branches;
next	1.17;

1.17
date	96.01.19.04.15.05;	author shepperd;	state Exp;
branches;
next	1.16;

1.16
date	96.01.18.06.09.37;	author shepperd;	state Exp;
branches;
next	1.15;

1.15
date	95.12.22.22.30.59;	author shepperd;	state Exp;
branches;
next	1.14;

1.14
date	95.12.09.00.44.33;	author shepperd;	state Exp;
branches;
next	1.13;

1.13
date	95.12.08.21.54.17;	author shepperd;	state Exp;
branches;
next	1.12;

1.12
date	95.12.08.21.20.41;	author shepperd;	state Exp;
branches;
next	1.11;

1.11
date	95.12.08.20.42.15;	author shepperd;	state Exp;
branches;
next	1.10;

1.10
date	95.11.27.19.41.05;	author forrest;	state Exp;
branches;
next	1.9;

1.9
date	95.11.17.00.30.27;	author peplinski;	state Exp;
branches;
next	1.8;

1.8
date	95.11.14.19.53.00;	author shepperd;	state Exp;
branches;
next	1.7;

1.7
date	95.11.14.04.17.06;	author shepperd;	state Exp;
branches;
next	1.6;

1.6
date	95.10.31.20.37.33;	author shepperd;	state Exp;
branches;
next	1.5;

1.5
date	95.10.31.18.32.46;	author shepperd;	state Exp;
branches;
next	1.4;

1.4
date	95.10.31.01.56.30;	author shepperd;	state Exp;
branches;
next	1.3;

1.3
date	95.10.30.22.24.37;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	95.10.30.22.23.35;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	95.10.30.21.34.29;	author shepperd;	state Exp;
branches;
next	;


desc
@First cut at new vector dispatch scheme.
This file has all the logical vectors available for the system.
@


1.20
log
@Added feature where softvectors could be declared volatile.
@
text
@;/*		vecs.mac
; *
; *		Copyright 1995 Time Warner Interactive, Inc.
; *	Unauthorized reproduction, adaptation, distribution, performance or 
; *	display of this computer program or the associated audiovisual work
; *	is strictly prohibited.
; *
; *	This file is processed by MACPP to produce dispatch.c and intvecs.h.
; *
; *	The definitions placed in intvecs.h declare virtual vector numbers
; *	in the form of xxx_INTVEC and a cross reference table(s) so the
; *	dispatcher can call the appropriate functions.
; *
; *	intvecs.h should be #include'd by any module that uses prc_set_vec().
; */
;
; This file recursivley '.includes' itself to succesively build up the approprate
; tables and functions in C and places the results in one of two files (the
; first -out=file supplied on the MACPP command line is expected to be dispatch.c
; and the second -out=file is expected to be intvecs.h and the third is expected to
; be /dev/null). If you don't speak fluent MACPP, then you probably shouldn't be
; changing anything in this file other than the VDF table listed below.
;
.if not_defined, _DISPATCH_MAC_		;1 +++++
_DISPATCH_MAC_ == 0			;2 Don't move ...
OUTPUT_LANG == 5 ;LANG_NONE		;3 ... or change ... 
	.outfile 2			;4 ... anything on ...
	.include config.mac		;5 ... these ...
	.outfile 0			;6 ... nine  ...
.endc					;7 ... lines ...
.if true, (_DISPATCH_MAC_&1) != 0	;8
 .if true, 0				;9 -----

You are free to add or remove entries from this table according to your
requirements. There are 10 fields used on each line in this table. The
description of each field follows:

Field 1 = macro call

It must always be the keyword VDF (case is not significant).

Field 2 = condition

This is a dual operand field, so the two operands together must be enclosed in
<>'s. The first operand is one of T, F, D or N representing True, False,
Defined or Not_defined respectively. Case is significant, use uppercase only
please. For the conditions T or F the second operand must be an expression
which must resolve to non-zero (True) or zero (False) in order for the macro
to be processed (else it is ignored). The expression can contain no embedded
spaces. For the conditions D and N, the second operand must only be a symbol
which must be Defined or Not-defined respectively in order for the macro to be
processed. Some short cut expressions have been preprocessed to make using the
expressions a little more concise. These are:

	H3K = not zero if HOST_BOARD == LCR3K
	H4K = not zero if HOST_BOARD == HCR4K
	HMB = not zero if HOST_BOARD == MB4600 (MathBox)
	P3K = not zero if PROCESSOR == (any 3K)
	P4K = not zero if PROCESSOR == (any 4K)
	TOM = not zero if TOM_BASE is defined

Field 3 = vector name

The NAME field is the name of the virtual vector. An _INTVEC will be appended
to it in the C definitions in intvecs.h, but otherwise the name is unmolested.
Case is significant only if you want it to be. The R3K/R4K has an option where
a number of vectors are maintained in an array of pointers rather than each
one having its own name. The index into the array is same as the number
returned in the processor's CAUSE register for that particluar interrupt. This
procedure is done simply for performance reasons. The option is selected by
using a 0 for this field and using an installer function with the vector index
as the parameter to the installer.

Field 4 = Vector pointer

This field identifies the name of a variable in BSS that contains a pointer
to the function to call at interrupt (or will be set by the prc_set_vec()
function). This is the name of the "soft" or logical vector and is either
declared in dispatch.c or externally according to the INT/EXT field described
next.

Field 5 = INTernal or EXTernal vector

This field contains the keywords INT, EXT, VINT or VEXT identifying the vector
in field 4 as being defined INTernally, EXTernally, Volatile INTernally or
Volatile Externally to dispatch.c respectively.

Field 6 = name of vector installer

This field identifies the name of a function that prc_set_vec() will call to
actually install the vector or 0 if there is no special stuff that needs to
be performed during vector installation.

Field 7 = Notes for the installer.

The Notes field is a parameter that is passed to the installer if there is one.

Field 8 = Physical vector attachment.

A dispatch routine is constructed for each of the 4 XBUS interrupts and this
field instructs vecs.mac into which of those XBUS dispatchers a caller to this
vector belongs. If this vector is not associated with an XBUS interrupt, it
needs to be -1. Place the interrupt routines in this table in the order in
which you want them executed.

Field 9 = Default function.

Name of default routine to install in the vector or 0 if none. vecs.mac will
build a function called prc_init_vecs(void) which, when called, will perform
a string of prc_set_vec()'s for all the vectors having this field non-zero.

Field 10 = Comments.

The Comments field is placed on selected lines in intvecs.h and/or dispatch.c
as simple 'C' comments.

 .endc				; Don't move this line
;
;   Condit	Name	   Vector   I/E	Installer   Notes      Phys	Default	Comments
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VDF <F,HMB>	GAMEVB,	   gameint, EXT	0,          0,		-1,	0,	< post-wierdness Vblank >
VDF <F,HMB>	MS4,       ms4vec,  EXT	0,          0,		-1,	0,	< 4 Millisecond timer >
VDF <F,HMB>	PRC_DELAY, prc_delay_vec, EXT, 0,   0,		-1,	0,	< prc_delay soft vector >
VDF <F,HMB>	PRC_SET_IPL, set_ipl_vec, INT, 0,   0,		-1,	0,	< prc_set_ipl soft vector >
VDF <F,HMB>	SAVE,      savintp, INT, 0,         0,		-1,	0,	< context save soft vector >
VDF <F,HMB>	RESTORE,   restintp,INT 0,          0,		-1,	0,	< context restore soft vector >
VDF <D,NET_LVL>	NET,       netintp, INT 0,          0,		NET_LVL,0,	< network int soft vector >
VDF <T,TOM>	TOMINT,    tomvec,  EXT 0,	    0,		VBI_LVL,tomint	< Tom's h/w entry >
;VDF <T,TOM>	RAWVB,	   vbvec,   EXT 0,          0,		-1,	rawvb	< Vertical blanking, derived >
;VDF <T,TOM>	RAWVI,	   vivec,   EXT tom_install,TOM_VI,	-1,	rawvi	< Cojag VI (maybe VB) IRQ >
VDF <T,TOM>	RAWVB,	   vbvec,   EXT 0,          0,		-1,	0	< Vertical blanking, derived >
VDF <T,TOM>	RAWVI,	   vivec,   EXT tom_install,TOM_VI,	-1,	0	< Cojag VI (maybe VB) IRQ >
VDF <T,TOM>	GPU,       gpuvec,  EXT tom_install,TOM_GPU,	-1,	0,	< Cojag GPU "done" IRQ >
VDF <T,TOM>	DSP,       dspvec,  EXT tom_install,TOM_DSP,	-1,	0,	< Cojag DSP "service" IRQ >
VDF <T,TOM>	OBJ,       objvec,  EXT tom_install,TOM_OBJ,	-1,	0,	< Cojag Object Processor IRQ >
VDF <T,TOM>	PIT,       pitvec,  EXT tom_install,TOM_PIT,	-1,	0,	< Cojag Prog Interval Timer >
VDF <T,P3K|P4K> SW0,	   0,	    INT hwvinst,    VN_IRQ0,    -1,	0,	< Software interrupt 0 >
VDF <T,P3K|P4K> SW1,	   0,       INT hwvinst,    VN_IRQ1,    -1,	0,	< Software interrupt 0 >
VDF <T,P3K|P4K> ICELESS,   0,       INT hwvinst,    VN_IRQ2,    -1,	0,	< ICELESS interrupt >
VDF <T,H3K>	XBUS0,	   0,	    INT hwvinst,    VN_IRQ3,	XBUS0_LVL, xbus0_irq, < Xbus interrupt 0>
VDF <T,H3K>	XBUS1,	   0,	    INT hwvinst,    VN_IRQ4,	XBUS1_LVL, xbus1_irq, < Xbus interrupt 1>
VDF <T,H3K>	XBUS2,	   0,	    INT hwvinst,    VN_IRQ5,	XBUS2_LVL, xbus2_irq, < Xbus interrupt 2>
VDF <T,H3K>	XBUS3,	   0,	    INT hwvinst,    VN_IRQ6,	XBUS3_LVL, xbus3_irq, < Xbus interrupt 3>
VDF <T,H3K|H4K>	NORMAL,	   0,       INT hwvinst,    VN_NORMAL,  -1,	normal_exception, < Normal exception (for compatibility with old stub)>
VDF <T,H3K>	CHEAP,	   0,	    INT hwvinst,    VN_CHEAP,   -1,	0,	< Cheap exception (for compatibility with old stub)>
VDF <T,H4K>	XBUS,	   0,	    INT hwvinst,    VN_IRQ3,    -1,	xbus_irq, < Any XBUS interrupt >
.iif not_defined, HOST_IS_MATHBOX, HOST_IS_MATHBOX == 0
.if true, ((HOST_BOARD == HCR4K) && HOST_IS_MATHBOX) || (HOST_BOARD == MB4600)
VDF <T,1>	FIFOMT,	   0,       INT hwvinst,    VN_IRQ5,    -1,	zag_fifomt_irq, < Mathbox FIFO empty interrupt >
VDF <T,1>	FIFOFULL,  0,       INT hwvinst,    VN_IRQ6,    -1,	zag_fifofull_irq, < Mathbox FIFO full interrupt >
.endc
VDF <T,P3K|P4K>	TIMER,	   0,	    INT hwvinst,    VN_IRQ7,    -1,	cputimerint, < CPU timer interrupt >
VDF <T,P3K|P4K>	TLBMOD,	   0,	    INT hwvinst,    VN_TLBM,    -1,	0,	< TLB modification >
VDF <T,P3K|P4K>	TLBLOAD,   0,	    INT hwvinst,    VN_TLBL,    -1,	0,	< TLB miss on I or D fetch >
VDF <T,P3K|P4K>	TLBSTORE,  0,	    INT hwvinst,    VN_TLBS,    -1,	0,	< TLB miss on store >
VDF <T,P3K|P4K>	ADDRERRL,  0,	    INT hwvinst,    VN_ADDRL,   -1,	0,	< Address error on I or D fetch >
VDF <T,P3K|P4K>	ADDRERRS,  0,	    INT hwvinst,    VN_ADDRS,   -1,	0,	< Address error on store >
VDF <T,P3K|P4K>	BUSERRI,   0,	    INT hwvinst,    VN_BUSERRI, -1,	0,	< Bus error on I-fetch >
VDF <T,P3K|P4K>	BUSERRD,   0,	    INT hwvinst,    VN_BUSERRD, -1,	0,	< Bus error on D-fetch >
VDF <T,P3K|P4K>	SYSCALL,   0,       INT hwvinst,    VN_SYSCALL, -1,	0,	< SYSCALL instruction >
VDF <T,P3K|P4K>	BREAK,     0,       INT hwvinst,    VN_BREAK,   -1,	0,	< Breakpoint instruction >
VDF <T,P3K|P4K>	RESERV,    0,       INT hwvinst,    VN_RESERV,  -1,	0,	< Reserved instruction >
VDF <T,P3K|P4K>	COPROC,    0,       INT hwvinst,    VN_COPROC,  -1,	0,	< Coprocessor unusable >
VDF <T,P3K|P4K>	OVRFLOW,   0,       INT hwvinst,    VN_OVERFL,  -1,	0,	< Integer Arithmetic Overflow >
VDF <T,P4K>	TRAP,      0,       INT hwvinst,    VN_TRAPV,   -1,	0,	< TRAP exception >
VDF <T,P4K>	FLOAT,     0,       INT hwvinst,    VN_FPE,     -1,	0,	< FLoating point exception >
VDF <F,HMB>	ZRE,       zrevec,  INT 0,          0,		-1,	0,	< ZRE done interrupt >
VDF <F,HMB>	GAMEFRAME, framevec,INT 0,	    0,		-1,	0,	< Frame complete >
VDF <D,ZTV_CTL>	ZTV,       ztvint,  EXT 0,          0,  	ZTV_LVL, ztv_irq,< ZTV interrupt >
VDF <D,SND_I>	CAGE,      cagevec, INT 0,          0,  	CAGE_LVL,aud_irq, < CAGE interrupt >
;VDF <D,IDE_LVL>	IDE,	   idevec,  INT 0,	    0,		IDE_LVL, ide_irq,< Brian's IDE XBUS board >
VDF <D,ZMB_CSR>	ZMB,       zagvec,  INT 0,          0,		ZMB_LVL, zag_irq,< Mathbox interrupt >
VDF <T,H4K>	TIMERPLL,  tpllvec, VEXT 0,	    0,		-1,	timer_pll, <Adjust 1MS timer>
;
.endc			; (_DISPATCH_MAC_&1) != 0 *** DON'T MOVE THIS LINE EITHER ***
;
;+++++++ From here on, there are few user servicable parts inside. ++++
;
; This is sortof how it works:
; The first pass through, _DISPATCH_MAC_ will be 0 (set above by the .if not_defined).
; First the copyright boilerplate is inserted into both output files and the macro VDF
; is defined to create externs. Some struct definitions and unique externs are depositied
; into the .h file. Next _DISPATCH_MAC_ is set to 1 and this file is .included
; again. This will cause MACPP to read the VDF table above and output the appropriate
; information in the .h file but ignore the rest of the file. The VDF macro is redefined,
; and the procedure is repeated causing the creation of different items according to what
; is needed. Once the whole .h file is built, the procedure repeats for the building of the
; .c file.
;
.if true, _DISPATCH_MAC_ == 0		; First (main) pass
 H3K == 0				; Assume the shortcut variables are false
 H4K == 0
 HMB == 0
 P3K == 0
 P4K == 0
 TOM == 0
 .iif true, HOST_BOARD == LCR3K, H3K == 1 ;set the appropriate ones true as desired
 .iif true, HOST_BOARD == HCR4K, H4K == 1
 .iif true, HOST_BOARD == MB4600, HMB == 1
 .iif true, ((PROCESSOR&-16) == MIPS3000), P3K == 1
 .iif true, ((PROCESSOR&-16) == MIPS4000), P4K == 1
 .iif defined, TOM_BASE, TOM == 1
;
	.macro .condit flag,exp		; The .condit macro does an expression test ...
	.if identical,<flag>,<T>
		.iif false,exp,.mexit 10 ; ... and aborts higher level macros if false
		.mexit
	.endc
	.if identical,<flag>,<F>
		.iif true,exp,.mexit 10	; ... etc.
		.mexit
	.endc
	.if identical,<flag>,<D>
		.iif not_defined,exp,.mexit 10
		.mexit
	.endc
	.if identical,<flag>,<N>
		.iif defined,exp,.mexit 10
		.mexit
	.endc
	.endm
;	
	.macro boilerplate file_name
/*		file_name
 *
 *		Copyright 1995 Time Warner Interactive, Inc.
 *	Unauthorized reproduction, adaptation, distribution, performance or 
 *	display of this computer program or the associated audiovisual work
 *	is strictly prohibited.
 *
 * ++++++ WARNING WARNING WARNING WARNING WARNING +++++
 * This file is machine generated. Any changes you put in here will be lost
 * the next time vecs.mac is touched. You need to make your changes to
 * vecs.mac instead of this file.
 */
	.endm
	boilerplate dispatch.c
	.outfile	1		;The externs go into the .h file
	boilerplate intvecs.h
#if !defined(_INTVECS_H_)
#define _INTVECS_H_

struct irq_tab {
	void 	(**softvec)();
	void    (*(*installer)(const struct irq_tab *, void(*new)()))();
	int	notes;
};
;
 .if defined, TOM_BASE
#define TOM_VI  (0)
#define TOM_GPU	(1)
#define TOM_DSP (2)
#define TOM_OBJ (3)
#define TOM_PIT (4)
 .endc
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
 .if dif,<softvec>,<0>
  ...1 == 0
  .iif idn,<intern>,<VINT>,...1 == 1
  .iif idn,<intern>,<VEXT>,...1 == 1
  .if true, ...1
extern	void (* volatile softvec)();	/* comments */
  .iff
extern  void (*softvec)();	/* comments */
  .endc
 .endc
	.endm
;
	_DISPATCH_MAC_ == 1		;next time we process the IRQ table
	.include vecs.mac		;Make the externs

enum vecs {
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
    name'_INTVEC,
	.endm
	.include vecs.mac		;Make the enums
    N_INTVECS
};

void (*prc_set_vec (unsigned int vecnum, void (*routine)() ))();
void prc_init_vecs(void);		/* set the default vectors */
;
; Add a prototype for an as yet unused function
.if true, 0

/*		prc_set_vecp(which, what)
 *	Sets a special vector for the interrupt identified by <which>
 *	to call the routine specified by <what>. <what> is
 *	a struct that contains both a pointer to the code
 *	to execute and an optional pointer to the private
 *	variables for that routine. This is a change from the
 *	behavior of prc_set_vec, and is intended to allow
 *	multiple incarnations of a given device to share code.
 */

struct opaque;
extern struct VECP_vector {
    void (*function)(struct opaque *);	/* Who you gonna call */
    struct opaque *cookie;		/* a magic cookie to hand him */
} prc_set_vecp (
    int __which,			/* one of xxx_INTVEC */
    struct IRQ_vector __what		/* BY VALUE!!! */
);
.endc
#endif		/* _INTVECS_H_ */
;
; At this point, we have completed all processing of the .h file
; so switch back to the .c file
;
	.outfile	0		;switch back to dispatch.c
;
#include <config.h>			/* begining of dispatch.c */
#include <os_proto.h>
#include <intvecs.h>

 .if true, (HOST_BOARD == LCR3K) || (HOST_BOARD == HCR4K)
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
  .iif idn,<name>,<XBUS0>,.mexit
  .iif idn,<name>,<XBUS1>,.mexit
  .iif idn,<name>,<XBUS2>,.mexit
  .iif idn,<name>,<XBUS3>,.mexit
  .if true, physical == XBUS0_LVL
    	...XBUS0 == ...XBUS0 + 1
	.mexit
  .endc
  .if true, physical == XBUS1_LVL
    	...XBUS1 == ...XBUS1 + 1
	.mexit
  .endc
  .if true, physical == XBUS2_LVL
    	...XBUS2 == ...XBUS2 + 1
	.mexit
  .endc
  .if true, physical == XBUS3_LVL
    	...XBUS3 == ...XBUS3 + 1
	.mexit
  .endc
	.endm
...XBUS0 == 0
...XBUS1 == 0
...XBUS2 == 0
...XBUS3 == 0
	.include vecs.mac		; count all XBUS interrupt vectors
 .endc
; 
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
 .if dif,<softvec>,<0>
  .if idn,<intern>,<INT>
void (*softvec)();	/* comments */
  .endc
  .if idn,<intern>,<VINT>
void (* volatile softvec)();	/* comments */
  .endc
 .endc
 .if dif,<default>,<0>
  .if idn,<name>,<XBUS>
static void 'default'(void);
    .mexit
  .endc
  .if idn,<name>,<XBUS0>
   .if true, ...XBUS0
static void 'default'(void);
   .endc
   .mexit
  .endc
  .if idn,<name>,<XBUS1>
   .if true, ...XBUS1
static void 'default'(void);
   .endc
   .mexit
  .endc
  .if idn,<name>,<XBUS2>
   .if true, ...XBUS2
static void 'default'(void);
   .endc
   .mexit
  .endc
  .if idn,<name>,<XBUS3>
   .if true, ...XBUS3
static void 'default'(void);
   .endc
   .mexit
  .endc
extern void 'default'(void);
 .endc
	.endm
	.include vecs.mac		;Declare the non-extern vectors

;
 .if true, ((PROCESSOR&-16) == MIPS3000) || ((PROCESSOR&-16) == MIPS4000)
static void (*hwvinst(const struct irq_tab *, void (*)()))();
 .endc
 .if defined, TOM_BASE
extern void (*tom_install(const struct irq_tab *, void(*)()))();
 .endc
;
static const struct irq_tab irq_inits[] = {
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
 .if dif,<softvec>,<0>
 { (void (**)())&softvec, installer, notes },	/* comments */
 .iff
 { 0, installer, notes },	/* comments */
 .endc
	.endm
	.include vecs.mac		;Build the irq_inits array
 { 0, 0, 0} };
;
.if true, ((PROCESSOR&-16) == MIPS3000) || ((PROCESSOR&-16) == MIPS4000)

extern void (*(*exception_tbl)[])();
void (*exception_funcs[VN_MAX])();

static void (*hwvinst(const struct irq_tab *it, void (*new)()))() {
    int indx;
    void (*old_rtn)();

    indx = it->notes;
    if (indx >= VN_MAX) return 0;
    old_rtn = (*exception_tbl)[indx];
    (*exception_tbl)[indx] = new;
    return old_rtn;
}
.endc

void (*prc_set_vec (unsigned int vecnum, void (*routine)() ))()
{
    void (*old_rtn)();
    void (**softvec)();
    const struct irq_tab *tbp;
    int old_ipl;

    if ( vecnum >= N_INTVECS ) return 0;
    tbp = irq_inits+vecnum;
    softvec = tbp->softvec;
    old_rtn = 0;
    old_ipl = prc_set_ipl(INTS_OFF);
    if ( tbp->installer ) old_rtn = tbp->installer(tbp, routine);
    if ( softvec ) {
	old_rtn = *softvec;
	*softvec = routine;
    }
    prc_set_ipl(old_ipl);
    return old_rtn;
}

 .if true, (HOST_BOARD == LCR3K) || (HOST_BOARD == HCR4K)
  .if true, ...XBUS0
void xbus0_irq(void) {
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
  .iif idn,<name>,<XBUS0>,.mexit
  .if true, physical == XBUS0_LVL
    if (softvec) softvec();
  .endc
	.endm
	.include vecs.mac		; pickup all vectors assigned to IRQ 0
    return;
}

  .endc
  .if true, ...XBUS1
static void xbus1_irq(void) {
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
  .iif idn,<name>,<XBUS1>,.mexit
  .if true, physical == XBUS1_LVL
    if (softvec) softvec();
  .endc
	.endm
	.include vecs.mac		; pickup all vectors assigned to IRQ 1
    return;
}

  .endc
  .if true, ...XBUS2
static void xbus2_irq(void) {
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
  .iif idn,<name>,<XBUS2>,.mexit
  .if true, physical == XBUS2_LVL
    if (softvec) softvec();
  .endc
	.endm
	.include vecs.mac		; pickup all vectors assigned to IRQ 2
    return;
}

  .endc
  .if true, ...XBUS3
static void xbus3_irq(void) {
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
  .iif idn,<name>,<XBUS3>,.mexit
  .if true, physical == XBUS3_LVL
    if (softvec) softvec();
  .endc
	.endm
	.include vecs.mac		; pickup all vectors assigned to IRQ 3
    return;
}

  .endc		; ...XBUS3
 .endc		; HOST_BOARD == LCR3K || HOST_BOARD == HCR4K
 .if true, (HOST_BOARD == HCR4K)
static void xbus_irq(void) {
    int which;
    which = *(VU32 *)(XBUS_SLOT0+4);
  .if true, ...XBUS0
    if (!(which&1)) xbus0_irq();
  .endc
  .if true, ...XBUS1
    if (!(which&2)) xbus1_irq();
  .endc
  .if true, ...XBUS2
    if (!(which&4)) xbus2_irq();
  .endc
  .if true, ...XBUS3
    if (!(which&8)) xbus3_irq();
  .endc
    return;
}

 .endc		; HOST_BOARD == HCR4K
void prc_init_vecs(void) {
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
.if dif,<default>,<0>
 .if true, H3K|H4K
  .if idn,<name>,<XBUS0>
   .iif true, ...XBUS0 == 0, .mexit
  .endc
  .if idn,<name>,<XBUS1>
   .iif true, ...XBUS1 == 0, .mexit
  .endc
  .if idn,<name>,<XBUS2>
   .iif true, ...XBUS2 == 0, .mexit
  .endc
  .if idn,<name>,<XBUS3>
   .iif true, ...XBUS3 == 0, .mexit
  .endc
 .endc
    prc_set_vec('name'_INTVEC, default);
.endc
	.endm
	.include vecs.mac
    return;
}
.endc		; _DISPATCH_MAC_ == 0
@


1.19
log
@Protected the reference to HOST_IS_MATHBOX
@
text
@d84 3
a86 2
This field contains the keyword INT or EXT identifying the vector in field 4
as being defined EXTernally to dispatch.c or INTernally to dispatch.c
d173 1
a173 1
VDF <T,H4K>	TIMERPLL,  tpllvec, EXT 0,	    0,		-1,	timer_pll, <Adjust 1MS timer>
d259 6
d266 1
d355 3
d405 1
a405 1
 { &softvec, installer, notes },	/* comments */
@


1.18
log
@Put more concise conditionals around FIFO interrupts.
@
text
@d146 1
@


1.17
log
@Changed the ZRE_INTVEC to a softvector.
Added GAMEFRAME_INTVEC softvector (no default)
Added TIMERPLL_INTVEC softvector (defaults to timer_pll)
@
text
@d146 4
a149 2
VDF <T,H4K|HMB>	FIFOMT,	   0,       INT hwvinst,    VN_IRQ5,    -1,	zag_fifomt_irq, < Mathbox FIFO empty interrupt >
VDF <T,H4K|HMB>	FIFOFULL,  0,       INT hwvinst,    VN_IRQ6,    -1,	zag_fifofull_irq, < Mathbox FIFO full interrupt >
@


1.16
log
@Added default irq routines for FIFOFULL_INTVEC and FIFOMT_INTVEC
@
text
@d163 2
a164 2
;VDF <D,ZRE_CSR>	ZRE,       zrevec,  INT 0,          0,		ZRE_LVL,zre_irq,< ZRE interrupt >
VDF <D,ZRE_CSR>	ZRE_FRAME, framevec,INT 0,	    0,		-1,	0,	< ZRE Frame change >
d169 1
@


1.15
log
@Changed the zmb_ references to zag_.
@
text
@d146 2
a147 2
VDF <T,H4K|HMB>	FIFOMT,	   0,       INT hwvinst,    VN_IRQ5,    -1,	0,	< Mathbox FIFO empty interrupt >
VDF <T,H4K|HMB>	FIFOFULL,  0,       INT hwvinst,    VN_IRQ6,    -1,	0,	< Mathbox FIFO full interrupt >
d163 1
a163 1
VDF <D,ZRE_CSR>	ZRE,       zrevec,  INT 0,          0,		ZRE_LVL,zre_irq,< ZRE interrupt >
@


1.14
log
@Made xbusn_irq()'s static and shuffled the "counter" around to accomodate it.
@
text
@d168 1
a168 1
VDF <D,ZMB_CSR>	ZMB,       zmbvec,  INT 0,          0,		ZMB_LVL, zmb_irq,< Mathbox interrupt >
@


1.13
log
@Someday, jag_vid will be fixed so it doesn't have to do a
prc_set_vec() to rawvb and rawvi. In the meantime, I removed
the default vectors for those two to keep the system quiet.
@
text
@a138 4
VDF <T,H4K>	XBUS0,	   0,	    INT hwvinst,    VN_IRQ3,	-1,	xbus0_irq, < Xbus interrupt 0>
VDF <T,H4K>	XBUS1,	   0,	    INT hwvinst,    VN_IRQ4,	-1,	xbus1_irq, < Xbus interrupt 1>
VDF <T,H4K>	XBUS2,	   0,	    INT hwvinst,    VN_IRQ5,	-1,	xbus2_irq, < Xbus interrupt 2>
VDF <T,H4K>	XBUS3,	   0,	    INT hwvinst,    VN_IRQ6,	-1,	xbus3_irq, < Xbus interrupt 3>
d145 1
a145 1
VDF <T,H4K>	XBUS,	   0,	    INT hwvinst,    VN_IRQ3,    -1,	0,	< Any XBUS interrupt >
d306 31
d345 28
a436 29
	.macro VDF cond, name, softvec, intern, installer, notes, physical, default, comments
	.condit cond	
  .iif idn,<name>,<XBUS0>,.mexit
  .iif idn,<name>,<XBUS1>,.mexit
  .iif idn,<name>,<XBUS2>,.mexit
  .iif idn,<name>,<XBUS3>,.mexit
  .if true, physical == XBUS0_LVL
    	...XBUS0 == ...XBUS0 + 1
	.mexit
  .endc
  .if true, physical == XBUS1_LVL
    	...XBUS1 == ...XBUS1 + 1
	.mexit
  .endc
  .if true, physical == XBUS2_LVL
    	...XBUS2 == ...XBUS2 + 1
	.mexit
  .endc
  .if true, physical == XBUS3_LVL
    	...XBUS3 == ...XBUS3 + 1
	.mexit
  .endc
	.endm
...XBUS0 == 0
...XBUS1 == 0
...XBUS2 == 0
...XBUS3 == 0
	.include vecs.mac		; count all XBUS interrupt vectors
 
d452 1
a452 1
void xbus1_irq(void) {
d466 1
a466 1
void xbus2_irq(void) {
d480 1
a480 1
void xbus3_irq(void) {
d495 1
a495 1
void xbus_irq(void) {
a513 2
.list
.list
@


1.12
log
@Fixed a conditional test in prc_init_vecs().
Added some additional comments.
@
text
@d128 4
a131 2
VDF <T,TOM>	RAWVB,	   vbvec,   EXT 0,          0,		-1,	rawvb	< Vertical blanking, derived >
VDF <T,TOM>	RAWVI,	   vivec,   EXT tom_install,TOM_VI,	-1,	rawvi	< Cojag VI (maybe VB) IRQ >
@


1.11
log
@Re-org'ed the table. Added a default function. Added a prc_init_vec() to
install the default vectors. Removed XBUS interrupt code if no vectors
declared for the interrupt.
@
text
@d273 1
d407 1
a407 1
	.include vecs.mac		; pickup all vectors assigned to IRQ 0
d421 1
a422 1

d435 1
a436 1

d449 1
a450 1

d463 1
a465 1

d484 1
d486 2
a487 1

d493 12
a504 4
  .iif true, (physical == XBUS0_LVL) && (...XBUS0 == 0), .mexit
  .iif true, (physical == XBUS1_LVL) && (...XBUS1 == 0), .mexit
  .iif true, (physical == XBUS2_LVL) && (...XBUS2 == 0), .mexit
  .iif true, (physical == XBUS3_LVL) && (...XBUS3 == 0), .mexit
@


1.10
log
@Added soft vectors set_ipl_vec, savintp, and restintp for
upper layer os (Nucleus) support.  Also added netintp for
NET_LVL support.
@
text
@d22 1
a22 1
; changing anything in this file other than the VEC_DEF table listed below.
d29 1
a29 1
	.outfile 0			;6 ... eight ...
d31 140
a170 105
.if true, (_DISPATCH_MAC_&1) != 0	;8 -----
;
; You are free to add or remove entries from this table according to your
; requirements. The NAME field is the name of the virtual vector (an _INTVEC
; will be appended to it in the C definitions in intvecs.h), the Vector field
; is the name of a variable in BSS that contains a pointer to the function to
; call at interrupt (or will be set by the prc_set_vec() function). This is
; the name of the "soft" or logical vector and is either declared in
; dispatch.c or externally according to the INT/EXT field. The Installer is a
; optional pointer to the function that prc_set_vec() will call to actually
; install the vector or 0 if there is none. The Phys field is an indicator to
; which physical interrupt this virtual vector belongs. I.e. XBUS_IRQ0,
; XBUS_IRQ1, etc. This field is used to build a list of functions to call
; during hardware interrupt dispatch. A -1 in this field indicates that the
; logical vector is not associated with a hardware vector and is therefore not
; used by the interrupt dispatcher. The Notes field is a parameter that is
; passed to the installer if there is one. The INT/EXT field indicates whether
; the softvector is to be declared in dispatch.c (INT) or externally (EXT).
; The Comments field is placed on selected lines in intvecs.h and/or
; dispatch.c as simple 'C' comments.
;
; The R3K/R4K has an option where a number of vectors are maintained in an
; array of pointers rather than each one having its own name. The index into
; the array is same as the number returned in the processor's CAUSE register
; for that particluar interrupt. This procedure is done simply for performance
; reasons. The option is selected by using a 0 for the "Vector" field and using
; an installer function.
;
;Macro  Name	   Vector   Installer   Phys  Notes   INT/EXT	Comments
;------------------------------------------------------------------------------------------
 .if true, HOST_BOARD != MB4600
VEC_DEF GAMEVB,	   gameint, 0,           -1,  0,          EXT	< post-wierdness Vblank >
VEC_DEF MS4,       ms4vec,  0,           -1,  0,          EXT	< 4 Millisecond timer >
VEC_DEF PRC_DELAY, prc_delay_vec, 0,     -1,  0,          EXT	< prc_delay soft vector >
VEC_DEF PRC_SET_IPL, set_ipl_vec, 0,     -1,  0,          INT	< prc_set_ipl soft vector >
VEC_DEF SAVE,      savintp, 0,           -1,  0,          INT	< context save soft vector >
VEC_DEF RESTORE,   restintp, 0,          -1,  0,          INT	< context restore soft vector >
  .if defined, NET_LVL
VEC_DEF NET,       netintp, 0,          NET_LVL, 0,       INT	< network int soft vector >
  .endc
 .endc
 .if defined, TOM_BASE
VEC_DEF TOMINT,    tomvec,  0,		VBI_LVL, 0,	  EXT	< Tom's h/w entry >
VEC_DEF RAWVB,	   vbvec,   0,           -1,  0,          EXT	< Vertical blanking, derived >
VEC_DEF RAWVI,	   vivec,   tom_install, -1,  TOM_VI      EXT	< Cojag VI (maybe VB) IRQ >
VEC_DEF GPU,       gpuvec,  tom_install, -1,  TOM_GPU     EXT	< Cojag GPU "done" IRQ >
VEC_DEF DSP,       dspvec,  tom_install, -1,  TOM_DSP     EXT	< Cojag DSP "service" IRQ >
VEC_DEF OBJ,       objvec,  tom_install, -1,  TOM_OBJ     EXT	< Cojag Object Processor IRQ >
VEC_DEF PIT,       pitvec,  tom_install, -1,  TOM_PIT     EXT	< Cojag Prog Interval Timer >
 .endc
 .if true, ((PROCESSOR&-16) == MIPS3000) || ((PROCESSOR&-16) == MIPS4000)
VEC_DEF SW0,	   0,	    hwvinst,	 -1,  VN_IRQ0,    INT	< Software interrupt 0 >
VEC_DEF SW1,	   0,       hwvinst,     -1,  VN_IRQ1,    INT	< Software interrupt 0 >
VEC_DEF ICELESS,   0,       hwvinst,     -1,  VN_IRQ2,    INT	< ICELESS interrupt >
  .if true, (HOST_BOARD == LCR3K)
VEC_DEF XBUS0,	   0,	    hwvinst,	 -1,  VN_IRQ3,	  INT	< Xbus interrupt 0>
VEC_DEF XBUS1,	   0,	    hwvinst,	 -1,  VN_IRQ4,	  INT	< Xbus interrupt 1>
VEC_DEF XBUS2,	   0,	    hwvinst,	 -1,  VN_IRQ5,	  INT	< Xbus interrupt 2>
VEC_DEF XBUS3,	   0,	    hwvinst,	 -1,  VN_IRQ6,	  INT	< Xbus interrupt 3>
VEC_DEF NORMAL,	   0,       hwvinst,	 -1,  VN_NORMAL,  INT	< Normal exception (for compatibility with old stub)>
VEC_DEF CHEAP,	   0,	    hwvinst,	 -1,  VN_CHEAP,   INT	< Cheap exception (for compatibility with old stub)>
  .endc
  .if true, (HOST_BOARD == HCR4K)
VEC_DEF XBUS,	   0,	    hwvinst,	 -1,  VN_IRQ3,    INT	< Any XBUS interrupt >
  .endc
  .if true, (HOST_BOARD == MB4600) || (HOST_BOARD == HCR4K)
VEC_DEF FIFOMT,	   0,       hwvinst,     -1,  VN_IRQ5,    INT	< Mathbox FIFO empty interrupt >
VEC_DEF FIFOFULL,  0,       hwvinst,     -1,  VN_IRQ6,    INT	< Mathbox FIFO full interrupt >
  .endc
VEC_DEF TIMER,	   0,	    hwvinst,	 -1,  VN_IRQ7,    INT	< CPU timer interrupt >
VEC_DEF TLBMOD,	   0,	    hwvinst,     -1,  VN_TLBM,    INT	< TLB modification >
VEC_DEF TLBLOAD,   0,	    hwvinst,     -1,  VN_TLBL,    INT	< TLB miss on I or D fetch >
VEC_DEF TLBSTORE,  0,	    hwvinst,     -1,  VN_TLBS,    INT	< TLB miss on store >
VEC_DEF ADDRERRL,  0,	    hwvinst,     -1,  VN_ADDRL,   INT	< Address error on I or D fetch >
VEC_DEF ADDRERRS,  0,	    hwvinst,     -1,  VN_ADDRS,   INT	< Address error on store >
VEC_DEF BUSERRI,   0,	    hwvinst,	 -1,  VN_BUSERRI, INT	< Bus error on I-fetch >
VEC_DEF BUSERRD,   0,	    hwvinst,	 -1,  VN_BUSERRD, INT	< Bus error on D-fetch >
VEC_DEF SYSCALL,   0,       hwvinst,     -1,  VN_SYSCALL, INT	< SYSCALL instruction >
VEC_DEF BREAK,     0,       hwvinst,     -1,  VN_BREAK,   INT	< Breakpoint instruction >
VEC_DEF RESERV,    0,       hwvinst,     -1,  VN_RESERV,  INT	< Reserved instruction >
VEC_DEF COPROC,    0,       hwvinst,     -1,  VN_COPROC,  INT	< Coprocessor unusable >
VEC_DEF OVRFLOW,   0,       hwvinst,     -1,  VN_OVERFL,  INT	< Integer Arithmetic Overflow >
  .if true, (PROCESSOR&-16) == MIPS4000
VEC_DEF TRAP,      0,       hwvinst,     -1,  VN_TRAPV,   INT	< TRAP exception >
VEC_DEF FLOAT,     0,       hwvinst,     -1,  VN_FPE,     INT   < FLoating point exception >
  .endc
 .endc
 .if true, (HOST_BOARD == LCR3K) || (HOST_BOARD == HCR4K)
   .if defined, ZRE_CSR
VEC_DEF ZRE,       zrevec,  0,           ZRE_LVL, 0	  INT	< ZRE interrupt >
VEC_DEF ZRE_FRAME, framevec,0,		 -1,  0,     	  INT	< ZRE Frame change >
   .endc
   .if defined, ZTV_CTL
VEC_DEF ZTV,       ztvint,  0,           ZTV_LVL, 0 	  EXT	< ZTV interrupt >
   .endc
   .if defined, SND_I
VEC_DEF CAGE,      cagevec, 0,           CAGE_LVL, 0	  INT	< CAGE interrupt >
   .endc
   .if defined, IDE_LVL
VEC_DEF IDE,	   idevec,  0,		 IDE_LVL, 0	  INT	< Brian's IDE XBUS board >
   .endc
   .if defined, ZMB_CSR
VEC_DEF ZMB,       zmbvec,  0,           ZMB_LVL, 0	  INT	< Mathbox interrupt >
   .endc
 .endc
d172 1
a172 1
.endc			; (_DISPATCH_MAC_&1) != 0
d174 1
a174 1
;+++++++ From here on, there are no user servicable parts inside. ++++
d178 1
a178 1
; First the copyright boilerplate is inserted into both output files and the macro VEC_DEF
d181 2
a182 2
; again. This will cause MACPP to read the VEC_DEF table above and output the appropriate
; information in the .h file but ignore the rest of the file. The VEC_DEF macro is redefined,
d188 32
a241 1
	void 	(*def_ack)();
d253 2
a254 1
	.macro VEC_DEF name, softvec, installer, physical, notes, intern, comments
d264 2
a265 1
	.macro VEC_DEF name, softvec, installer, physical, notes, intern, comments
a305 1
;#include <interrupt.h>
d307 2
a308 1
	.macro VEC_DEF name, softvec, installer, physical, notes, intern, comments
d314 3
a320 4
 .if true, 0
static struct VECP_vector vecps[N_INTVECS]; /* prc_set_vecp() will use this array */

 .endc
d329 2
a330 1
	.macro VEC_DEF name, softvec, installer, physical, notes, intern, comments
d332 1
a332 1
 { &softvec, 0, installer, notes },	/* comments */
d334 1
a334 1
 { 0, 0, installer, notes },	/* comments */
d338 1
a338 1
 { 0, 0, 0, 0} };
a347 3
#if 0
    U32 *t;
#endif
a350 5
#if 0
    t = (U32*)exception_tbl;
    old_rtn = (void (*)())(t[indx]);
    t[indx] = (U32)new;
#else
a352 1
#endif
d379 34
a412 3
int xbus0_irq(void) {
    int sts=0;
	.macro VEC_DEF name, softvec, installer, physical, notes, intern, comments
d414 1
a414 1
    if (softvec) {++sts; softvec(); }
d417 2
a418 2
	.include vecs.mac
    return sts;
d420 1
d422 5
a426 3
int xbus1_irq(void) {
    int sts=0;
	.macro VEC_DEF name, softvec, installer, physical, notes, intern, comments
d428 1
a428 1
    if (softvec) {++sts; softvec(); }
d431 2
a432 2
	.include vecs.mac
    return sts;
d434 1
d436 5
a440 3
int xbus2_irq(void) {
    int sts=0;
	.macro VEC_DEF name, softvec, installer, physical, notes, intern, comments
d442 1
a442 1
    if (softvec) {++sts; softvec(); }
d445 2
a446 2
	.include vecs.mac
    return sts;
d448 1
d450 5
a454 3
int xbus3_irq(void) {
    int sts=0;
	.macro VEC_DEF name, softvec, installer, physical, notes, intern, comments
d456 1
a456 1
    if (softvec) {++sts; softvec(); }
d459 2
a460 2
	.include vecs.mac
    return sts;
d462 1
d466 16
a481 8
int xbus_irq(void) {
   int which;
   which = *(VU32 *)(XBUS_SLOT0+4);
   if (!(which&1)) xbus0_irq();
   if (!(which&2)) xbus1_irq();
   if (!(which&4)) xbus2_irq();
   if (!(which&8)) xbus3_irq();
   return 1;
d484 17
@


1.9
log
@changed .if defined IDE_REG_OFFSET to .if defined IDE_LVL (line 123)
@
text
@d65 6
@


1.8
log
@Added a vector for the IDE Xbus board
@
text
@d123 1
a123 1
   .if defined, IDE_REG_OFFSET
@


1.7
log
@Changed the type of exception_tbl to match what it really is.
@
text
@d123 3
@


1.6
log
@Renamed exception_table to exception_tbl to avoid problems with non-updated Makefiles et al.
@
text
@d265 1
a265 1
extern U32 *exception_tbl;
d271 1
d273 2
d277 2
a278 1
    t = exception_tbl;
d281 4
@


1.5
log
@Added an entry for tomint on CoJag systems.
@
text
@d265 1
a265 1
extern U32 *exception_table;
d274 1
a274 1
    t = exception_table;
@


1.4
log
@Fixed conditionals around TOM_xxx defines.
@
text
@d67 1
@


1.3
log
@Fixed conditional around TOM_xxx defines
@
text
@a170 1
  .if true, OUTPUT_LANG == LANG_C
a175 1
  .endc
@


1.2
log
@Added TOM_xxx to intvecs.h
@
text
@d171 1
a171 1
  .if OUTPUT_LANG == LANG_C
@


1.1
log
@Initial revision
@
text
@a165 1
;	void	*(*installer)(const struct irq_tab *, void (*new)());
d170 9
@
