head	1.2;
access;
symbols
	RUSH_1_06A:1.2;
locks; strict;
comment	@ * @;


1.2
date	96.06.24.00.21.57;	author forrest;	state Exp;
branches;
next	1.1;

1.1
date	96.02.28.15.53.17;	author forrest;	state Exp;
branches;
next	;


desc
@Routines for MK48T02 CMOS 2K x 8 TIMEKEEPER SRAM.
@


1.2
log
@Changed nisprintf to nsprintf.
@
text
@
/*
 *	rtc.c -- Forrest Miller -- February 1996
 *
 *	Functions for manipulating a timekeeper chip.
 *
 *
 *		Copyright 1996 Time Warner Interactive
 *	Unauthorized reproduction, adaptation, distribution, performance or 
 *	display of this computer program or the associated audiovisual work
 *	is strictly prohibited.
 */

#include <config.h>
#define GREAT_RENAME (1)
#include <os_proto.h>
#include <st_proto.h>
#include <string.h>
#include <nsprintf.h>
#include <eer_defs.h>

extern void eer_write_byte(volatile unsigned char *where, volatile unsigned char *unlock, int what);

#define	STATIC	static

#if ( EEPROM_SIZE & (EEPROM_SIZE-1) )

#define RTC_ADDR ( ( VU8* )( EEPROM_ADDR + ( EEPROM_SIZE << STRIDE ) ) )

#define CONTROL  0
#define SECONDS  1
#define MINUTES  2
#define HOUR     3
#define DAY      4
#define DATE     5
#define MONTH    6
#define YEAR     7

#define RTC_CONT ( RTC_ADDR + ( CONTROL << STRIDE ) )
#define RTC_SEC  ( RTC_ADDR + ( SECONDS << STRIDE ) )
#define RTC_MIN  ( RTC_ADDR + ( MINUTES << STRIDE ) )
#define RTC_HOUR ( RTC_ADDR + ( HOUR    << STRIDE ) )
#define RTC_DAY  ( RTC_ADDR + ( DAY     << STRIDE ) )
#define RTC_DATE ( RTC_ADDR + ( DATE    << STRIDE ) )
#define RTC_MON  ( RTC_ADDR + ( MONTH   << STRIDE ) )
#define RTC_YEAR ( RTC_ADDR + ( YEAR    << STRIDE ) )

char *const no_chip  = "Bad or Missing NVRAM";
char *const no_clock = "Stopped or Missing Clock";
char *const days     = "Mon\0Tue\0Wed\0Thu\0Fri\0Sat\0Sun";
char *const months   = "Jan\0Feb\0Mar\0Apr\0May\0Jun\0Jul\0Aug\0Sep\0Oct\0Nov\0Dec";

#define RTC_CTL_READ	0x40
#define RTC_CTL_WRITE	0x80
#define RTC_CTL_RUN	0
#define RTC_RETRIES	5
#define RTC_UNLOCK	( ( VU8 * ) BRAM_UNLK )
#define RTC_BUF_LEN	80
#define RTC_START	0
#define RTC_STOP	0x80

char *rtc_check()
{
 int retry;
 U8 data, year;

/* enable reads from timer and try to read the year */

 eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_READ );

 retry = 0;
 data = *RTC_YEAR;

 do
 {
  year = data;
  data = *RTC_YEAR;
 } while ( ( year != data ) && ( ++retry < RTC_RETRIES ) );

 if ( year != data ) return no_chip;


/* select a test pattern and try to write it to the timer */

 data = 0x99 - year;

 eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_WRITE);
 eer_write_byte( RTC_YEAR, RTC_UNLOCK, data);


/* enable reads from timer and see if we wrote to the timer */

 eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_READ);

 if ( data != *RTC_YEAR ) return no_chip;


/* enable writes to the timer and put original year back */

 eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_WRITE);
 eer_write_byte( RTC_YEAR, RTC_UNLOCK, year);


/* let the clock update and see if it does */

 eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_RUN);

 retry = 0;
 data = *RTC_SEC;

 do
 {
  prc_delay(16);
 } while ( ( data == *RTC_SEC ) && ( ++retry < RTC_RETRIES ) );

 if ( retry == RTC_RETRIES ) return no_clock;

 return (char *)0;
}


STATIC int   rtc_chk;
STATIC char *rtc_err;

#define binval(x) ( (x) - ( (x) >> 4 ) * 6 )

void rtc_display(int col, int row, int pal)
{
 char rtc_buf[RTC_BUF_LEN];
 int dow, month, year;

 if ( rtc_chk == 0 )
 {
  rtc_chk = 1;
  rtc_err = rtc_check();
 }

 if ( rtc_err ) txt_str(col, row, rtc_err, pal);
 else
 {
  eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_READ );	/* enable reads from timer */

  dow = ( binval(*RTC_DAY) - 1 ) * 4;
  month = ( binval(*RTC_MON) - 1 ) * 4;
  year = binval(*RTC_YEAR);

  nsprintf(rtc_buf, RTC_BUF_LEN, "%s %s %02X, %02X %02X:%02X:%02X", &days[dow],
   &months[month], *RTC_DATE, *RTC_YEAR + ( (year > 95) ? 0x1900 : 0x2000),
   *RTC_HOUR, *RTC_MIN, *RTC_SEC);
  txt_str(col, row, rtc_buf, pal);

  eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_RUN);
 }
}

/*
 *	plist[] (below) describes the parameters we wish to enter.
 */

static const struct parm plist [] = {
    /* Label		value		col/row	sigdig		curdig	*/
    { "Year:    ",	0,		4,4,	(BCD_FIELD|2),	0 	},
#define PIDX_YEAR  (0)
    { "Month:   ",	0,		4,5,	(BCD_FIELD|2),	0 	},
#define PIDX_MONTH (1)
    { "Date:    ",	0,		4,6,	(BCD_FIELD|2),	0 	},
#define PIDX_DATE  (2)
    { "Day:      ",	0,		4,7,	(BCD_FIELD|1),	0 	},
#define PIDX_DAY   (3)
    { "Hour:    ",	0,		4,8,	(BCD_FIELD|2),	0 	},
#define PIDX_HOUR  (4)
    { "Minute:  ",	0,		4,9,	(BCD_FIELD|2),	0 	},
#define PIDX_MIN   (5)
    { "Second:  ",	0,		4,10,	(BCD_FIELD|2),	0 	},
#define PIDX_SEC   (6)
    { 0,		0,		0,0,	0,		0 	}};

#define NPARMS (sizeof (plist)/sizeof(plist[0]))



int rtc_cb(struct parm *pp, int idx, struct opaque *op)
{
 unsigned long val;

 val = pp->val & 0xff;

 switch (idx)
 {
  case PIDX_YEAR:
   break;
  case PIDX_MONTH:
   if ( (val == 0) || (val > 100) ) val = 0x12;
   else if (val > 0x12) val = 1;
   break;
  case PIDX_DATE:
   if ( (val == 0) || (val > 100) ) val = 0x31;
   else if (val > 0x31) val = 1;
   break;
  case PIDX_DAY:
   if (val == 8) val = 1;
   if (val == 0) val = 7;
   break;
  case PIDX_HOUR:
   if (val > 100) val = 0x23;
   else if (val > 0x23) val = 0;
   break;
  case PIDX_MIN:
   if (val > 110) val = 0x59;
   else if (val > 0x59) val = 0;
   break;
  case PIDX_SEC:
   if (val > 110) val = 0x59;
   else if (val > 0x59) val = 0;
 } /* end switch (idx) */
 pp->val = val & 0xff;
 return 1;
}


int rtc_get_clock( struct parm *pp )
{
 eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_READ );	/* enable reads from timer */
 pp[PIDX_YEAR].val  = *RTC_YEAR;
 pp[PIDX_MONTH].val = *RTC_MON;
 pp[PIDX_DATE].val  = *RTC_DATE;
 pp[PIDX_DAY].val   = *RTC_DAY;
 pp[PIDX_HOUR].val  = *RTC_HOUR;
 pp[PIDX_MIN].val   = *RTC_MIN;
 pp[PIDX_SEC].val   = *RTC_SEC;
 eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_RUN);
 return 1;
}


int rtc_put_clock( struct parm *pp )
{
 eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_WRITE);		/* enable writes to clock */
 eer_write_byte( RTC_YEAR, RTC_UNLOCK, pp[PIDX_YEAR].val);	/* set the time to now */
 eer_write_byte( RTC_MON, RTC_UNLOCK, pp[PIDX_MONTH].val);
 eer_write_byte( RTC_DATE, RTC_UNLOCK, pp[PIDX_DATE].val);
 eer_write_byte( RTC_DAY, RTC_UNLOCK, pp[PIDX_DAY].val);
 eer_write_byte( RTC_HOUR, RTC_UNLOCK, pp[PIDX_HOUR].val);
 eer_write_byte( RTC_MIN, RTC_UNLOCK, pp[PIDX_MIN].val);
 eer_write_byte( RTC_SEC, RTC_UNLOCK, pp[PIDX_SEC].val);
 eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_RUN);
 return 1;
}


int rtc_set_clock( smp )
const struct menu_d *smp;	/* Selected Menu Pointer */
{
 int control = RTC_STOP;

 switch ( *(smp->mn_label + 2) )
 {
  case 'A': control = RTC_START;
  case 'O':
   eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_WRITE);
   eer_write_byte( RTC_SEC, RTC_UNLOCK, control);
   eer_write_byte( RTC_CONT, RTC_UNLOCK, RTC_CTL_RUN);
   rtc_chk = 0;
   break;

  case 'T':
  {
   struct parm work[NPARMS], *wp;
   const struct parm *cwp;
   int bottom = AN_VIS_ROW-2;

   bottom = st_insn(bottom,t_msg_save_ret, t_msg_next, INSTR_PAL);
   bottom = st_insn(bottom,t_msg_restore, t_msg_action, INSTR_PAL);

   wp = work;
   cwp = plist;

   do
   {
    *wp++ = *cwp++;
   } while (wp[-1].label != 0);

   rtc_get_clock(work);

   if ( utl_enter(work, rtc_cb, (struct opaque *)&work[0]) == SW_NEXT )
    rtc_put_clock(work);
  }
 }
 return 0;
}
#endif
@


1.1
log
@Initial revision
@
text
@d147 1
a147 1
  nisprintf(rtc_buf, RTC_BUF_LEN, "%s %s %02X, %02X %02X:%02X:%02X", &days[dow],
@
