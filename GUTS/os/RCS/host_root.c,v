head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	96.09.23.23.21.21;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	95.11.20.22.22.36;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	95.11.20.22.18.53;	author shepperd;	state Exp;
branches;
next	;


desc
@MIB support routine.
@


1.3
log
@Added dummy prc_q_action().
@
text
@/*
 * Copyright 1993 Atari Games
 * Unauthorized reproduction, adaptation, distribution, performance or
 * display of this computer program or the associated audiovisual work is
 * strictly prohibited.
 * 
 */
/*		host_root.c
 *	"shims" to translate common game_os subroutine calls to STDC
 *	equivalent functions.
 */
#include <os_proto.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mib_print.h>
#include <eer_defs.h>

extern unsigned int sleep(unsigned seconds);

void prc_delay(int frames)
{
    sleep(frames/60);
}

void prc_delay0() {;}

#if 0
void panic( const char *msg )
{
    fprintf(stderr,"%s\a\n",msg);
    exit (EXIT_FAILURE);
}
#endif
    
/*	 utl_cdec(num,buffer,length,format)
*
* This routine will convert the number in num to a decimal string. It
* will zero fill to the size in length. If the number is larger then
* length it will display the low order digits.
*  The format is:
*		0 = right just, zero fill
*		1 = right just, blank fill
*		2 = left just, blank fill
*		3 = left just, no fill (string is exact length needed)
*/

#define MAXLEN (11)			/* 32 bits gives 10 digits + '\0' */

extern int
utl_cdec (
    unsigned long num, /* value to convert				*/
    char	*buffer, /* where to place text				*/
    int		length,	/* Size of output field				*/
    int		format	/* RJ_ZF, et al. See os_proto.h			*/
)
{
    char tmp[MAXLEN+1];
    int slop,digits;

/* The two lines below can be changed to one, using the return value of
 * sprintf(), when SUN gets their act together, say, around 2072 :-)
 */
    sprintf(tmp,"%ld",num);		/* convert number */
    digits = strlen(tmp);		/* get number of digits */
    slop = length - digits;		/* How much space do we need to fill ?*/
    if ( slop <= 0 ) {
	/* Number won't actually fit. We mimic the old behavior by returning
	 * LSDs. This is also used when number exactly fits
	*/
	memcpy(buffer,tmp-slop,length);		/* -slop is +digits-length */
    } else switch (format) {
	case RJ_ZF:
	    memcpy(buffer+slop,tmp,digits);
	    memset(buffer,'0',slop);
	    break;
	case RJ_BF:
	    memcpy(buffer+slop,tmp,digits);
	    memset(buffer,' ',slop);
	    break;
	case LJ_BF:
	    memcpy(buffer,tmp,digits);
	    memset(buffer+digits,' ',slop);
	    break;
	case LJ_NF:
	    memcpy(buffer,tmp,digits);
	    length = digits;
    }
    buffer[length] = '\0';
    return digits;
}

void default_values() {
    fprintf(stderr,"eer_init() calls default_values()!!\a\n");
    exit(2);
}

/* following assumes 8-bit chars and max data-bus width =32 */
 
unsigned char EEPROM[EEPROM_SIZE<<STRIDE];
unsigned long UNLK_EP;
unsigned long eeprom_base;
static int writes_so_far;
#if 0
static int top_so_far;
#endif
extern int debug;
static int row,col;
 
int 
unsigned long put_byte (
    unsigned long addr,		/* address in simulated memory */
    int data		/* data for simulated memory */
)
{

    if ( !writes_so_far ) {
	eeprom_base = addr & ~((EEPROM_SIZE<<align_shift)-1);
#if 0
	top_so_far = 0;
#endif
        ++writes_so_far;
    } 

    if ( addr >= (eeprom_base+(EEPROM_SIZE<<align_shift)) ) {
#if 0
	fprintf(stderr,"Address 0x%lX is not in EEPROM (0x%lX to 0x%lX)\a\n",
	    addr, eeprom_base, eeprom_base+(EEPROM_SIZE<<align_shift)-1);
#endif
	return 0;
    }
    addr -= eeprom_base;
    if ( (addr & ((1<<align_shift)-1)) != byte_offset ) return 0;
    addr -= byte_offset;
    addr <<= STRIDE;
    addr >>= align_shift;
#if 0
    if ( addr > top_so_far ) top_so_far = addr;
#endif
    if (debug > 1) {
       fprintf(stdout, "[%4ld]=%02X ", addr, data&0xFF);
       if (++col > 4) {
	  col = 0;
	  fprintf(stdout, "\n");
          ++row;
       }
    }
    EEPROM[addr] = data & 0xFF;
    return data;
}

struct act_q *prc_q_action( struct act_q *__q_elt) {
    return 0;
}
@


1.2
log
@Fixed the two sprintfs requiring %ld instead of %d.
@
text
@d152 3
@


1.1
log
@Initial revision
@
text
@d64 1
a64 1
    sprintf(tmp,"%d",num);		/* convert number */
d141 1
a141 1
       fprintf(stdout, "[%4d]=%02X ", addr, data&0xFF);
@
