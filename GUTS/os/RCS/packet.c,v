head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	97.07.07.20.13.20;	author shepperd;	state Exp;
branches;
next	1.15;

1.15
date	97.03.15.01.55.42;	author shepperd;	state Exp;
branches;
next	1.14;

1.14
date	97.03.14.23.21.14;	author shepperd;	state Exp;
branches;
next	1.13;

1.13
date	96.10.09.20.10.43;	author shepperd;	state Exp;
branches;
next	1.12;

1.12
date	96.06.13.03.26.18;	author shepperd;	state Exp;
branches;
next	1.11;

1.11
date	96.06.06.04.20.40;	author shepperd;	state Exp;
branches;
next	1.10;

1.10
date	96.06.06.03.40.42;	author shepperd;	state Exp;
branches;
next	1.9;

1.9
date	96.04.16.03.04.23;	author shepperd;	state Exp;
branches;
next	1.8;

1.8
date	96.04.13.03.05.29;	author shepperd;	state Exp;
branches;
next	1.7;

1.7
date	96.04.10.00.04.26;	author shepperd;	state Exp;
branches;
next	1.6;

1.6
date	96.01.05.05.55.06;	author shepperd;	state Exp;
branches;
next	1.5;

1.5
date	95.12.16.00.23.59;	author shepperd;	state Exp;
branches;
next	1.4;

1.4
date	95.12.15.01.57.44;	author shepperd;	state Exp;
branches;
next	1.3;

1.3
date	95.09.26.23.16.51;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	95.08.08.22.49.35;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	95.07.21.01.38.47;	author shepperd;	state Exp;
branches;
next	;


desc
@ICELESS packet interface code.
@


1.16
log
@Changed the way HOST_BOARD is checked.
@
text
@/* $Id$ */

#include <config.h>
#include <icelesspkt.h>

#if !defined(ICELESS_BASE)
#define ICELESS_BASE (XBUS_SLOT70)
#endif

#if !defined(BOARDS)
#define BOARDS	1	/* define this to the number of boards on the system */
                        /* (setting it to 1 will optimize this code somewhat) */
#endif

#if !defined(BOARD_SHF)
# if HOST_BOARD == HCR4K
#  if ICELESS_BASE < XBUS_SLOT0 || ICELESS_BASE >= (XBUS_SLOT77 + (XBUS_SLOT77-XBUS_SLOT76))
#    define BOARD_SHF 5
#  endif
# endif
# if HOST_BOARD == MB4600
#  define BOARD_SHF 5
# endif
# if !defined(BOARD_SHF)
#  define BOARD_SHF 4
# endif
#endif

#if !defined(BOARD_ADDR0)
# define BOARD_ADDR0	((IcelessBoard *)((char *)(ICELESS_BASE) + (0<<BOARD_SHF)))
#endif
#if !defined(BOARD_ADDR1)
# define BOARD_ADDR1	((IcelessBoard *)((char *)(ICELESS_BASE) + (1<<BOARD_SHF)))
#endif
#if !defined(BOARD_ADDR2)
# define BOARD_ADDR2	((IcelessBoard *)((char *)(ICELESS_BASE) + (2<<BOARD_SHF)))
#endif
#if !defined(BOARD_ADDR3)
# define BOARD_ADDR3	((IcelessBoard *)((char *)(ICELESS_BASE) + (3<<BOARD_SHF)))
#endif

/* The following queues have an entry for each possible ICELESS board on the system. */
IcelessBoard *const xbaddrs[] = {
#if BOARDS == 1
BOARD_ADDR1			/* xbus address of each ICELESS board on this system */
#elif BOARDS == 2
BOARD_ADDR0, BOARD_ADDR1	/* xbus address of each ICELESS board on this system */
#elif BOARDS == 3
BOARD_ADDR0, BOARD_ADDR1, BOARD_ADDR2 /* xbus address of each ICELESS board on this system */
#elif BOARDS == 4
BOARD_ADDR0, BOARD_ADDR1, BOARD_ADDR2, BOARD_ADDR3
#endif
};

PktIOStruct *current[BOARDS];	/* packet we are currently looking at */
PktIOStruct *queued[BOARDS];	/* queue of packets we can get next */
PktIOStruct *ready[BOARDS];	/* queued packets complete and waiting for dispatch */

#if defined(LOG_PACKETS) && !defined(PACKET_STATS)
#define PACKET_STATS 1
#endif

#if defined(TEST_PACKETS) && !defined(PACKET_STATS)
#define PACKET_STATS 1
#endif

#if defined(DUMP_PACKETS) && !defined(PACKET_STATS)
#define PACKET_STATS 1
#endif

static volatile int busy;

#if defined(PACKET_STATS)
VU32 dropped_packets;
VU32 received_packets;
VU32 reason_bits;

#include "pktdebug.h"
static const PktDebug pkt_debug_stats = {
   	&dropped_packets, &received_packets, &reason_bits,
   	BOARDS, xbaddrs, current, ready, queued, (int*)&busy};
#endif

#if HOST_BOARD_CLASS && ((HOST_BOARD_CLASS&HOST_BOARD) == PHOENIX)
# define WMS_HOST 1
#endif

#if HOST_BOARD == LCR3K || HOST_BOARD == HCR4K || HOST_BOARD == MB4600 || WMS_HOST
# define MIPS_HOST 1
# if HOST_BOARD == HCR4K || HOST_BOARD == MB4600
#  define AGC_R4K_HOST 1
# endif
#else
# define MIPS_HOST 0
#endif

/* Forward references */
static void xbpoll(int board);	/* poll an ICELESS board */
#if MIPS_HOST 
extern int prc_get_ipl(void);
extern int prc_set_ipl(int);
#define disable_int() prc_set_ipl(prc_get_ipl()&~SR_IEC)
#define enable_int(x)  prc_set_ipl(x)
#else
unsigned int disable_int();
unsigned int enable_int(unsigned int);
#endif

#if defined(LOG_PACKETS) 
#define TRING_SIZE	(32)
#define TOSSED_SIZE	(4)

typedef struct {
   unsigned short tolen;
   unsigned char tochan;
   unsigned char tothrd;
   unsigned char wantedthrd;
   unsigned char tringindx;
   int state;
   unsigned short tring[TRING_SIZE];
   int reason;
} Tossed;

static Tossed tossed_packets[TOSSED_SIZE];

static VU16 tring[TRING_SIZE];
static VU32 tringindx;
static VU32 tossed_index;
#endif

#if (defined(DUMP_PACKETS) && defined(PACKET_STATS)) || defined(DEBUG_STUB)
extern isprintf(char *, char *, ...);
extern void write_line(char *);
extern char errmsg[];

static void show_queue(PktIOStruct *pkt, char *name) {
   int ii;
   PktIOStruct *tp = pkt;
   for (ii=0; tp; ++ii) tp = tp->next;
   isprintf(errmsg, "  pkt %s que: %d entries...", name, ii);
   write_line(errmsg);
   tp = pkt;
   while (tp) {
      isprintf(errmsg, "   thd=%d, sz=%d, ln=%d, st=%d, poll=%d",
      		tp->tothread, tp->size, tp->len, tp->state, tp->polling);
      write_line(errmsg);
      tp = tp->next;
   }
}

void pktDumpQues() {
   isprintf(errmsg, "  Dropped packets = %d", dropped_packets);
   write_line(errmsg);
   show_queue(current[0], "Current");
   show_queue(queued[0], "Queued");
   show_queue(ready[0], "Ready");
   return;
}
#endif

extern VU32 last_int_disabl;

static void ack_ints() {
    IcelessBoard *xb;
    U32 junk;
#if BOARDS > 1
    int ii;
    for (ii=0; ii < BOARDS; ++ii) {
	xb = xbaddrs[ii];
	if (xb) junk = xb->stat;	/* ack any interrupts */
    }
#else
    xb = xbaddrs[0];
    if (xb) junk = xb->stat;
#endif
}

void pktScan(int compl) {	/* scan all boards for incoming packets */
   int ii, did;
   PktIOStruct *pkt;
   PktIOStruct **ppkt;
   int orig_ps;

   orig_ps = prc_set_ipl(INTS_OFF);	/* no interrupts during this */
   if (busy) {
       ack_ints();			/* ack any Iceless interrupts to prevent deadlocks */
       prc_set_ipl(orig_ps);
       return;				/* already doing this, so just quit */
   }
   busy = 1;				/* and signal we're busy */
   prc_set_ipl(orig_ps);

   do {
      int lcl_did;
#if !MIPS_HOST
      int ps;
#endif
      did = 0;				/* assume we did nothing */
#if BOARDS != 1
      for (ii=0; ii<BOARDS; ++ii) {
	 if (xbaddrs[ii] == 0) continue;
#else
	 ii = 0;
#endif
	 xbpoll(ii);			/* poll the board */
#if !MIPS_HOST
	 ps = disable_int();		/* turn off all interrupts */
#endif
	 if (compl) do {
	    lcl_did = 0;
	    ppkt = ready+ii;
	    pkt = *ppkt;
	    while (pkt) {		/* if there's anything in the ready queue */
	       if (pkt->func) {		/* if there's a function to call, */
		  *ppkt = pkt->next;	/* pluck from the queue */
		  pkt->next = 0;	/* zap it */
#if !MIPS_HOST
		  enable_int(ps);	/* renable interrupts except ICELESS */
#endif
		  did = 1;		/* say we did something */
		  lcl_did = 1;
		  pkt->func(pkt);	/* call it with a ptr to ourself as a parameter */
#if !MIPS_HOST
   		  disable_int();	/* turn of interrupts again */
#endif
		  break;		/* look again from the beginning */
	       }
	       ppkt = &pkt->next;
	       pkt = *ppkt;		/* walk the whole ready queue */
	    }
	 } while (lcl_did);
#if !MIPS_HOST
	 enable_int(ps);		/* re-enable interrupts */
#endif
#if BOARDS != 1
      }
#endif
   } while (did);			/* stay in here as long as something happened */
   busy = 0;				/* not busy anymore */
   return;
}

int got_attention(int thrd) {		/* got an attention interrupt */
   int ii, jj = 0;
   PktIOStruct *pkt;
   PktIOStruct **ppkt;
   
   pktScan(0);				/* if not already doing so, scan for packets */

#if BOARDS != 1
   for (ii=0; ii<BOARDS; ++ii) {
      if (xbaddrs[ii] == 0) continue;
#else
      ii = 0;
#endif
      ppkt = ready+ii;
      pkt = *ppkt;
      while (pkt) {			/* if there's anything in the ready queue */
	 if (pkt->tothread == thrd) {
	    if (pkt != ready[ii]) {	/* if not already at the head of the queue */
	       *ppkt = pkt->next;	/* tell previous guy about our next */
	       pkt->next = ready[ii];	/* current head of queue becomes our next */
	       ready[ii] = pkt;		/* we become the head of the queue */
	    }
	    jj = 1;			/* say we found something for gdb */
	    break;
	 }
	 ppkt = &pkt->next;		/* remember point to our next member */
	 pkt = *ppkt;			/* goto our next */
      }
#if BOARDS != 1
      if (jj) break;
   }
#endif
#if !WMS_HOST
   if (!jj) pktScan(1);			/* call completion routines */
#endif
   return jj;
}

/**********************************************************
 * pktInit - initialize any datastructs and variables needed
 *		by the packet routines.
 * At entry:
 *	no requirements
 * At exit:
 *	variables and hardware initialized.
 */

void *pktInit_p() {
#if !defined(PACKET_STATS)
   return (void *)0;
#else
   return (void *)&pkt_debug_stats;
#endif
}

static int queRecv(int compl, PktIOStruct *pkt) {
   int ii, old_ps;
   PktIOStruct *tp;
   
   while (pkt) {
      tp = pkt->next;		/* he may have submitted a linked list of structs */
#if BOARDS != 1
      ii = pkt->board;		/* get the board we are going to use */
      if (ii < 0 || ii > 3) return -1; /* invalid parameter */
#else
      ii = 0;
#endif
      pkt->state = STATE_getmlen;	/* start out looking for the length */
      pkt->jj = pkt->kk = 0;	/* and init the temp variables */
      pkt->len = 0;		/* nothing in there yet */
      pkt->polling = 0;		/* not polling */
      old_ps = disable_int();
      pkt->next = queued[ii];	/* new one points to first guy on the queue */
      queued[ii] = pkt;		/* new one becomes the top of queue */
      enable_int(old_ps);
      pkt = tp;			/* walk to the next one (if any) */
   }

   pktScan(compl);		/* keep the stream running at all times */

   return 1;
}

/**********************************************************
 * pktQueRecv - queues a buffer for the receiver to use during
 * read and assigns the buffer to a particular process "thread".
 *
 * At entry:
 *	pkt = pointer to PktIOStruct.
 *
 *	This struct must be in RAM that will not be reused
 *	by any other process or function (i.e. _not_ on the
 *	stack). The following fields in the struct must be
 *	filled in before calling pktQueRecv:
 *		buf - pointer to receive buffer
 *		size - size of buffer in bytes
 *		board - ICELESS board index (0-3)
 *		thread - "thread" from which to accept data
 *	The reminaing fields will be filled in or used by the
 *	receive routine(s).
 * At exit:
 *	returns 1 if correctly queued.
 *	returns 0 if not queued.
 *	returns negative if invalid parameter(s)
 *
 * IMPORTANT:
 * The caller must _NOT_ change any fields in this struct (or buf)
 * after it has been registered until the pointer is returned by
 * the pktPoll() function.
 */

int pktQueRecv_p(PktIOStruct *pkt) {
   return queRecv(1, pkt);
}

int pktQueRecvq(PktIOStruct *pkt) {
   return queRecv(0, pkt);
}

static PktIOStruct *pollq(int compl, int board, int flag, int channel, int thread) {
   PktIOStruct *tp;
   PktIOStruct **tpp;
   int old_ps;

#if BOARDS != 1
   if (board < 0 || board > BOARDS) return 0;
   pktScan(compl);		/* fill all the buffers if not already doing so */
   tp = ready[board];		/* walk the chain of ready pointers */
   tpp = ready+board;
#else
   pktScan(compl);
   tp = ready[0];
   tpp = ready;
#endif
   old_ps = disable_int();
   for (;tp; tpp = &tp->next, tp = tp->next) {
      if (flag) {
	 if ((flag&PKT_CHK_CHANNEL) != 0 && tp->to != channel) continue;
	 if ((flag&PKT_CHK_THREAD)  != 0 && tp->tothread != thread) continue;
      }
      *tpp = tp->next;		/* tell previous guy about our next */
      tp->next = 0;		/* we don't have a next */
      break;
   }
   enable_int(old_ps);
   return tp;			/* nothing matching in the queue */
}

/**********************************************************
 * pktPoll - Poll the ready queue for input
 *
 * At entry:
 *	board - ICLESS board index (0-3)
 *	thread - thread for which input is expected
 *
 * At exit:
 *	returns pointer to PktIOStruct containing received
 *	data or 0 if no data ready.
 *
 *	causes a poll of the hardware.
 *
 *	If a pointer to an PktIOStruct is returned, it will be
 *	one of the pointers given to the pktQueRecv function. Once
 *	it has been returned via PktPoll, the application is
 *	free to modifiy any field or buffer contained therein.
 *
 */

PktIOStruct *pktPoll_p(int board, int flag, int channel, int thread) {
   return pollq(1, board, flag, channel, thread);
}

/**********************************************************
 * pktPollq - Poll the ready queue for input, don't call completion routines
 *
 * At entry:
 *	board - ICLESS board index (0-3)
 *	thread - thread for which input is expected
 *
 * At exit:
 *	returns pointer to PktIOStruct containing received
 *	data or 0 if no data ready.
 *
 *	causes a poll of the hardware (does not call completion routines)
 *
 *	If a pointer to an PktIOStruct is returned, it will be
 *	one of the pointers given to the pktQueRecv function. Once
 *	it has been returned via PktPoll, the application is
 *	free to modifiy any field or buffer contained therein.
 *
 */

PktIOStruct *pktPollq(int board, int flag, int channel, int thread) {
   return pollq(0, board, flag, channel, thread);
}

/**********************************************************
 * xbpoll - Poll the ICELESS board for input
 *
 * At entry:
 *	board - ICLESS board index (0-3)
 *
 * At exit:
 *	current and ready queues may have been updated
 *
 */

static void xbpoll(int board) {
   PktIOStruct *tp;
   IcelessBoard *xb;
   int ii, jj, kk, ops;
   Estate state;
   unsigned char *buf;
#if defined(SANITY_CHECK)
   int sanity;
#endif
      
#if BOARDS == 1
   board = 0;
#endif
   if ((xb = xbaddrs[board]) == 0) return; /* no board present */
   ops = disable_int();
   if ((tp=current[board]) == 0) {	/* if no current buffer to use */
      if ((tp=queued[board]) == 0) {
	 enable_int(ops);
	 return; 			/* if nothing queued, nothing to do */
      }
      current[board] = tp;		/* make the first item on the queue current */
      queued[board] = tp->next;		/* extract it from the queue */
      tp->next = 0;			/* it stands alone */
   } else if (tp->polling) {
      enable_int(ops);		/* we're already polling this one, just exit */
      return;
   }
   tp->polling = 1;		/* signal we're polling this one */
   enable_int(ops);		/* interrupts are ok from here on */
   jj = tp->jj;			/* load up the local variables with contents of struct */
   kk = tp->kk;
   state = tp->state;
   buf = tp->buf;
#if defined(SANITY_CHECK)
   for (sanity=0; (xb->stat&XSTAT_SEF) != 0 && sanity < 512; ++sanity) /* loop while the FIFO is not empty */
#else
   while ((xb->stat&XSTAT_SEF) != 0)
#endif
   {
      ii = xb->data&0xFF;	/* read the byte */
      if ((xb->stat&XSTAT_SYNC) != 0) { /* if there's no SYNC bit */
#if defined(LOG_PACKETS)
	 tring[tringindx] = ii;
	 tringindx = (tringindx+1)%TRING_SIZE;
#endif
	 if (state == STATE_getmlen) continue;	/* wait until we get a SYNC */
      } else {
trouble:
#if defined(LOG_PACKETS)
	 tring[tringindx] = ii|0x100;
	 tringindx = (tringindx+1)%TRING_SIZE;
#endif
	 if (state != STATE_getmlen) {	/* got a premature SYNC bit */
#if defined(LOG_PACKETS)
	    Tossed *toss;
	    toss = tossed_packets+tossed_index;
	    toss->tolen = tp->len;
	    toss->tochan = tp->to;
	    toss->tothrd = tp->tothread;
	    toss->state = state;
	    memcpy((char *)toss->tring, (char *)tring, sizeof(tring));
	    toss->tringindx = tringindx;
	    toss->reason = REASON_PREMSYNC;
	    tossed_index = (tossed_index+1)%TOSSED_SIZE;
#endif
#if defined(PACKET_STATS)
	    ++dropped_packets;
	    reason_bits |= REASON_PREMSYNC;	/* premature sync */
#endif
	    state = STATE_getmlen;		/* so fix it and start again */
	 }
      }
      switch (state) {		/* now go figure it out */
	 case STATE_getmlen:
            if (ii == 0xFF) continue; /* this was an EOP byte, ignore it */
	    tp->len = ii << 8;
	    ++state;
	    continue;
	 case STATE_getllen:
	    tp->len |= ii;
	    ++state;
	    continue;
	 case STATE_getto:
	    tp->to = ii;
	    ++state;
	    continue;
	 case STATE_gettothrd: {
	    if (ii != tp->tothread) {		/* if incoming packet doesn't match current */
	       PktIOStruct *qp;
   	       PktIOStruct **qpp;
	       int old_ps;
	       old_ps = disable_int();
	       qp = queued[board];		/* get pointer to first item on queue */
	       qpp = queued + board;		/* get pointer to prev's next */
	       while (qp) {
		  if (qp->tothread == ii) {	/* look for a struct that does match */
		     qp->len = tp->len;		/* move the amount we need to receive */
		     qp->to = tp->to;		/* to channel */
		     qp->polling = 1;		/* the new one is polling */
		     tp->polling = 0;		/* the current one isn't polling anymore */
		     tp->next = qp->next;	/* swap PktIOStruct's. current's next becomes new's next */
		     *qpp = tp;			/* new's previous points to current */
		     tp = qp;			/* current becomes new */
		     tp->next = 0;		/* current's next points nowhere */
                     buf = tp->buf;		/* move buf pointer */
		     break;			/* done looping */
		  }
		  qpp = &qp->next;		/* advance "previous" pointer */
		  qp = qp->next;		/* jump to next */
	       }
	       enable_int(old_ps);
	       if (qp == 0) {			/* if didn't find any */
#if defined(PACKET_STATS)
		  ++dropped_packets;		/* count the packet dropped */
	    	  reason_bits |= REASON_NOQUE;	/* no queue */
#endif
#if defined(LOG_PACKETS)
		  tossed_packets[tossed_index].state = state;
		  tossed_packets[tossed_index].tolen = tp->len;
		  tossed_packets[tossed_index].tochan = tp->to;
		  tossed_packets[tossed_index].tothrd = ii;
		  tossed_packets[tossed_index].wantedthrd = tp->tothread;
		  tossed_packets[tossed_index].reason = REASON_NOQUE;
		  memcpy((unsigned char *)tossed_packets[tossed_index].tring, (unsigned char *)tring, sizeof(tring));
		  tossed_packets[tossed_index].tringindx = tringindx;
		  tossed_index = (tossed_index+1)%TOSSED_SIZE;
#endif
   		  break;			/* reset and start again */
	       }
	       current[board] = tp;		/* we have a new current now */
	    }
	    if (tp->len > tp->size) tp->len = tp->size;	/* limit the max allowed to read */
	    ++state;
	    continue;
	 }
	 case STATE_getfrom:
	    tp->from = ii;
	    ++state;
	    continue;
	 case STATE_getfromthrd:
	    tp->frmthread = ii;
	    jj = 0;
	    kk = tp->len;
	    ++state;
	    continue;
	 case STATE_getdata: {			/* pickup user's data */
	    int tstat;
	    unsigned char *bp;
	    buf[jj++] = ii;			/* save byte */
	    tstat = xb->stat;
	    bp = buf + jj;
	    while ( (jj < kk) && (tstat&XSTAT_SEF) != 0) {
	       ii = xb->data&0xFF;		/* read the byte */
	       tstat = xb->stat;		/* get the status after reading */
	       if ((tstat&XSTAT_SYNC) == 0) {	/* a sync bit here means trouble */
		  goto trouble;
	       }
	       *bp++ = ii;			/* save the data */
	       ++jj;				/* count it */
	    }
	    if (jj < kk) continue;		/* not done */	       
	    state = STATE_send;			/* got all of it */
         }
	 case STATE_send: {
	    PktIOStruct *rdy;
   	    PktIOStruct **rdyp;
	    int old_ps;
	    old_ps = disable_int();
	    rdy = ready[board];
	    rdyp = ready+board;
	    while (rdy) {
	       rdyp = &rdy->next;
	       rdy = rdy->next;
	    }
	    *rdyp = tp;		/* stick ourselves at the end of the queue */
            tp->polling = 0;
	    current[board] = 0;	/* nothing current anymore */
	    enable_int(old_ps);
#if defined(PACKET_STATS)
	    ++received_packets;
#endif
	    return;		/* done */
	 }
	 case STATE_eatit:
	 default:
	    break;
      }
      state = STATE_getmlen;
      continue;
   }
   tp->state = state;		/* save the locals to the struct */
   tp->jj = jj;
   tp->kk = kk;
   tp->polling = 0;		/* no longer polling */
   return;			/* and finish up later */
}

/******************************************************************
 * pktQueSend - send a packet through the ICELESS board
 * At entry:
 *	pkt - pointer to PktIOStruct containing data to send
 *	flags - .ne. if to wait until the whole packet is delivered
 *		else, put the packet on a queue and return.
 *		This flag is not used at this time.
 * At exit:
 *	packet is delivered to ICELESS board.
 */
 
int pktQueSend_p(PktIOStruct *pkt, int flags) {
   unsigned char *buf;
   int amt;
   IcelessBoard *xb;
#if !defined(FLUSH_BUF)
# if AGC_R4K_HOST
   volatile unsigned long *ctl = (volatile unsigned long *)CTRL_BASE;
   unsigned long junk;
#  define FLUSH_BUF() junk = *ctl
# else
#  define FLUSH_BUF()
# endif
#endif
      
   if (pkt == 0) return -1;	/* illegal parameter */
#if BOARDS != 1
   if (pkt->board < 0 || pkt->board > BOARDS) return -1;
#else
   if (pkt->board != 0) return -1;
#endif
   if ((xb=xbaddrs[pkt->board]) == 0) return -1;
   amt = pkt->len;
   if (amt <= 0) return -1;		/* nothing to send */
   if (pkt->buf == 0) return -1;	/* nothing to send */

/* Technically, we could put the PktIOStruct pointer on a send queue at this point,
 * but since there is no "output interrupt", there isn't a way to guarantee that
 * the output will continue to run. So I cheat and use wait mode I/O here.
 */

   while ((xb->stat&XSTAT_XFF) == 0);	/* wait for room */
   xb->sync = amt>>8;			/* first byte gets a sync bit */
   FLUSH_BUF();
   while ((xb->stat&XSTAT_XFF) == 0);	/* wait for room */
   xb->data = amt;
   FLUSH_BUF();
   while ((xb->stat&XSTAT_XFF) == 0);	/* wait for room */
   xb->data = pkt->to;
   FLUSH_BUF();
   while ((xb->stat&XSTAT_XFF) == 0);	/* wait for room */
   xb->data = pkt->tothread;
   FLUSH_BUF();
   while ((xb->stat&XSTAT_XFF) == 0);	/* wait for room */
   xb->data = pkt->from;
   FLUSH_BUF();
   while ((xb->stat&XSTAT_XFF) == 0);	/* wait for room */
   xb->data = pkt->frmthread;
   FLUSH_BUF();
   buf = pkt->buf;
   while (amt > 0) {
      while ((xb->stat&XSTAT_XFF) == 0);	/* wait for room */
      xb->data = *buf++;		/* write the data */
      FLUSH_BUF();
      --amt;
   }
   while ((xb->stat&XSTAT_XFF) == 0);	/* wait for room */
   xb->sync = 0xFF;			/* follow with a EOP mark */
   FLUSH_BUF();
   return 0;				/* done */
}
@


1.15
log
@Simplified the #if's for WMS h/w.
@
text
@d1 2
d84 1
a84 2
#if HOST_BOARD == PHOENIX || HOST_BOARD == PHOENIX_AD || HOST_BOARD == SEATTLE || \
    HOST_BOARD == FLAGSTAFF || HOST_BOARD == VEGAS
@


1.14
log
@Added Seattle, Flagstaff and Vegas hosts.
@
text
@d82 1
a82 2
#if HOST_BOARD == LCR3K || HOST_BOARD == HCR4K || HOST_BOARD == MB4600 || \
    HOST_BOARD == PHOENIX || HOST_BOARD == PHOENIX_AD || HOST_BOARD == SEATTLE || \
d84 4
d274 1
a274 1
#if HOST_BOARD != PHOENIX_AD && HOST_BOARD != FLAGSTAFF
@


1.13
log
@Added pktScan and pktPollq functions.
@
text
@d82 3
a84 1
#if HOST_BOARD == LCR3K || HOST_BOARD == HCR4K || HOST_BOARD == MB4600 || HOST_BOARD == PHOENIX || HOST_BOARD == PHOENIX_AD
@


1.12
log
@Added support for PHOENIX_AD
@
text
@d172 1
a172 1
static void pktscan() {			/* scan all boards for incoming packets */
d203 1
a203 1
	 do {
d242 1
a242 1
   pktscan();				/* if not already doing so, scan for packets */
d269 3
d292 28
d349 8
a356 1
   int ii, old_ps;
d358 3
a360 3
   
   while (pkt) {
      tp = pkt->next;		/* he may have submitted a linked list of structs */
d362 4
a365 2
      ii = pkt->board;		/* get the board we are going to use */
      if (ii < 0 || ii > 3) return -1; /* invalid parameter */
d367 3
a369 1
      ii = 0;
d371 9
a379 9
      pkt->state = STATE_getmlen;	/* start out looking for the length */
      pkt->jj = pkt->kk = 0;	/* and init the temp variables */
      pkt->len = 0;		/* nothing in there yet */
      pkt->polling = 0;		/* not polling */
      old_ps = disable_int();
      pkt->next = queued[ii];	/* new one points to first guy on the queue */
      queued[ii] = pkt;		/* new one becomes the top of queue */
      enable_int(old_ps);
      pkt = tp;			/* walk to the next one (if any) */
d381 2
a382 4

   pktscan();			/* keep the stream running at all times */

   return 1;
d406 22
a427 3
   PktIOStruct *tp;
   PktIOStruct **tpp;
   int old_ps;
d429 2
a430 22
#if BOARDS != 1
   if (board < 0 || board > BOARDS) return 0;
   pktscan();			/* fill all the buffers if not already doing so */
   tp = ready[board];		/* walk the chain of ready pointers */
   tpp = ready+board;
#else
   pktscan();
   tp = ready[0];
   tpp = ready;
#endif
   old_ps = disable_int();
   for (;tp; tpp = &tp->next, tp = tp->next) {
      if (flag) {
	 if ((flag&PKT_CHK_CHANNEL) != 0 && tp->to != channel) continue;
	 if ((flag&PKT_CHK_THREAD)  != 0 && tp->tothread != thread) continue;
      }
      *tpp = tp->next;		/* tell previous guy about our next */
      tp->next = 0;		/* we don't have a next */
      break;
   }
   enable_int(old_ps);
   return tp;			/* nothing matching in the queue */
@


1.11
log
@Added support for running stub from ICELESS on XBUS on Phoenix.
@
text
@d82 1
a82 1
#if HOST_BOARD == LCR3K || HOST_BOARD == HCR4K || HOST_BOARD == MB4600 || HOST_BOARD == PHOENIX
@


1.10
log
@Added support for Phoenix board
@
text
@d617 2
a618 1
#if AGC_R4K_HOST
d621 4
a624 3
# define FLUSH_BUF junk = *ctl
#else
# define FLUSH_BUF
d645 1
a645 1
   FLUSH_BUF;
d648 1
a648 1
   FLUSH_BUF;
d651 1
a651 1
   FLUSH_BUF;
d654 1
a654 1
   FLUSH_BUF;
d657 1
a657 1
   FLUSH_BUF;
d660 1
a660 1
   FLUSH_BUF;
d665 1
a665 1
      FLUSH_BUF;
d670 1
a670 1
   FLUSH_BUF;
@


1.9
log
@Added busy checks.
Removed interrupt disable during xmit.
@
text
@d79 1
a79 1
   	BOARDS, xbaddrs, current, ready, queued, &busy};
d82 1
a82 1
#if HOST_BOARD == LCR3K || HOST_BOARD == HCR4K || HOST_BOARD == MB4600 
d85 1
a85 1
#  define R4K_HOST 1
d93 1
a93 1
#if MIPS_HOST || HOST_BOARD == PHOENIX
d157 15
d180 1
d216 1
a216 1
		  pkt->func(pkt);	/* call it with ourself */
d617 1
a617 1
#if R4K_HOST
@


1.8
log
@*** empty log message ***
@
text
@d69 1
a69 1
static int busy;
a160 1
#if MIPS_HOST
a161 1
#endif
d163 5
a167 4
   if (busy) return;			/* already doing this, so just quit */
#if MIPS_HOST
   orig_ps = prc_set_ipl(prc_get_ipl()&~(0x100<<ICELESS_LVL)); /* no ICELESS interrupts during this */
#endif
d169 1
a217 3
#if MIPS_HOST
   prc_set_ipl(orig_ps);		/* ICELESS interrups are ok now */
#endif
d226 1
a226 1
   if (!busy) pktscan();		/* if not already doing so, scan for packets */
d324 1
a324 1
   if (!busy) pktscan();	/* keep the stream running at all times */
d356 1
a356 1
   if (!busy) pktscan();	/* fill all the buffers if not already doing so */
d360 1
a360 1
   if (!busy) pktscan();
a607 3
#if MIPS_HOST
   int old_ps;
#endif
a619 8
#if MIPS_HOST
# if 1
   old_ps = prc_set_ipl(prc_get_ipl()&!SR_IEC);
# else
   old_ps = prc_set_ipl(prc_get_ipl()&~(0x100<<ICELESS_LVL));	/* disable any ICLESS interrupts */
# endif
#endif

a652 3
#if MIPS_HOST
   prc_set_ipl(old_ps);
#endif
@


1.7
log
@Added support for PHOENIX
@
text
@d2 1
a2 1
#include "icelesspkt.h"
@


1.6
log
@Put WB flushes after writes to iceless board.
@
text
@d82 1
a82 1
#if HOST_BOARD == LCR3K || HOST_BOARD == HCR4K || HOST_BOARD == MB4600
d93 1
a93 1
#if MIPS_HOST
@


1.5
log
@Protected BOARD_SHF so it could be overridden in config.mac
@
text
@d84 3
d604 7
d641 1
d644 1
d647 1
d650 1
d653 1
d656 1
d661 1
d666 1
@


1.4
log
@Added some conditionals around BOARD_ADDR and BOARD_SHF so they
can be set in config.mac
@
text
@d13 2
a14 1
#if HOST_BOARD == HCR4K
d18 7
a24 8
#endif

#if HOST_BOARD == MB4600
# define BOARD_SHF 5
#endif

#if !defined(BOARD_SHF)
# define BOARD_SHF 4
@


1.3
log
@Fixed numerous bugs. Too numerous to mention.
@
text
@d13 6
d21 3
a23 1
#else
d27 12
a38 4
#define BOARD_ADDR0	((IcelessBoard *)((char *)(ICELESS_BASE) + (0<<BOARD_SHF)))
#define BOARD_ADDR1	((IcelessBoard *)((char *)(ICELESS_BASE) + (1<<BOARD_SHF)))
#define BOARD_ADDR2	((IcelessBoard *)((char *)(ICELESS_BASE) + (2<<BOARD_SHF)))
#define BOARD_ADDR3	((IcelessBoard *)((char *)(ICELESS_BASE) + (3<<BOARD_SHF)))
@


1.2
log
@Changed how variable BOARDS is defined
@
text
@d74 6
a81 3
#if MIPS_HOST
extern int prc_get_ipl();
extern int prc_set_ipl(int);
d148 1
a148 2
   orig_ps = prc_get_ipl();		/* get current IPL */
   prc_set_ipl(orig_ps&~(0x100<<ICELESS_LVL)); /* no ICELESS interrupts during this */
a300 1
      pkt->data = pkt->buf;
d350 4
a353 2
      if ((flag&PKT_CHK_CHANNEL) != 0 && tp->to != channel) continue;
      if ((flag&PKT_CHK_THREAD)  != 0 && tp->tothread != thread) continue;
d383 3
a452 1
	    if (tp->len > tp->size) tp->len = tp->size;
d465 2
a466 2
	       qp = queued[board];
	       qpp = queued + board;
d469 2
a470 2
		     qp->len = tp->len;		/* move the data received so far */
		     qp->to = tp->to;
d472 5
a476 5
		     tp->polling = 0;		/* he isn't polling anymore */
		     tp->next = qp->next;	/* swap PktIOStruct's. our next becomes his next */
		     *qpp = tp;			/* his previous points to us */
		     tp = qp;			/* we become him */
		     tp->next = 0;		/* our next points nowhere */
d502 1
d504 1
d566 1
a566 1
   tp->polling = 0;
a569 3
extern int prc_set_ipl(int);
extern int prc_get_ipl(void);

d601 5
a605 2
   old_ps = prc_get_ipl();		/* get current ps */
   prc_set_ipl(old_ps&~(0x100<<ICELESS_LVL));	/* disable any ICLESS interrupts */
@


1.1
log
@Initial revision
@
text
@d13 5
a17 4
#define BOARD_ADDR0	((IcelessBoard *)((char *)(ICELESS_BASE) + (0<<4)))
#define BOARD_ADDR1	((IcelessBoard *)((char *)(ICELESS_BASE) + (1<<4)))
#define BOARD_ADDR2	((IcelessBoard *)((char *)(ICELESS_BASE) + (2<<4)))
#define BOARD_ADDR3	((IcelessBoard *)((char *)(ICELESS_BASE) + (3<<4)))
d19 5
d25 12
a36 1
IcelessBoard *const xbaddrs[BOARDS]={BOARD_ADDR1}; /* xbus address of each ICELESS board on this system */
@
