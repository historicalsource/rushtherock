head	1.6;
access;
symbols
	CJ_206:1.5
	CJ2_05:1.5
	CJ2_04:1.5
	CJ2_03:1.5;
locks; strict;
comment	@ * @;


1.6
date	97.07.01.22.48.44;	author albaugh;	state Exp;
branches;
next	1.5;

1.5
date	95.06.09.00.25.38;	author albaugh;	state Exp;
branches;
next	1.4;

1.4
date	95.04.25.20.29.56;	author birmingham;	state Exp;
branches;
next	1.3;

1.3
date	95.03.23.00.14.23;	author albaugh;	state Exp;
branches;
next	1.2;

1.2
date	95.03.22.21.40.18;	author birmingham;	state Exp;
branches;
next	1.1;

1.1
date	94.12.16.16.45.49;	author albaugh;	state Exp;
branches;
next	;


desc
@jaguar rectangle processing
@


1.6
log
@Added RCS ID string
@
text
@/************************************************************************
* RECTLIB.C | Rectangle Function Library | Author: Robert M. Birmingham *
* ===================================================================== *
* This module contains functions to manipulate rectangle (x,y,w,h)      *
* data structure.                                                       *
* ===================================================================== *
* Copyright 1994, Atari Games.                                          *
************************************************************************/
#ifdef FILE_ID_NAME
const char FILE_ID_NAME[] = "$Id$";
#endif
/* the MIPS version of CoJag GUTS places the contents of
 * jag_defs (Atari Corp names for Jaguar hardware) in config.h,
 * bracketed by #ifdef NEED_CORP_DEFS. This is to accomodate
 * the pre-processor hacks the MIPS assembler needs.
 * The 68K version will be changed to this scheme as time allows,
 * but for now we key on the first such definition (T2HADDR)
 * to decide whether to include a separate jag_defs.h.
 */
#define NEED_CORP_DEFS (1)
#include <config.h>
#ifndef T2HADDR
#include <jag_defs.h>
#endif
#include <os_proto.h>
#include <rectlib.h>

/*
** *****************************************
** rect_set():
** set a rectangle using the x,y,w,h passed.
** =========================================
** Usage:
**   rect_set( rectptr, x, y, w, h );
**
**   RECT rectptr:  ptr to rect to set.
**   int x:         x position to set
**   int y:         y position to set
**   int w:         width value to set
**   int h:         height value to set
**
** Returns:
**   Nothing.
** *****************************************
*/

void rect_set( RECT *rect, int x, int y, int w, int h )
{
    rect->x = x;
    rect->y = y;
    rect->w = w;
    rect->h = h;

}   /* End: rect_set() */


/*
** *********************************************
** rect_fix():
** Make sure a rectangle's X,Y specify the upper
** left corner and that the W,H are positive.
** =============================================
** Usage:
**   rect_fix( rectptr );
**
**   RECT rectptr:  ptr to rect to fix.
**
** Returns:
**   Nothing.
** *****************************************
*/
#if (0)
static void rect_fix( RECT *rect )
{
    if( rect->w < 0 )
        {
        rect->x = rect->x + rect->w;
        rect->w = -rect->w;
        }

    if( rect->h < 0 )
        {
        rect->y = rect->y + rect->h;
        rect->h = -rect->h;
        }

}   /* End: rect_fix() */
#endif

/*
** *************************************************
** rect_clip():
** Clip the extents of the first rectangle to always
** be within the extents of the second rectangle.
** =================================================
** Usage:
**   rect_clip( clip_rect, bounds_rect );
**
** Returns:
**   Nothing.
** *************************************************
*/

void rect_clip( dst_rect, clip_rect )
RECT *dst_rect;
RECT *clip_rect;
{
    int dx1, dy1, dx2, dy2;
    int cx1, cy1, cx2, cy2;

    dx1 = dst_rect->x;
    dy1 = dst_rect->y;
    dx2 = dx1 + (dst_rect->w - 1);
    dy2 = dy1 + (dst_rect->h - 1);

    cx1 = clip_rect->x;
    cy1 = clip_rect->y;
    cx2 = cx1 + (clip_rect->w - 1);
    cy2 = cy1 + (clip_rect->h - 1);

    if( dx1 < cx1 ) dx1 = cx1;
    if( dy1 < cy1 ) dy1 = cy1;
    if( dx2 > cx2 ) dx2 = cx2;
    if( dy2 > cy2 ) dy2 = cy2;

    dst_rect->x = dx1;
    dst_rect->y = dy1;
    dst_rect->w = (dx2 - dx1) + 1;
    dst_rect->h = (dy2 - dy1) + 1;

}   /* End: rect_clip() */


/*
** *********************************************
** rect_translate():
** Translate the coordinates of a rectangle
** using the specified X and Y distances.
** =============================================
** Usage:
**   rect_translate( rect, deltax, deltay );
**
**   RECT *rect:  ptr to rectangle to translate.
**   int x:       x distance to translate.
**   int y:       y distance to translate.
**
** Returns:
**   Nothing.
** *********************************************
*/

void rect_translate( RECT *rect, int deltax, int deltay )
{
    rect->x += deltax;
    rect->y += deltay;

}   /* End: rect_translate() */


/*
** ****************************************************
** rect_intersect():
** Compare the x1, y1, x2, y2 coordinates of the two
** rectangles passed to find out if they intersect.
** If the rectangles do have a common area then the
** coordinates of the second rectangle are replaced
** with those of the intersection.  If the rectangles
** did not intersect, then the coordinates of second
** rectangle will contain garbage.
** ====================================================
** Usage:
**   result = rect_intersect( rect1, rect2 );
**
**   RECT *rect1:  Pointer to rectangle #1 for compare.
**   RECT *rect2:  Pointer to rectangle #2 for compare.
**
** Returns:
**   (FALSE) : The rectangles do not intersect.
**   (TRUE)  : The rectangles intersect.
** ****************************************************
*/

#define maximum(x,y)  (((x) > (y)) ? (x) : (y))
#define minimum(x,y)  (((x) < (y)) ? (x) : (y))

int rect_intersect( RECT *rect1, RECT *rect2 )
{
    int r1x1, r1y1, r1x2, r1y2;
    int r2x1, r2y1, r2x2, r2y2;


    r1x1 = rect1->x;
    r1y1 = rect1->y;
    r1x2 = r1x1 + (rect1->w - 1);
    r1y2 = r1y1 + (rect1->h - 1);

    r2x1 = rect2->x;
    r2y1 = rect2->y;
    r2x2 = r2x1 + (rect2->w - 1);
    r2y2 = r2y1 + (rect2->h - 1);

    r2x2 = minimum( r1x2, r2x2 );
    r2y2 = minimum( r1y2, r2y2 );
    r2x1 = maximum( r2x1, r1x1 );
    r2y1 = maximum( r2y1, r1y1 );

    rect2->x = r2x1;
    rect2->y = r2y1;
    rect2->w = (r2x2 - r2x1) + 1;
    rect2->h = (r2y2 - r2y1) + 1;

    return( (r2x2 >= r2x1) && (r2y2 >= r2y1) );

}   /* End: rect_intersect() */

/*************************************************************************
* End of file: RECTLIB.C                                                 *
*************************************************************************/
@


1.5
log
@added kluge for MIPS or 68k style includes (jag_defs)
@
text
@d9 3
@


1.4
log
@deleted if'ed out code.
@
text
@d9 9
a17 1

d19 3
a22 1
#include <jag_defs.h>
@


1.3
log
@if'd out currently unused static routine rect_fix()
@
text
@d11 1
a177 5
#if 0
    r1x1 = rect1->x;
    r1y1 = rect1->y;
    r1x2 = r1x1 + (rect1->w - 1);
    r1y2 = r1y1 + (rect1->h - 1);
a178 17
    r2x1 = rect2->x;
    r2y1 = rect2->y;
    r2x2 = r2x1 + (rect2->w - 1);
    r2y2 = r2y1 + (rect2->h - 1);

    r2x2 = minimum( r1x2, r2x2 );
    r2y2 = minimum( r1y2, r2y2 );
    r2x1 = maximum( r2x1, r1x1 );
    r2y1 = maximum( r2y1, r1y1 );

    rect2->x = r2x1;
    rect2->y = r2y1;
    rect2->w = (r2x2 - r2x1) + 1;
    rect2->h = (r2y2 - r2y1) + 1;
#endif


d199 1
a199 2

    return( r2x2 >= r2x1 && r2y2 >= r2y1 );
@


1.2
log
@Added rect_intersect() for use in oblist.c to do
object clipping.
@
text
@a13 2
static void rect_fix( RECT * );

d58 2
a59 2

void rect_fix( RECT *rect )
d74 1
a74 1

@


1.1
log
@Initial revision
@
text
@d14 1
d45 15
d61 17
d146 80
@
