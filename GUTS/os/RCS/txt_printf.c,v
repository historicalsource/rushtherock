head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	97.11.18.23.16.12;	author shepperd;	state Exp;
branches;
next	1.3;

1.3
date	97.11.10.21.05.09;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	97.11.09.23.58.42;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	97.11.09.22.23.36;	author shepperd;	state Exp;
branches;
next	;


desc
@Support for an row/col printf with attributes.
@


1.4
log
@Include strlib to get proto for strtol().
@
text
@/* $Id: txt_printf.c,v 1.3 1997/11/10 21:05:09 shepperd Exp shepperd $ */

#include <config.h>
#include <os_proto.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include <nsprintf.h>

struct xypos {
    int row;
    int col;
    int attrib;
};

static int write_char(void *ptr, const char *str, int len) {
    struct xypos *xy = (struct xypos *)ptr;
    int olen = len;
    long newatt;
    char lbuff[AN_VIS_COL_MAX+1];

    if (len > 4 && str[0] == '%' && str[1] == '%') {
	char *s;
	newatt = strtol(str+2, &s, 16);
	if (s > str+2 && s-str+2 == len && s[0] == '%' && s[1] == '%') {
	    xy->attrib = newatt;
	    return 0;
	}
    }
    if (len > sizeof(lbuff)-1) len = sizeof(lbuff)-1;
    memcpy(lbuff, str, len);
    lbuff[len] = 0;
    txt_str(xy->col, xy->row, lbuff, xy->attrib);
    xy->col += txt_width(lbuff, xy->attrib);
    return olen;
}
    
int txt_printf(int col, int row, int attrib, const char *fmt, ...) {
    struct xypos xy;
    int ret;
    va_list ap;

    xy.row = row;
    xy.col = col >= 0 ? col : 0;
    xy.attrib = attrib;

    va_start(ap, fmt);
    ret = twi_vfprintf(write_char, (void *)&xy, 0, fmt, ap);
    va_end(ap);
    
    return ret;
}
@


1.3
log
@Renamed function to txt_printf from gprintf.
@
text
@d1 1
a1 1
/* $Id$ */
d6 1
@


1.2
log
@Removed references to malloc and updated column by txt_width instead of len.
@
text
@d1 1
a1 1
/* $Id: gprintf.c,v 1.1 1997/11/09 22:23:36 shepperd Exp shepperd $ */
d37 1
a37 1
int gprintf(int col, int row, int attrib, const char *fmt, ...) {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Id$ */
a4 1
#include <stdlib.h>
a12 1
    int charcnt;
d19 1
a19 1
    char lbuff[AN_VIS_COL_MAX+1], *s;
a25 1
	    xy->charcnt += len;
d29 5
a33 11
    if (len > sizeof(lbuff)-1) {
	s = malloc(len+1);
	if (!s) return 0;
    } else {
	s = lbuff;
    }
    memcpy(s, str, len);
    s[len] = 0;
    txt_str(xy->col, xy->row, s, xy->attrib);
    xy->col += len;
    if (s != lbuff) free(s);
a44 1
    xy.charcnt = 0;
d50 1
a50 1
    return ret - xy.charcnt;	/* compensate for attribute change strings */
@
