head	1.4;
access;
symbols
	AREA_52_00:1.4;
locks; strict;
comment	@ * @;


1.4
date	97.07.17.17.41.59;	author shepperd;	state Exp;
branches;
next	1.3;

1.3
date	97.07.17.02.55.29;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	97.07.11.00.37.53;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	97.05.30.17.07.48;	author shepperd;	state Exp;
branches;
next	;


desc
@Chameleon support file
@


1.4
log
@Added prototypes for gun_draw_crosshairs() and
gun_crosshair_q().
@
text
@/*
 * $Id: cham_gun.h,v 1.3 1997/07/17 02:55:29 shepperd Exp shepperd $
 *
 *		Copyright 1997 Atari Games, Time Warner Interactive.
 *	Unauthorized reproduction, adaptation, distribution, performance or 
 *	display of this computer program or the associated audiovisual work
 *	is strictly prohibited.
 *
 *	This file contains the "linkage" information needed to use
 *	the WMS light-gun chip software. Details of implementation
 *	can be found in the file cham_gun.c, an example implementation for
 *	the Chameleon system.
 */

#if GUN_CNT && !defined(_CHAM_GUN_H_)
# define _CHAM_GUN_H_

/* When packed into the return value from ctl_rd_gun(), the following shifts
 * are used
 */
#define GUN_VERT_SHF (0)	/* Vertical posn in D0..9 */
#define GUN_HORZ_SHF (10)	/* Horizontal posn in D10..21 */
#define GUN_STAT_SHF (22)	/* Status bits in D22..31 */

/*	Appropriate masks for the H and V positions (right-justified)
 */
#define GUN_VERT_MASK (0x3FF)
#define GUN_HORZ_MASK (0xFFF)

/*	Location of the relevant "status" bits within the status field.
 *	That is, the RELOAD switch (if present) is tested by:
 *	gun_val & (1<<(GUN_STAT_SHF+B_RELOAD));
 */
#define B_GUN_TRIG	(0)
#define B_RELOAD	(1)
#define B_NEW_VAL	(2)
#define B_SPARE_1	(3)
#define B_SPARE_2	(4)
#define B_SHOOTING	(5)
#define B_SHOT		(6)
#define B_RELOADED	(7)
#define B_NEWSTYLE	(8)
#if GUN_STAT_SHF+B_NEWSTYLE > 31
# error * Too many bits in the status field
#endif

/*		gun_get_stat()
 *	Called by selftest to get the current status of the trigger
 *	switches. Not expected to be used by game or other code.
 */
extern int gun_get_stat(int which);

/*		gun_vb()
 *	Called during Vertical blanking, reads the gun chip and stores the
 *	result for reading at any time. Returns != 0 if the caller
 *	should flash the screen white (to aid in location the gun) for
 *	the duration of the next frame.
 */
extern int gun_vb();

/*		ctl_rd_gun(which)
 *	Returns the current state of the gun designated by <which>
 *	valid values for <which> range from 0 to (GUN_CNT-1). The
 *	correspondance between gun index and physical gun location
 *	is beyond the scope of this document :-)
 *
 *	Return value is a 32-bit integer packed per the GUN_*_SHF
 *	definitions above. That is, to get the horizontal coordinate
 *	of the first gun, use:
 *
 *	U32 val = ctl_rd_gun(0);
 *	m_uint hpos = (val >> GUN_HORZ_SHF)&GUN_HORZ_MASK;
 */
extern U32 ctl_rd_gun(int which);

/*		gun_init()
 *	resets the correction factors from EEPROM, and initializes
 *	miscellaneous gun state. Currently returns GUN_CNT, but may
 *	in the future return may depend on results of "mini-diagnostic".
 *	In that case, a return of 0 will mean "No guns connected"
 *	and negative numbers will signal hardware errors. The game
 *	programmer should never need to call this, as it _should_
 *	be called as part of normal GUTS start-up, but calling it
 *	should be harmless.
 */
extern int gun_init();

/*		gun_retrigger(which)
 *	resets the trigger status on the gun selected by <which>,
 *	so that it will re-trigger if the actual trigger is still
 *	held.
 */
extern void gun_retrigger(int which);

/*		gun_draw_crosshairs(void)
 *	function that will draw queued up crosshairs after all the
 *	text has been written to the screen (so crosshairs appear
 *	over text).
 */
extern void gun_draw_crosshairs(void);

/*		gun_crosshair_q(int x, int y, int pal)
 *	function that will queue up a crosshair to be drawn later.
 */
extern void gun_crosshair_q(int x, int y, int pal);

#if 0		/* Not yet implimented */
/*		gun_flash_mode(which)
 *	Sets the flash mode to one of GUN_FLASH_GAMMA or
 *	GUN_FLASH_SWAP. Returns the previous flash mode.
 *	Gamma mode floods the gamma ram with all WHITE so
 *	the flash field is displayed all white regardless
 *	of which buffer is being displayed. The swap mode
 *	inserts a bufferswap, clearbuffer, bufferswap into
 *	the render stream making some educated guess as to
 *	when the white screen actually is displayed (some
 *	number of fields later) so the gun data can be
 *	grabbed at that point.
 */
extern int gun_flash_mode(int which);
#define GUN_FLASH_GAMMA	0
#define GUN_FLASH_SWAP  1
#endif

#endif		/* _CHAM_GUN_H_ */
@


1.3
log
@Added prototype for gun_get_stat() for swt_test.
@
text
@d2 1
a2 1
 * $Id: cham_gun.h,v 1.2 1997/07/11 00:37:53 shepperd Exp $
d94 12
@


1.2
log
@Added $Id$.
@
text
@d2 1
a2 1
 * $Id$
d46 6
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 *	cham_gun.h
d88 18
@
