head	1.1;
access;
symbols
	AREA_52_00:1.1;
locks; strict;
comment	@;; @;


1.1
date	97.05.17.01.51.02;	author shepperd;	state Exp;
branches;
next	;


desc
@Generic PCI definitions.
@


1.1
log
@Initial revision
@
text
@.if not_defined,_PCIREG_MAC_
_PCIREG_MAC_ == 0
;
;/*	$NetBSD: pcireg.h,v 1.4 1995/07/27 00:29:02 mycroft Exp $	*/
;
;/*
; * Copyright (c) 1995 Nigel Stephens.  All rights reserved.
; * Copyright (c) 1995 Christopher G. Demetriou.  All rights reserved.
; * Copyright (c) 1994 Charles Hannum.  All rights reserved.
; *
; * Redistribution and use in source and binary forms, with or without
; * modification, are permitted provided that the following conditions
; * are met:
; * 1. Redistributions of source code must retain the above copyright
; *    notice, this list of conditions and the following disclaimer.
; * 2. Redistributions in binary form must reproduce the above copyright
; *    notice, this list of conditions and the following disclaimer in the
; *    documentation and/or other materials provided with the distribution.
; * 3. All advertising materials mentioning features or use of this software
; *    must display the following acknowledgement:
; *	This product includes software developed by Charles Hannum.
; * 4. The name of the author may not be used to endorse or promote products
; *    derived from this software without specific prior written permission.
; *
; * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
; * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
; * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
; * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
; * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
; * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
; * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; */
;
;/*
; * Standardized PCI configuration information
; *
; * XXX This is not complete.
; */
;
;/*
; * Device identification register; contains a vendor ID and a device ID.
; */
	HEX_CONST	PCI_ID_REG			0x00
;
	HEX_CONST	PCI_VENDOR_SHIFT		0
	HEX_CONST	PCI_VENDOR_MASK			0xffff
;
	HEX_CONST	PCI_PRODUCT_SHIFT		16
	HEX_CONST	PCI_PRODUCT_MASK		0xffff
;
;/*
; * Command and status register.
; */
	HEX_CONST	PCI_COMMAND_STATUS_REG		0x04
;
	HEX_CONST	PCI_COMMAND_IO_ENABLE		0x00000001
	HEX_CONST	PCI_COMMAND_MEM_ENABLE		0x00000002
	HEX_CONST	PCI_COMMAND_MASTER_ENABLE	0x00000004
	HEX_CONST	PCI_COMMAND_SPECIAL_ENABLE	0x00000008
	HEX_CONST	PCI_COMMAND_INVALIDATE_ENABLE	0x00000010
	HEX_CONST	PCI_COMMAND_PALETTE_ENABLE	0x00000020
	HEX_CONST	PCI_COMMAND_PARITY_ENABLE	0x00000040
	HEX_CONST	PCI_COMMAND_STEPPING_ENABLE	0x00000080
	HEX_CONST	PCI_COMMAND_SERR_ENABLE		0x00000100
	HEX_CONST	PCI_COMMAND_BACKTOBACK_ENABLE	0x00000200
;
	HEX_CONST	PCI_STATUS_66MHZ_OKAY		0x00200000
	HEX_CONST	PCI_STATUS_UDF_SUPPORTED	0x00400000
	HEX_CONST	PCI_STATUS_BACKTOBACK_OKAY	0x00800000
	HEX_CONST	PCI_STATUS_PARITY_ERROR		0x01000000
	HEX_CONST	PCI_STATUS_DEVSEL_FAST		0x00000000
	HEX_CONST	PCI_STATUS_DEVSEL_MEDIUM	0x02000000
	HEX_CONST	PCI_STATUS_DEVSEL_SLOW		0x04000000
	HEX_CONST	PCI_STATUS_DEVSEL_MASK		0x06000000
	HEX_CONST	PCI_STATUS_DEVSEL_SHIFT		25
	HEX_CONST	PCI_STATUS_TARGET_TARGET_ABORT	0x08000000
	HEX_CONST	PCI_STATUS_MASTER_TARGET_ABORT	0x10000000
	HEX_CONST	PCI_STATUS_MASTER_ABORT		0x20000000
	HEX_CONST	PCI_STATUS_SPECIAL_ERROR	0x40000000
	HEX_CONST	PCI_STATUS_PARITY_DETECT	0x80000000
;
;/*
; * PCI Class and Revision Register; defines type and revision of device.
; */
	HEX_CONST	PCI_CLASS_REG			0x08
;
	HEX_CONST	PCI_CLASS_SHIFT			24
	HEX_CONST	PCI_CLASS_MASK			0xff
;
	HEX_CONST	PCI_SUBCLASS_SHIFT		16
	HEX_CONST	PCI_SUBCLASS_MASK		0xff
;
	HEX_CONST	PCI_INTERFACE_SHIFT		8
	HEX_CONST	PCI_INTERFACE_MASK		0xff
;
	HEX_CONST	PCI_REVISION_SHIFT		0
	HEX_CONST	PCI_REVISION_MASK		0xff
;
;/* base classes */
	HEX_CONST	PCI_CLASS_PREHISTORIC		0x00
	HEX_CONST	PCI_CLASS_MASS_STORAGE		0x01
	HEX_CONST	PCI_CLASS_NETWORK		0x02
	HEX_CONST	PCI_CLASS_DISPLAY		0x03
	HEX_CONST	PCI_CLASS_MULTIMEDIA		0x04
	HEX_CONST	PCI_CLASS_MEMORY		0x05
	HEX_CONST	PCI_CLASS_BRIDGE		0x06
	HEX_CONST	PCI_CLASS_COMMUNICATION		0x07
	HEX_CONST	PCI_CLASS_PERIPHERAL		0x08
	HEX_CONST	PCI_CLASS_INPUT			0x09
	HEX_CONST	PCI_CLASS_DOCKING		0x0a
	HEX_CONST	PCI_CLASS_PROCESSOR		0x0b
	HEX_CONST	PCI_CLASS_SERIALBUS		0x0c
	HEX_CONST	PCI_CLASS_UNDEFINED		0xff
;
;/* 0x00 prehistoric subclasses */
	HEX_CONST	PCI_SUBCLASS_PREHISTORIC_MISC	0x00
	HEX_CONST	PCI_SUBCLASS_PREHISTORIC_VGA	0x01
;
;/* 0x01 mass storage subclasses */
	HEX_CONST	PCI_SUBCLASS_MASS_STORAGE_SCSI	0x00
	HEX_CONST	PCI_SUBCLASS_MASS_STORAGE_IDE	0x01
	HEX_CONST	PCI_SUBCLASS_MASS_STORAGE_FLOPPY 0x02
	HEX_CONST	PCI_SUBCLASS_MASS_STORAGE_IPI	0x03
	HEX_CONST	PCI_SUBCLASS_MASS_STORAGE_RAID	0x04
	HEX_CONST	PCI_SUBCLASS_MASS_STORAGE_MISC	0x80
;
;/* 0x02 network subclasses */
	HEX_CONST	PCI_SUBCLASS_NETWORK_ETHERNET	0x00
	HEX_CONST	PCI_SUBCLASS_NETWORK_TOKENRING	0x01
	HEX_CONST	PCI_SUBCLASS_NETWORK_FDDI	0x02
	HEX_CONST	PCI_SUBCLASS_NETWORK_ATM	0x03
	HEX_CONST	PCI_SUBCLASS_NETWORK_MISC	0x80
;
;/* 0x03 display subclasses */
	HEX_CONST	PCI_SUBCLASS_DISPLAY_VGA	0x00
	HEX_CONST	PCI_SUBCLASS_DISPLAY_XGA	0x01
	HEX_CONST	PCI_SUBCLASS_DISPLAY_MISC	0x80
;
;/* 0x04 multimedia subclasses */
	HEX_CONST	PCI_SUBCLASS_MULTIMEDIA_VIDEO	0x00
	HEX_CONST	PCI_SUBCLASS_MULTIMEDIA_AUDIO	0x01
	HEX_CONST	PCI_SUBCLASS_MULTIMEDIA_MISC	0x80
;
;/* 0x05 memory subclasses */
	HEX_CONST	PCI_SUBCLASS_MEMORY_RAM		0x00
	HEX_CONST	PCI_SUBCLASS_MEMORY_FLASH	0x01
	HEX_CONST	PCI_SUBCLASS_MEMORY_MISC	0x80
;
;/* 0x06 bridge subclasses */
	HEX_CONST	PCI_SUBCLASS_BRIDGE_HOST	0x00
	HEX_CONST	PCI_SUBCLASS_BRIDGE_ISA		0x01
	HEX_CONST	PCI_SUBCLASS_BRIDGE_EISA	0x02
	HEX_CONST	PCI_SUBCLASS_BRIDGE_MC		0x03
	HEX_CONST	PCI_SUBCLASS_BRIDGE_PCI		0x04
	HEX_CONST	PCI_SUBCLASS_BRIDGE_PCMCIA	0x05
	HEX_CONST	PCI_SUBCLASS_BRIDGE_NUBUS	0x06
	HEX_CONST	PCI_SUBCLASS_BRIDGE_CARDBUS	0x07
	HEX_CONST	PCI_SUBCLASS_BRIDGE_MISC	0x80
;
;/* 0x07 communication subclasses */
	HEX_CONST	PCI_SUBCLASS_COMMUNICATION_SERIAL	0x00
	HEX_CONST	PCI_SUBCLASS_COMMUNICATION_PARALLEL	0x01
	HEX_CONST	PCI_SUBCLASS_COMMUNICATION_MISC		0x80
;
;/* 0x08 peripheral subclasses */
	HEX_CONST PCI_SUBCLASS_PERIPHERAL_PIC		0x00
	HEX_CONST PCI_SUBCLASS_PERIPHERAL_DMA		0x01
	HEX_CONST PCI_SUBCLASS_PERIPHERAL_TIMER		0x02
	HEX_CONST PCI_SUBCLASS_PERIPHERAL_RTC		0x03
	HEX_CONST PCI_SUBCLASS_PERIPHERAL_MISC		0x80
;
;/* 0x09 input subclasses */
	HEX_CONST PCI_SUBCLASS_INPUT_KEYBOARD		0x00
	HEX_CONST PCI_SUBCLASS_INPUT_DIGITISER		0x01
	HEX_CONST PCI_SUBCLASS_INPUT_MOUSE		0x02
	HEX_CONST PCI_SUBCLASS_INPUT_MISC		0x80
;
;/* 0x0a docking subclasses */
	HEX_CONST PCI_SUBCLASS_DOCKING_GENERIC		0x00
	HEX_CONST PCI_SUBCLASS_DOCKING_MISC		0x80
;
;/* 0x0b processor subclases */
	HEX_CONST PCI_SUBCLASS_PROCESSOR_386		0x00
	HEX_CONST PCI_SUBCLASS_PROCESSOR_486		0x01
	HEX_CONST PCI_SUBCLASS_PROCESSOR_PENTIUM	0x02
	HEX_CONST PCI_SUBCLASS_PROCESSOR_ALPHA		0x10
	HEX_CONST PCI_SUBCLASS_PROCESSOR_POWERPC	0x20
	HEX_CONST PCI_SUBCLASS_PROCESSOR_COPROCESSOR	0x40
;
;/* 0x0c serial bus subclasses */
	HEX_CONST PCI_SUBCLASS_SERIALBUS_FIREWIRE	0x00
	HEX_CONST PCI_SUBCLASS_SERIALBUS_ACCESSS	0x00
	HEX_CONST PCI_SUBCLASS_SERIALBUS_SSA		0x00
	HEX_CONST PCI_SUBCLASS_SERIALBUS_USB		0x00
	HEX_CONST PCI_SUBCLASS_SERIALBUS_FIBRECHANNEL	0x00
;
	HEX_CONST	PCI_MISC_REG			0x0c
;
	HEX_CONST	PCI_MISC_HDRTYPE_SHIFT		16
	HEX_CONST	PCI_MISC_HDRTYPE_MASK		0xff
;
	HEX_CONST	PCI_MISC_LTIM_SHIFT		8
	HEX_CONST	PCI_MISC_LTIM_MASK		0xff
;
	HEX_CONST	PCI_MISC_CLSZ_SHIFT		0
	HEX_CONST	PCI_MISC_CLSZ_MASK		0xff
;
;/*
; * Mapping registers
; */
	HEX_CONST	PCI_MAP_REG_START		0x10
	HEX_CONST	PCI_MAP_REG_END			0x28
;
	HEX_CONST	PCI_MAP_MEMORY			0x00000000
;
	HEX_CONST	PCI_MAP_MEMORY_TYPE_32BIT	0x00000000
	HEX_CONST	PCI_MAP_MEMORY_TYPE_32BIT_1M	0x00000002
	HEX_CONST	PCI_MAP_MEMORY_TYPE_64BIT	0x00000004
	HEX_CONST	PCI_MAP_MEMORY_TYPE_MASK	0x00000006
	HEX_CONST	PCI_MAP_MEMORY_CACHABLE		0x00000008
	HEX_CONST	PCI_MAP_MEMORY_PREFETCHABLE	0x00000008
	HEX_CONST	PCI_MAP_MEMORY_ADDRESS_MASK	0xfffffff0
;
	HEX_CONST	PCI_MAP_IO			0x00000001
;
	HEX_CONST	PCI_MAP_IO_ADDRESS_MASK		0xfffffffc
;
;/*
; * Interrupt Configuration Register; contains interrupt pin and line.
; */
	HEX_CONST	PCI_INTERRUPT_REG		0x3c
	HEX_CONST	PCI_BPARAM_REG 			0x3c
;
	HEX_CONST	PCI_INTERRUPT_PIN_SHIFT		8
	HEX_CONST	PCI_INTERRUPT_PIN_MASK		0xff
;
	HEX_CONST	PCI_INTERRUPT_LINE_SHIFT	0
	HEX_CONST	PCI_INTERRUPT_LINE_MASK		0xff
;
	HEX_CONST	PCI_INTERRUPT_PIN_NONE		0x00
	HEX_CONST	PCI_INTERRUPT_PIN_A		0x01
	HEX_CONST	PCI_INTERRUPT_PIN_B		0x02
	HEX_CONST	PCI_INTERRUPT_PIN_C		0x03
	HEX_CONST	PCI_INTERRUPT_PIN_D		0x04
;
	HEX_CONST	PCI_BPARAM_MAX_LAT_SHIFT	24
	HEX_CONST	PCI_BPARAM_MAX_LAT_MASK		0xff
;
	HEX_CONST	PCI_BPARAM_MIN_GNT_SHIFT	16
	HEX_CONST	PCI_BPARAM_MIN_GNT_MASK		0xff
;
 .if true, OUTPUT_LANG == LANG_C
typedef unsigned short pci_vendor_id_t;
typedef unsigned short pci_product_id_t;
typedef unsigned char pci_class_t;
typedef unsigned char pci_subclass_t;
typedef unsigned char pci_interface_t;
typedef unsigned char pci_revision_t;
typedef unsigned char pci_intr_pin_t;
typedef unsigned char pci_intr_line_t;

#define	PCI_VENDOR(id) \
	    (((id) >> PCI_VENDOR_SHIFT) & PCI_VENDOR_MASK)
#define	PCI_PRODUCT(id) \
	    (((id) >> PCI_PRODUCT_SHIFT) & PCI_PRODUCT_MASK)
#define	PCI_CLASS(cr) \
	    (((cr) >> PCI_CLASS_SHIFT) & PCI_CLASS_MASK)
#define	PCI_SUBCLASS(cr) \
	    (((cr) >> PCI_SUBCLASS_SHIFT) & PCI_SUBCLASS_MASK)
#define	PCI_INTERFACE(cr) \
	    (((cr) >> PCI_INTERFACE_SHIFT) & PCI_INTERFACE_MASK)
#define	PCI_REVISION(cr) \
	    (((cr) >> PCI_REVISION_SHIFT) & PCI_REVISION_MASK)
#define	PCI_MISC_HDRTYPE(mr) \
	    (((mr) >> PCI_MISC_HDRTYPE_SHIFT) & PCI_MISC_HDRTYPE_MASK)
#define	PCI_MISC_LTIM(mr) \
	    (((mr) >> PCI_MISC_LTIM_SHIFT) & PCI_MISC_LTIM_MASK)
#define	PCI_MISC_LTIM_SET(mr,v) \
	    (mr) = ((mr) & ~(PCI_MISC_LTIM_MASK << PCI_MISC_LTIM_SHIFT)) | \
		((v) << PCI_MISC_LTIM_SHIFT)
#define	PCI_MISC_CLSZ(mr) \
	    (((mr) >> PCI_MISC_CLSZ_SHIFT) & PCI_MISC_CLSZ_MASK) 
#define	PCI_MISC_CLSZ_SET(mr,v) \
	    (mr) = ((mr) & ~(PCI_MISC_CLSZ_MASK << PCI_MISC_CLSZ_SHIFT)) | \
		((v) << PCI_MISC_CLSZ_SHIFT)
#define	PCI_INTERRUPT_PIN(icr) \
	    (((icr) >> PCI_INTERRUPT_PIN_SHIFT) & PCI_INTERRUPT_PIN_MASK)
#define	PCI_INTERRUPT_LINE(icr) \
	    (((icr) >> PCI_INTERRUPT_LINE_SHIFT) & PCI_INTERRUPT_LINE_MASK)
#define	PCI_BPARAM_MAX_LAT(bp) \
	    (((bp) >> PCI_BPARAM_MAX_LAT_SHIFT) & PCI_BPARAM_MAX_LAT_MASK)
#define	PCI_BPARAM_MIN_GNT(bp) \
	    (((bp) >> PCI_BPARAM_MIN_GNT_SHIFT) & PCI_BPARAM_MIN_GNT_MASK)
 .endc
.endc
@
