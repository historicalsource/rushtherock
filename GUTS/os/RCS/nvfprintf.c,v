head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	97.11.09.22.57.52;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	97.11.09.22.24.36;	author shepperd;	state Exp;
branches;
next	;


desc
@Support for [gfspn]printf functions.
@


1.2
log
@Made '%a' be ignored in nsprintf.
@
text
@#define	to_char(n)	((n) + '0')
#define	to_digit(c)	((c) - '0')

/*
 * doprint.c
 * Original Author:	G. Haley
 */

#if NO_FLOATING_POINT
#undef INTEGER_ONLY
#define INTEGER_ONLY 1
#endif

#include <_ansi.h>
#include <stdio.h>
#include <string.h>
#include <reent.h>
#include <stdarg.h>
#include <stddef.h>

#define UNSET -1

#define FPERCENT 0x01
#define FMINUS   0x02
#define FPLUS    0x04
#define FSPACE   0x08
#define FHASH    0x10
#define FDOT     0x20
#define FZERO    0x40
#define FSHORT   0x80
#define FLONG    0x100
#define FDLONG   0x200
#define FATTRIB	 0x400

#ifndef CVT_BUF_SIZE
# define CVT_BUF_SIZE 128
#endif

extern char *_dcvt(struct _reent *, char *, double, int, int, char, int);
extern char *_sicvt(char *, short, char);
extern char *_icvt(char *, int, char);
extern char *_licvt(char *, long, char);
extern char *_gcvt(struct _reent *, double , int , char *, char, int);

#ifdef __GNUC__
extern char *_llicvt(char *, long long, char);
#endif

#if !INTEGER_ONLY
# ifndef MAXFRACT
#  if CVT_BUF_SIZE < 39
#   define MAXFRACT	(CVT_BUF_SIZE-5)
#  else
#   define MAXFRACT        39
#  endif
# endif
#endif

#define FP_TYPE char
#define NAME nvfprintf

#define	OS_PRINT(ptr, len) do { \
	if (ortn) { \
	    if (ortn((void *)fp, ptr, len) < 0) return -1; \
            count += len; \
        } else { \
	    int tlen = len; \
	    if (count >= maxlen) return count;	/* off the end of the user buffer */ \
	    if (tlen > maxlen-count) tlen = maxlen-count; \
	    memcpy(fp, ptr, tlen); \
	    fp += tlen; \
	    count += tlen; \
	} \
} while (0)
	
static int 
out_string (char *s, int n_chars, int flags, int n_zero, int n_pad,
            char *prefix, int (*ortn)(void *, const char *, int), char *fp, int maxlen) {
  int i, pl=0, count=0;
  if ((flags&FATTRIB)) {
    if (ortn) {
	char lbuff[CVT_BUF_SIZE], *lb = lbuff;
	*lb++ = '%';
	*lb++ = '%';
	memcpy(lb, s, n_chars);
	lb += n_chars;
	*lb++ = '%';
	*lb++ = '%';
	*lb = 0;
	if (ortn((void *)fp, lbuff, lb-lbuff) < 0) return -1;
    }
    return 0;
  }
  if (prefix) pl = strlen(prefix);
  if (n_pad && !(flags & FMINUS)) {
      if (prefix && (flags & FZERO)) OS_PRINT(prefix, pl);
      for (i = 0; i < n_pad; i++) {
	  if (flags & FZERO) {
	     OS_PRINT("0", 1);
	  } else {
             OS_PRINT(" ", 1);
	  }
      }      
      if (prefix && !(flags & FZERO)) OS_PRINT(prefix, pl);
  } else if (prefix) {
    OS_PRINT(prefix, pl);
  }

  for (i = 0; i < n_zero; i++) OS_PRINT("0", 1);
  OS_PRINT(s, n_chars);

  if (n_pad && (flags & FMINUS)) {
      for (i = 0; i < n_pad; i++) OS_PRINT(" ", 1);
  }
  return count;
}

int twi_vfprintf(int (*ortn)(void *, const char *, int), FP_TYPE *fp, int maxlen, const char *format, va_list args) {
  char buffer[CVT_BUF_SIZE];
  int count = 0;
  int flags = 0;
  int field_width = 0;
  int precision = UNSET;
  int *ip;
  long int i=0;
  char *s;
  char c;
  int sign;
#ifdef __GNUC__
  long long int ll=0;
#endif

  char f_type, *prefix, *fld;
  int n_chars, n_zero, n_pad;

  if (!ortn) --maxlen;			/* leave room for trailing null */
  for (; ortn || (count < maxlen);) {
      if (!flags) {
	  const char *b;
	  int tlen;
	  b = format;
          while (*b && *b != '%') ++b;
          tlen = b-format;
	  if (tlen) {
	      if (ortn) {
		  if (ortn((void *)fp, format, tlen) < 0) return -1;
	      } else {
		  if (tlen > maxlen-count) tlen = maxlen-count;
		  memcpy(fp, format, tlen);
		  fp += tlen;
		  format += tlen;
		  count += tlen;
	      }
          }
          if (!*b) break;
          format = b;
	  flags |= FPERCENT;
	  format++;
      }

      switch (*format++) {
	case '-':
	  flags |= FMINUS;
	  break;
	case '+':
	  flags |= FPLUS;
	  break;
	case ' ':
	  flags |= FSPACE;
	  break;
	case '#':
	  flags |= FHASH;
	  break;

	case '.':
	  flags |= FDOT;
	  precision = 0;
	  break;
	case '0':
	  if (field_width == 0 && !(flags & FDOT))
	    {
	      flags |= FZERO;
	      break;
	    }
	  /* fall through */
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	  if (flags & FDOT)
	    precision = precision * 10 +
	      *(format - 1) - '0';
	  else
	    field_width = field_width * 10 +
	      *(format - 1) - '0';
	  break;
	case '*':
	  if (flags & FDOT)
	    precision = va_arg (args, int);
	  else
	    {
	      if ((field_width = va_arg (args, int)) < 0)
		{
		  flags |= FMINUS;
		  field_width = -field_width;
		}
	    }
	  break;

	case 'h':
	  flags |= FSHORT;
	  break;
	case 'l':
	  flags |= FLONG;
	  break;
	case 'L':
	  flags |= FDLONG;
	  break;

	case 'a':
	  flags |= FATTRIB;
	case 'd':
	case 'i':
	case 'u':
	case 'o':
	case 'x':
	case 'X':
	  /* Newlib must be compilable by compilers other than gcc, and
	     making `i' long long would simplify a lot of the following,
	     but it would unnecessarily slow things down.  So instead we
	     only use long long values when we absolutely have to.  Some
	     targets have options to set the sizes of the various ints, but
	     that won't bother us.
	     `sign' records the signed-ness of the value so we don't have
	     any more conditional compilation than we need.  */
#ifdef __GNUC__
	  if (flags & FDLONG)
	    {
	      ll = va_arg (args, long long);
	      sign = (ll > 0) - (ll < 0);
	    }
	  else
#endif
	    {
	      if (flags & (FLONG + FDLONG))
		i = va_arg (args, long);
	      else
		i = va_arg (args, int);
	      sign = (i > 0) - (i < 0);
	    }

	  /* If precision is specified, 0 flag is ignored */
	  if (precision != UNSET)
	    flags &= ~FZERO;

	  if (precision == UNSET)
	    precision = 1;

	  f_type = *(format - 1);
	  if (f_type == 'a') f_type = 'x';	/* attribute it the same as hex */

	  if (precision || sign)
	    {
	      if (flags & FSHORT)
		fld = _sicvt (buffer, (short) i, f_type);
#ifdef __GNUC__
	      else if (flags & FDLONG)
		fld = _llicvt (buffer, (long long) ll, f_type);
#endif
#if LONG_MAX != INT_MAX
	      else if (flags & (FLONG + FDLONG))
		fld = _licvt (buffer, (long) i, f_type);
#endif
	      else
		fld = _icvt (buffer, (int) i, f_type);
	    }
	  else
	    {
	      /* zero precision && zero value */

	      /* reset flags, ... etc */
	      flags = 0;
	      field_width = 0;
	      precision = UNSET;

	      break;
	    }

	  n_chars = (fld ? strlen (fld) : 0);

	  n_zero = 0;
	  if (precision > n_chars)
	    n_zero = precision - n_chars;

	  n_pad = 0;
	  if (field_width > n_chars + n_zero)
	    n_pad = field_width - n_chars - n_zero;

	  if (f_type == 'd' || f_type == 'i')
	    {
	      if (sign < 0)
		prefix = "-";
	      else if (flags & FPLUS)
		prefix = "+";
	      else if (flags & FSPACE)
		prefix = " ";
	      else
		prefix = NULL;
	    }
	  else if (flags & FHASH)
	    {
	      if (f_type == 'o')
		prefix = "0";
	      else if (f_type == 'x')
		prefix = "0x";
	      else if (f_type == 'X')
		prefix = "0X";
	      else
		prefix = NULL;
	    }
	  else
	    prefix = NULL;

	  if (n_pad && prefix)
	    n_pad -= strlen (prefix);

	  if ((n_chars = out_string (fld, n_chars, flags,
				     n_zero, n_pad, prefix, ortn, fp, maxlen-count)) < 0) return -1;
	  if (!ortn) fp += n_chars;
          count += n_chars;

	  /* reset flags, ... etc */
	  flags = 0;
	  field_width = 0;
	  precision = UNSET;
	  break;

#if !INTEGER_ONLY
	case 'F':
	case 'f':
	case 'e':
	case 'E':
	case 'g':
	case 'G':
	  {

	    double d;

	    d = va_arg (args, double);

	    if (precision == UNSET || precision < 0)
	      precision = 6;

	    f_type = *(format - 1);

	    fld = _dcvt (_REENT, buffer, d, precision, field_width, f_type, flags & FHASH);

	    n_chars = (fld ? strlen (fld) : 0);

	    n_pad = 0;
	    if (field_width > n_chars)
	      n_pad = field_width - n_chars;

	    if (d < 0)
	      prefix = "-";
	    else if (flags & FPLUS)
	      prefix = "+";
	    else if (flags & FSPACE)
	      prefix = " ";
	    else
	      prefix = NULL;

	    if (n_pad && prefix)
	      n_pad -= strlen (prefix);

	    if ((n_chars = out_string (fld, n_chars, flags, 0,
				       n_pad, prefix, ortn, fp, maxlen-count)) < 0) return -1;
	    if (!ortn) fp += n_chars;
            count += n_chars;

	    /* reset flags, ... etc */
	    flags = 0;
	    field_width = 0;
	    precision = UNSET;
	    break;
	  }
#endif
	case 's':
	  s = va_arg (args, char *);

	  if (s == NULL)
	    s = "{null}";

	  n_chars = strlen (s);
	  if (precision != UNSET && precision < n_chars)
	    n_chars = precision;

	  n_pad = 0;
	  if (field_width > n_chars)
	    n_pad = field_width - n_chars;

	  if ((n_chars = out_string (s, n_chars, flags, 0, n_pad, "", ortn, fp, maxlen-count)) < 0) return -1;
	  if (!ortn) fp += n_chars;
          count += n_chars;

	  /* reset flags, ... etc */
	  flags = 0;
	  field_width = 0;
	  precision = UNSET;
	  break;

	case 'c':
	  c = va_arg (args, int);

	  n_pad = 0;
	  if (field_width > 1)
	    n_pad = field_width - 1;

	  if ((n_chars = out_string (&c, 1, flags, 0, n_pad, "", ortn, fp, maxlen-count)) < 0) return -1;
	  if (!ortn) fp += n_chars;
          count += n_chars;

	  /* reset flags, ... etc */
	  flags = 0;
	  field_width = 0;
	  precision = UNSET;
	  break;

	case 'p':

#ifdef __GNUC__
	  /* This is the only case where we need long longs.
	     Handle all other cases without them.  */
# if 0
	  if (sizeof (ip) > sizeof (long)) {
            long long int *llp;
	    llp = va_arg (args, long long int *);
	    fld = _llicvt (buffer, (long long)llp, 'x');
	  } else {
	    ip = va_arg (args, int *);
	    fld = _icvt (buffer, (int) ip, 'x');
          }
# else
	  ip = va_arg (args, int *);
	  fld = _icvt (buffer, (int) ip, 'x');
# endif
#else
	  ip = va_arg (args, int *);
#if LONG_MAX != INT_MAX
	  if (sizeof (ip) > sizeof (int))
	    fld = _licvt (buffer, (long int) ip, 'x');
	  else
#endif
	  fld = _icvt (buffer, (int) ip, 'x');
#endif

	  precision = 2 * sizeof (ip);
	  n_chars = (fld ? strlen (fld) : 0);

	  flags = FZERO;

	  n_zero = 0;
	  if (precision > n_chars)
	    n_zero = precision - n_chars;

	  prefix = "0x";

	  if ((n_chars = out_string (fld, n_chars, flags, n_zero, 0, prefix, ortn, fp, maxlen-count)) < 0) return -1;
	  if (!ortn) fp += n_chars;
          count += n_chars;

	  /* reset flags, ... etc */
	  flags = 0;
	  field_width = 0;
	  precision = UNSET;
	  prefix = NULL;
	  break;

	case 'n':
	  if (flags & FSHORT)
	    *(va_arg (args, short *)) = count;
	  else
	    *(va_arg (args, int *)) = count;

	  /* reset flags, ... etc */
	  flags = 0;
	  field_width = 0;
	  precision = UNSET;
	  break;

	case '%':
	  n_pad = 0;
	  if (field_width > 1)
	    n_pad = field_width - 1;

	  if ((n_chars = out_string ("%", 1, flags, 0, n_pad, "", ortn, fp, maxlen-count)) < 0) return -1;
	  if (!ortn) fp += n_chars;
	  count += n_chars;

	  /* reset flags, ... etc */
	  flags = 0;
	  field_width = 0;
	  precision = UNSET;
	  break;

	case '\0':
	  /* reset flags, ... etc */
	  flags = 0;
	  field_width = 0;
	  precision = UNSET;
	  break;
	}
    }
    if (!ortn) *fp = 0;
    return count;
}

int nvfprintf(char *fp, int maxlen, const char *fmt0, va_list ap) {
    return twi_vfprintf(0, fp, maxlen, fmt0, ap);
}
@


1.1
log
@Initial revision
@
text
@d80 12
a91 10
  if (ortn && (flags&FATTRIB)) {
    char lbuff[CVT_BUF_SIZE], *lb = lbuff;
    *lb++ = '%';
    *lb++ = '%';
    memcpy(lb, s, n_chars);
    lb += n_chars;
    *lb++ = '%';
    *lb++ = '%';
    *lb = 0;
    if (ortn((void *)fp, lbuff, lb-lbuff) < 0) return -1;
@
