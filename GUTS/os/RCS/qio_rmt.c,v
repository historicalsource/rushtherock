head	1.4;
access;
symbols
	RUSH_ROCK_1_0:1.4
	MACE_1_0e:1.4
	MACE_1_0d:1.4
	AREA_52_00:1.4
	MACE_1_0a:1.4;
locks; strict;
comment	@ * @;


1.4
date	97.03.14.21.03.32;	author shepperd;	state Exp;
branches;
next	1.3;

1.3
date	97.01.03.21.13.53;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	97.01.02.21.06.38;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	96.12.10.23.55.09;	author shepperd;	state Exp;
branches;
next	;


desc
@Start of qio driver for remote stats.
@


1.4
log
@Use nsprintf.h instead of the test vnsprintf.h..
@
text
@/*
 *	qio_rmt.c -- Dave Shepperd -- Dec 1996
 *
 *	Functions to deliver statistics in TEKHEX format from NVRAM to a modem
 *	through the I/O ASIC uart on Phoenix class hardware. Some routines stolen
 *	from rmt.c by Forrest Miller.
 *
 *
 *		Copyright 1996 Atari Games Corporation
 *	Unauthorized reproduction, adaptation, distribution, performance or 
 *	display of this computer program or the associated audiovisual work
 *	is strictly prohibited.
 */

#include <config.h>
#include <os_proto.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <nsprintf.h>
#include <qio.h>
#include <fcntl.h>
#include <stat_defs.h>

#if !defined(BR9600)
# if HOST_BOARD == PHOENIX
#  define BR9600 51		/* 16.384MHz xtal */
# else
#  define BR9600 55		/* 16.667MHz xtal */
# endif
#endif
#ifndef STATIC
# define STATIC static
#endif

/*
 * Structure definitions
 */
#define REC_LEN	32

#define TA_BUF_SIZE  16		/* size of processed input buffer */
#define IN_BUF_SIZE  16		/* size of processed input buffer */
#define OUT_BUF_SIZE 80		/* size of output buffer */

static struct r_buf {
    QioIOQ *rioq;		/* input ioq */
    QioIOQ *wioq;		/* output ioq */
    QioIOQ *scioq;		/* single char output ioq */
    int top;			/* starting address */
    int bottom;			/* ending address */	
    int inp_length;		/* number of chars presently in inp_buf */
    int ta_inp;			/* index into ta buff */
    int ta_out;			/* index from ta buff */
    int out_state;		/* output state */
    int flags;			/* i/o flags */
    char ta_buf[TA_BUF_SIZE];	/* input chars are dropped into this typeahead buffer */
    char inp_buf[IN_BUF_SIZE];	/* AST routine assembles input chars into this buffer */
    char out_buf[OUT_BUF_SIZE];	/* output is formed in this buffer */
    char buf0;			/* QIO drops char into this buffer */
    char beep;			/* placeholder for single character output */
} iobuf;

/*
 * to_tekhex - Converts a binary number into variable length hex format.
 */
STATIC const char hex_dig[] = { '0', '1', '2', '3', '4', '5', '6', '7',
				'8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

STATIC char *to_tekhex(char *str, int size, int number) {
    int len;
    nsprintf( str+1, size, "%lX", number );
    len = strlen( str + 1 );
    str[0] = hex_dig[ len & 0x0F ];
    return str;
}

/*
 * to_hex - Converts a character into two bytes of hex.
 */
STATIC char *to_hex( U8 value, char *str ) {
    *str++ = hex_dig[(value >> 4) & 0x0F];
    *str++ = hex_dig[ value & 0x0F ];
    return str;
} /* end to_hex */

/*
 * rmt_tekhex - Converts the amount of bytes specified by "cnt" into
 *		a tekhex record.
 */
#define in(l,m,h)	( ((l) <= (m))  &&  ((m) <= (h)))
#define CR_LF_NULL 3

STATIC void rmt_tekhex( struct r_buf *rmt, int inx, int cnt ) {
    int len, j;
    U32 cksum;
    char *cp;
    char csum[4];
    char thstr[18];

/* nsprintf _should_ return length -- fom per mea */

    nsprintf( rmt->out_buf, OUT_BUF_SIZE, "%%00600%s", to_tekhex( thstr, sizeof(thstr), inx ) );
    len = strlen( rmt->out_buf );
    for ( cp = rmt->out_buf + len, j = 0; j < cnt; ++j )
	cp = to_hex( *( BRAM + ( (inx + j) << STRIDE ) ), cp );

    *cp++ = '\r';
    *cp++ = '\n';
    *cp   = '\0';

    to_hex( ( U8 )( ( cp - rmt->out_buf - CR_LF_NULL ) & 0xFF ), csum );
    rmt->out_buf[ 1 ] = csum[ 0 ];
    rmt->out_buf[ 2 ] = csum[ 1 ];

    for ( cp -= CR_LF_NULL, cksum = 0; cp > rmt->out_buf; --cp ) {
	if ( in( '0', *cp, '9' ) ) {
	    cksum += *cp - '0';
	} else if ( in( 'A', *cp, 'Z' ) ) {
	    cksum += *cp - 'A' + 10;
	} else if ( in( 'a', *cp, 'z' ) ) {
	    cksum += *cp - 'a' + 40;
	} else {
	    switch (*cp) {
		case '$' : cksum += 36; break;
		case '%' : cksum += 37; break;
		case '.' : cksum += 38; break;
		case '_' : cksum += 39; break;
	    }
	}
    }
    to_hex( ( U8 )( cksum & 0xFF ), csum );
    rmt->out_buf[ 4 ] = csum[ 0 ];
    rmt->out_buf[ 5 ] = csum[ 1 ];
}

/*
 * rmt_job - Sets up the job request if setup, and
 *	     continues the job until completion.
 */
STATIC void rmt_job(struct r_buf *rmt, int mode) {
    int cnt;
    char *bp, *cp;

    if (mode) {
	bp = rmt->inp_buf;
	if (rmt->inp_length == 3 && (bp[0] == '+' || bp[0] == '-')) {
	    if (bp[1] == 'E') {
		if (bp[0] == '+') {
		    rmt->flags |= 1;
		} else {
		    rmt->flags &= ~1;
		}
	    } else if (bp[1] == 'e') {
		if (bp[0] == '+') {
		    rmt->flags |= 2;
		} else {
		    rmt->flags &= ~2;
		}
	    }
	    rmt->inp_length = 0;
	    return;
	}
	rmt->bottom = strtol(bp, &cp, 16);
	if ( bp != cp ) rmt->top = strtol(bp = cp, &cp, 16) + 1;
	rmt->inp_length = 0;		/* eat the input line */
	if ( bp != cp ) {
	    if ( rmt->bottom < 0 ) rmt->bottom = 0;
	    if ( rmt->top >= BRAM_SIZE ) rmt->top = BRAM_SIZE;
	} else {
	    rmt->bottom = rmt->top = 0;	/* make sure we stop after echo done */
	}
	if ((rmt->flags&1)) {
	    char *msg;
	    int max;
	    if (bp == cp) {
#define SYNTAX_ERR_MSG "Syntax error\r\n" 
		msg = SYNTAX_ERR_MSG;
		cnt = sizeof(SYNTAX_ERR_MSG)-1;
	    } else {
		msg = 0;
		cnt = 0;
	    }
	    bp = rmt->out_buf;
	    max = OUT_BUF_SIZE;
	    if ((rmt->flags&2)) {
		strcpy(rmt->out_buf, "\r\n");
		bp = rmt->out_buf + 2;
		max -= 2;
		cnt += 2;
	    }
	    if (msg) {
		strcpy(bp, msg);
	    } else {
		cnt += nsprintf(bp, max, "Dumping %08lX-%08lX\r\n", rmt->bottom, rmt->top-1);
	    }
	    qio_write(rmt->wioq, rmt->out_buf, cnt);
	    rmt->out_state = 1;
	}
	if (rmt->out_state) return;		/* if writing, just quit */
    }
    cnt = rmt->top - rmt->bottom;
    if ( cnt < 0 ) {
	cnt = rmt->top = rmt->bottom = 0;
    }
    rmt->out_buf[0] = 0;		/* assume no output */
    if ( cnt > REC_LEN ) cnt = REC_LEN;
    if ( cnt ) {
	rmt_tekhex( rmt, rmt->bottom, cnt );
	rmt->bottom += cnt;
    } else {
	if ( rmt->bottom ) strcpy( rmt->out_buf, "%0781010\n\r" );
	rmt->top = rmt->bottom = 0;
    }
    cnt = strlen(rmt->out_buf);
    if (cnt) {
	rmt->out_state = 1;
	qio_write(rmt->wioq, rmt->out_buf, cnt);
    } else {
	rmt->top = rmt->bottom = rmt->out_state = 0;
    }
}

static void uart_done(QioIOQ *ioq) {
    struct r_buf *rmt = &iobuf;
    if (ioq->user) {		/* it's an input interrupt */
	int t;
	t = rmt->ta_inp;
	rmt->ta_buf[t] = *(char *)ioq->user;	/* record the input character */
	if (rmt->flags&2) qio_write(rmt->scioq, rmt->ta_buf+t, 1);
	++t;
	if (t >= TA_BUF_SIZE) t = 0;
	if (t != rmt->ta_out) rmt->ta_inp = t;
	qio_read(ioq, ioq->user, 1);		/* que another read */
    } else {
	if (rmt->out_state && rmt->top) {
	    rmt_job(rmt, 0);		/* continue writing output */
	    return;
	}
	rmt->out_state = 0;		/* output is finished */
	rmt->top = rmt->bottom = 0;
    }
    if (rmt->out_state) return;		/* if output is busy, don't do anything */
    while (rmt->ta_inp != rmt->ta_out) { /* while stuff is in typeahead buffer */
	int c;
	c = rmt->ta_buf[rmt->ta_out++];
	if (rmt->ta_out >= TA_BUF_SIZE) rmt->ta_out = 0;
	if (c != '\r' && c != '\n') {	/* end of line is either a cr or lf */
	    if (rmt->inp_length >= IN_BUF_SIZE-1) {
		qio_write(rmt->scioq, &rmt->beep, 1);
		return;
	    }
	    rmt->inp_buf[rmt->inp_length++] = c;
	} else {
	    rmt->inp_buf[rmt->inp_length++] = '\n';	/* end of line is always a newline */
	    rmt->inp_buf[rmt->inp_length] = 0;		/* followed by a null */
	    rmt_job(rmt, 1);				/* go process line */
	    return;					/* leave typeahead alone until done */
	}
    }
}

extern void qio_uart_init(void);

void rmt_init(int brate) {
    QioIOQ *rd_ioq, *wr_ioq, *sc_ioq;
    int sts;
    
    qio_uart_init();
    rd_ioq = qio_getioq();
    wr_ioq = qio_getioq();
    sc_ioq = qio_getioq();
    if (!rd_ioq || !wr_ioq || !sc_ioq) {
	if (rd_ioq) qio_freeioq(rd_ioq);
	if (wr_ioq) qio_freeioq(wr_ioq);
	if (sc_ioq) qio_freeioq(sc_ioq);
	return;				/* can't do anything */
    }
    sts = qio_open(rd_ioq, "/tty0", O_RDWR);
    while (!sts) sts = rd_ioq->iostatus;
    if (QIO_ERR_CODE(sts)) {
	qio_freeioq(rd_ioq);
	qio_freeioq(wr_ioq);
	return;				/* can't do anything */
    }	
    rd_ioq->complete = uart_done;
    wr_ioq->file = rd_ioq->file;
    wr_ioq->complete = uart_done;
    sc_ioq->file = rd_ioq->file;
    rd_ioq->user = (void *)&iobuf.buf0;
    sts = qio_read(rd_ioq, rd_ioq->user, 1);
    if (sts) {
	qio_close(rd_ioq);		/* can't do anything */
	qio_freeioq(rd_ioq);
	qio_freeioq(wr_ioq);
	qio_freeioq(sc_ioq);
    } else {
	iobuf.rioq = rd_ioq;
	iobuf.wioq = wr_ioq;
	iobuf.scioq = sc_ioq;
	iobuf.beep = 7;
    }
    return;
}
@


1.3
log
@Added optional line and character echoing.
Corrected numerous problems with buffer handling.
@
text
@d20 1
a20 1
#include <vnsprintf.h>
@


1.2
log
@Works now.
@
text
@d48 1
d55 1
d146 17
d165 35
a199 4
	rmt->inp_length = 0;		/* no more input */
	if ( bp == cp ) return;		/* line format error, nothing to do */
	if ( rmt->bottom < 0 ) rmt->bottom = 0;
	if ( rmt->top >= BRAM_SIZE ) rmt->top = BRAM_SIZE;
d229 1
d235 1
a235 1
	if (rmt->out_state && rmt->bottom) {
d249 1
a249 2
		qio_write(rmt->wioq, &rmt->beep, 1);
		rmt->out_state = 1;
d257 1
d265 1
a265 1
    QioIOQ *rd_ioq, *wr_ioq;
d271 2
a272 1
    if (!rd_ioq || !wr_ioq) {
d275 1
d286 3
a288 1
    *wr_ioq = *rd_ioq;
d295 1
d299 1
@


1.1
log
@Initial revision
@
text
@d167 1
a167 1
	qio_write(rmt->wioq, rmt->out_buf, strlen(rmt->out_buf));
d177 3
a179 2
	rmt->ta_buf[rmt->inp_length] = *(char *)ioq->user;	/* record the input character */
	t = rmt->ta_inp+1;
d184 3
a186 5
	if (rmt->out_state) {
	    if (rmt->bottom < rmt->top) {
		rmt_job(rmt, 0);		/* continue writing output */
		return;
	    }
d194 1
a194 1
	c = rmt->inp_buf[rmt->ta_out++];
@
