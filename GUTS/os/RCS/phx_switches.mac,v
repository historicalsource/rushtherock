head	1.7;
access;
symbols;
locks; strict;
comment	@;; @;


1.7
date	96.10.29.18.26.36;	author shepperd;	state Exp;
branches;
next	1.6;

1.6
date	96.07.31.14.34.11;	author forrest;	state Exp;
branches;
next	1.5;

1.5
date	96.07.18.01.06.15;	author shepperd;	state Exp;
branches;
next	1.4;

1.4
date	96.07.17.22.19.53;	author shepperd;	state Exp;
branches;
next	1.3;

1.3
date	96.06.13.03.33.06;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	96.06.05.01.01.52;	author forrest;	state Exp;
branches;
next	1.1;

1.1
date	96.04.24.20.59.39;	author forrest;	state Exp;
branches;
next	;


desc
@First pass at phoenix switches.  These defines map the development control
panels with the joystick, white and green buttons, and toggle switches.
@


1.7
log
@Added new coin switch names.
@
text
@.if not_defined, _PHX_SWITCHES_MAC_
_PHX_SWITCHES_MAC_ == 0

	VAR	  INPUTS	VU16	IO_PLAYER_21
	VAR	  EXTEND	VU16	IO_PLAYER_43
	VAR	  MISC		VU16	IO_MISC
	VAR	  DIAG		VU16	IO_DIPSW
;
	VAR	  TEST		VU16	IO_PLAYER_21
	HEX_CONST B_TEST	14
;
; Where they go in the switch word.
;
	HEX_CONST SH_INPUTS	0
	HEX_CONST SH_EXTEND	0
	HEX_CONST SH_MISC	16
	HEX_CONST SH_DIAG	16
;
.if true, OUTPUT_LANG == LANG_C
#define INPUT_SWITCHES ( INPUTS << SH_INPUTS )
#define EXTEND_SWITCHES ( EXTEND << SH_EXTEND )
#define MISC_SWITCHES ( MISC << SH_MISC )
#define DIAG_SWITCHES ( DIAG << SH_DIAG )
#define READ_RAW_SWITCHES(x) ( (x) ?\
			    ~( EXTEND_SWITCHES | DIAG_SWITCHES ) :\
			    ~( INPUT_SWITCHES | MISC_SWITCHES ) )
.endc
;
	HEX_CONST SW_EDGES	0xFFFFFFFF
	HEX_CONST SW_LEVELS	0x00000000
;
REM <	SELFTEST switch definitions >
	HEX_CONST J1_UP		(IO_PLYR1_0<<SH_INPUTS)	< SW07 >
	HEX_CONST J1_DOWN	(IO_PLYR1_1<<SH_INPUTS)	< SW06 >
	HEX_CONST J1_LEFT	(IO_PLYR1_2<<SH_INPUTS)	< SW05 >
	HEX_CONST J1_RIGHT	(IO_PLYR1_3<<SH_INPUTS)	< SW04 >
	HEX_CONST J2_UP		(IO_PLYR2_0<<SH_INPUTS)
	HEX_CONST J2_DOWN	(IO_PLYR2_1<<SH_INPUTS)
	HEX_CONST J2_LEFT	(IO_PLYR2_2<<SH_INPUTS)
	HEX_CONST J2_RIGHT	(IO_PLYR2_3<<SH_INPUTS)
	HEX_CONST J3_UP		(IO_PLYR3_0<<SH_EXTEND)	< SW07 >
	HEX_CONST J3_DOWN	(IO_PLYR3_1<<SH_EXTEND)	< SW06 >
	HEX_CONST J3_LEFT	(IO_PLYR3_2<<SH_EXTEND)	< SW05 >
	HEX_CONST J3_RIGHT	(IO_PLYR3_3<<SH_EXTEND)	< SW04 >
	HEX_CONST J4_UP		(IO_PLYR4_0<<SH_EXTEND)
	HEX_CONST J4_DOWN	(IO_PLYR4_1<<SH_EXTEND)
	HEX_CONST J4_LEFT	(IO_PLYR4_2<<SH_EXTEND)
	HEX_CONST J4_RIGHT	(IO_PLYR4_3<<SH_EXTEND)
	HEX_CONST J_UP		<J1_UP | J2_UP>
	HEX_CONST J_DOWN	<J1_DOWN | J2_DOWN>
;
; DIP Switches
;
	HEX_CONST SW_OPT0	(IO_DIPSW0<<SH_DIAG)
	HEX_CONST SW_OPT1	(IO_DIPSW1<<SH_DIAG)
	HEX_CONST SW_OPT2	(IO_DIPSW2<<SH_DIAG)
	HEX_CONST SW_OPT3	(IO_DIPSW3<<SH_DIAG)
	HEX_CONST SW_OPT4	(IO_DIPSW4<<SH_DIAG)
	HEX_CONST SW_OPT5	(IO_DIPSW5<<SH_DIAG)
	HEX_CONST SW_OPT6	(IO_DIPSW6<<SH_DIAG)
	HEX_CONST SW_OPT7	(IO_DIPSW7<<SH_DIAG)
	HEX_CONST SW_OPT8	(IO_DIPSW8<<SH_DIAG)
	HEX_CONST SW_OPT9	(IO_DIPSW9<<SH_DIAG)
	HEX_CONST SW_OPT10	(IO_DIPSW10<<SH_DIAG)
	HEX_CONST SW_OPT11	(IO_DIPSW11<<SH_DIAG)
	HEX_CONST SW_OPT12	(IO_DIPSW12<<SH_DIAG)
	HEX_CONST SW_OPT13	(IO_DIPSW13<<SH_DIAG)
	HEX_CONST SW_OPT14	(IO_DIPSW14<<SH_DIAG)
	HEX_CONST SW_OPT15	(IO_DIPSW15<<SH_DIAG)
;
; Toggles
;
	HEX_CONST SW01		(IO_PLYR1_5<<SH_INPUTS)	< SW01 >
	HEX_CONST SW08		(IO_MISC5<<SH_MISC)	< SW08 >
	HEX_CONST SW09		(IO_PLYR2_0<<SH_INPUTS)	< SW09 >
	HEX_CONST SW10		(IO_PLYR2_1<<SH_INPUTS)	< SW10 >
	HEX_CONST SW11		(IO_PLYR2_2<<SH_INPUTS)	< SW11 >
	HEX_CONST SW12		(IO_PLYR2_3<<SH_INPUTS)	< SW12 >
	HEX_CONST SW13		(IO_PLYR2_4<<SH_INPUTS)	< SW13 >
	HEX_CONST SW14		(IO_PLYR2_5<<SH_INPUTS)	< SW14 >
	HEX_CONST SW15		(IO_PLYR2_6<<SH_INPUTS)	< SW15 (Self Test) >
;
REM <	J_LEFT/RIGHT, JOY_ defs moved below so the can use SW_ defs	>
;
	HEX_CONST J1_VERT	<J1_UP | J1_DOWN>
	HEX_CONST J1_BITS	<J1_UP | J1_DOWN | J1_LEFT | J1_RIGHT>
;
	HEX_CONST J2_VERT	<J2_UP | J2_DOWN>
	HEX_CONST J2_BITS	<J2_UP | J2_DOWN | J2_LEFT | J2_RIGHT>
;
	HEX_CONST J3_VERT	<J3_UP | J3_DOWN>
	HEX_CONST J3_BITS	<J3_UP | J3_DOWN | J3_LEFT | J3_RIGHT>
;
	HEX_CONST J4_VERT	<J4_UP | J4_DOWN>
	HEX_CONST J4_BITS	<J4_UP | J4_DOWN | J4_LEFT | J4_RIGHT>
;
	HEX_CONST SW_GREEN	(IO_PLYR1_4<<SH_INPUTS)	< SW03 >
	HEX_CONST SW_WHITE	(IO_MISC2<<SH_MISC)	< SW02 >
	HEX_CONST SW_BLACK	0x00000000
;
REM <	the switches let you do s/t options w/o L/R on stix	>
	HEX_CONST J_LEFT	<J1_LEFT | J2_LEFT>
	HEX_CONST J_RIGHT	<J1_RIGHT | J2_RIGHT>
	HEX_CONST JOY_BITS	<J_UP | J_DOWN | J_LEFT | J_RIGHT>
	HEX_CONST JOY_VERT	<J_UP | J_DOWN>
;
.if true, (SST_GAME == SST_HOCKEY) || (SST_GAME == SST_MACE)
	HEX_CONST SW_NEXT	(IO_MISC2<<SH_MISC)  < START >
	HEX_CONST SW_ACTION	(IO_PLYR1_4<<SH_INPUTS) < SHOOT >
.iff
	HEX_CONST SW_NEXT	<SW_GREEN>	< GREEN >
	HEX_CONST SW_ACTION	<SW_WHITE>	< WHITE >
.endc
	HEX_CONST SW_EXTRA	<SW_BLACK>	< BLACK >
;
	HEX_CONST JOY_ALL	<JOY_BITS | SW_NEXT | SW_ACTION>
	HEX_CONST SW_ALL	<SW_ACTION | SW_NEXT | SW_EXTRA>
	HEX_CONST SW_BITS	0xFFFFFFFF
;
; Coin stuff
;
.if true, OUTPUT_LANG == LANG_C
#define LM_EMC_L	1
#define LM_EMC_R	2
# define COUNTER_ON(x)	do { int oldipl; \
			     U32 meter; \
			     oldipl = prc_set_ipl(INTS_OFF); \
			     meter = *(VU32*)IO_METER; \
			     *(VU32*)IO_METER = meter | 0x10; \
			     *(VU32*)IO_METER = meter | emc_map[x]; \
			     prc_set_ipl(oldipl); \
			   } while (0)
# define COUNTER_OFF(x)	do { int oldipl; \
			     U32 meter; \
			     oldipl = prc_set_ipl(INTS_OFF); \
			     meter = *(VU32*)IO_METER; \
			     *(VU32*)IO_METER = meter | 0x10; \
			     *(VU32*)IO_METER = meter & ~emc_map[x]; \
			     prc_set_ipl(oldipl); \
			   } while (0)

 .if true, SST_GAME != SST_DMS
#define B_COINL		(0)		/* COIN LEFT */
#define B_COINR		(1)		/* COIN RIGHT */
#define B_COIN3		(2)		/* COIN 3 */
#define B_COIN4		(3)		/* COIN 4 */
#define B_CREDIT	(6)		/* FE's Coin switch */
#define B_DOLLAR	(7)		/* Dollar acceptor */
#define CN_STATUS	((MISC&0x43)|((MISC&0x8000)>>8)|((MISC&0x180)>>5))
 .iff
#define B_COINL		(11+SH_INPUTS)	/* COIN LEFT */
#define B_COINR		(8+SH_INPUTS)	/* COIN RIGHT */
#define B_CREDIT	(10+SH_INPUTS)	/* AUX LEFT Coin switch */
#define CN_STATUS	(INPUTS<<SH_INPUTS)
 .endc
#define MECH_ORDER  { LFT_M, RGT_M, AUX_M, AUX_M }
.endc
;
.endc
@


1.6
log
@Changed to longer bit names for switches.
@
text
@d145 5
a149 2
#define BC_CREDIT	(6)		/* AUX LEFT Coin switch */
#define CN_STATUS	(MISC)
d153 1
a153 1
#define BC_CREDIT	(10+SH_INPUTS)	/* AUX LEFT Coin switch */
@


1.5
log
@Added some more switches.
@
text
@d33 16
a48 16
	HEX_CONST J1_UP		(P1_0<<SH_INPUTS)	< SW07 >
	HEX_CONST J1_DOWN	(P1_1<<SH_INPUTS)	< SW06 >
	HEX_CONST J1_LEFT	(P1_2<<SH_INPUTS)	< SW05 >
	HEX_CONST J1_RIGHT	(P1_3<<SH_INPUTS)	< SW04 >
	HEX_CONST J2_UP		(P2_0<<SH_INPUTS)
	HEX_CONST J2_DOWN	(P2_1<<SH_INPUTS)
	HEX_CONST J2_LEFT	(P2_2<<SH_INPUTS)
	HEX_CONST J2_RIGHT	(P2_3<<SH_INPUTS)
	HEX_CONST J3_UP		(P3_0<<SH_EXTEND)	< SW07 >
	HEX_CONST J3_DOWN	(P3_1<<SH_EXTEND)	< SW06 >
	HEX_CONST J3_LEFT	(P3_2<<SH_EXTEND)	< SW05 >
	HEX_CONST J3_RIGHT	(P3_3<<SH_EXTEND)	< SW04 >
	HEX_CONST J4_UP		(P4_0<<SH_EXTEND)
	HEX_CONST J4_DOWN	(P4_1<<SH_EXTEND)
	HEX_CONST J4_LEFT	(P4_2<<SH_EXTEND)
	HEX_CONST J4_RIGHT	(P4_3<<SH_EXTEND)
d54 16
a69 16
	HEX_CONST SW_OPT0	(DIPSW0<<SH_DIAG)
	HEX_CONST SW_OPT1	(DIPSW1<<SH_DIAG)
	HEX_CONST SW_OPT2	(DIPSW2<<SH_DIAG)
	HEX_CONST SW_OPT3	(DIPSW3<<SH_DIAG)
	HEX_CONST SW_OPT4	(DIPSW4<<SH_DIAG)
	HEX_CONST SW_OPT5	(DIPSW5<<SH_DIAG)
	HEX_CONST SW_OPT6	(DIPSW6<<SH_DIAG)
	HEX_CONST SW_OPT7	(DIPSW7<<SH_DIAG)
	HEX_CONST SW_OPT8	(DIPSW8<<SH_DIAG)
	HEX_CONST SW_OPT9	(DIPSW9<<SH_DIAG)
	HEX_CONST SW_OPT10	(DIPSW10<<SH_DIAG)
	HEX_CONST SW_OPT11	(DIPSW11<<SH_DIAG)
	HEX_CONST SW_OPT12	(DIPSW12<<SH_DIAG)
	HEX_CONST SW_OPT13	(DIPSW13<<SH_DIAG)
	HEX_CONST SW_OPT14	(DIPSW14<<SH_DIAG)
	HEX_CONST SW_OPT15	(DIPSW15<<SH_DIAG)
d73 9
a81 9
	HEX_CONST SW01		(P1_5<<SH_INPUTS)	< SW01 >
	HEX_CONST SW08		(MI5<<SH_MISC)		< SW08 >
	HEX_CONST SW09		(P2_0<<SH_INPUTS)	< SW09 >
	HEX_CONST SW10		(P2_1<<SH_INPUTS)	< SW10 >
	HEX_CONST SW11		(P2_2<<SH_INPUTS)	< SW11 >
	HEX_CONST SW12		(P2_3<<SH_INPUTS)	< SW12 >
	HEX_CONST SW13		(P2_4<<SH_INPUTS)	< SW13 >
	HEX_CONST SW14		(P2_5<<SH_INPUTS)	< SW14 >
	HEX_CONST SW15		(P2_6<<SH_INPUTS)	< SW15 (Self Test) >
d97 2
a98 2
	HEX_CONST SW_GREEN	(P1_4<<SH_INPUTS)	< SW03 >
	HEX_CONST SW_WHITE	(MI2<<SH_MISC)		< SW02 >
d108 2
a109 2
	HEX_CONST SW_NEXT	(MI2<<SH_MISC)  < START >
	HEX_CONST SW_ACTION	(P1_4<<SH_INPUTS) < SHOOT >
@


1.4
log
@Turned on coin counters.
@
text
@d37 12
a48 8
	HEX_CONST J2_UP		0x00000000
	HEX_CONST J2_DOWN	0x00000000
	HEX_CONST J2_LEFT	0x00000000
	HEX_CONST J2_RIGHT	0x00000000
	HEX_CONST J3_UP		0x00000000
	HEX_CONST J3_DOWN	0x00000000
	HEX_CONST J3_LEFT	0x00000000
	HEX_CONST J3_RIGHT	0x00000000
d94 3
d107 1
a107 1
.if true, SST_GAME == SST_HOCKEY
d145 1
a145 2
#define BC_AUX_LFT	(10+SH_INPUTS)	/* AUX LEFT Coin switch */
#define BC_AUX_RGT	(9+SH_INPUTS)	/* AUX RIGHT Coin switch */
d150 1
a150 2
#define BC_AUX_LFT	(10+SH_INPUTS)	/* AUX LEFT Coin switch */
#define BC_AUX_RGT	(9+SH_INPUTS)	/* AUX RIGHT Coin switch */
@


1.3
log
@Added different switch assignments for hockey.
@
text
@a115 4
#if 0
extern U32 ctl_mod_latch(int);
#endif

d118 16
a133 4
#if 0
# define COUNTER_ON(x)		ctl_mod_latch(emc_map[x])
# define COUNTER_OFF(x)	ctl_mod_latch(~emc_map[x])
#endif
d135 1
a135 1
 .if true, SST_GAME == SST_HOCKEY
@


1.2
log
@Changed DEBUG0:15 to SW_OPT0:15 because HOCKEY was using DEBUGx already.
@
text
@d100 4
d106 1
d127 7
d139 1
@


1.1
log
@Initial revision
@
text
@d50 16
a65 16
	HEX_CONST DEBUG0	(DIPSW0<<SH_DIAG)
	HEX_CONST DEBUG1	(DIPSW1<<SH_DIAG)
	HEX_CONST DEBUG2	(DIPSW2<<SH_DIAG)
	HEX_CONST DEBUG3	(DIPSW3<<SH_DIAG)
	HEX_CONST DEBUG4	(DIPSW4<<SH_DIAG)
	HEX_CONST DEBUG5	(DIPSW5<<SH_DIAG)
	HEX_CONST DEBUG6	(DIPSW6<<SH_DIAG)
	HEX_CONST DEBUG7	(DIPSW7<<SH_DIAG)
	HEX_CONST DEBUG8	(DIPSW8<<SH_DIAG)
	HEX_CONST DEBUG9	(DIPSW9<<SH_DIAG)
	HEX_CONST DEBUG10	(DIPSW10<<SH_DIAG)
	HEX_CONST DEBUG11	(DIPSW11<<SH_DIAG)
	HEX_CONST DEBUG12	(DIPSW12<<SH_DIAG)
	HEX_CONST DEBUG13	(DIPSW13<<SH_DIAG)
	HEX_CONST DEBUG14	(DIPSW14<<SH_DIAG)
	HEX_CONST DEBUG15	(DIPSW15<<SH_DIAG)
@
