head	1.7;
access;
symbols
	AREA_52_00:1.6;
locks; strict;
comment	@;; @;


1.7
date	97.07.31.22.59.37;	author shepperd;	state Exp;
branches;
next	1.6;

1.6
date	97.07.11.00.34.05;	author shepperd;	state Exp;
branches;
next	1.5;

1.5
date	97.05.30.04.16.53;	author shepperd;	state Exp;
branches;
next	1.4;

1.4
date	97.05.19.22.44.06;	author shepperd;	state Exp;
branches;
next	1.3;

1.3
date	97.05.19.22.17.01;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	97.05.17.19.10.40;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	97.05.17.01.49.58;	author shepperd;	state Exp;
branches;
next	;


desc
@Chameleon files
@


1.7
log
@Added support for alternate W2 address space.
@
text
@.if not_defined,_CHAMELEON_MAC_
_CHAMELEON_MAC_ == 0
.if ndf, _CONSTANTS_MAC_
  .warn ;You should .include constants.mac before including chameleon.mac
  .include constants.mac
.endc
.if ndf, _PPTYPES_MAC_
  .warn ;You should .include types.mac before including chameleon.mac
  .include pptypes.mac
.endc
;/*******************************************************/
;/* chameleon.mac					*/
;/*							*/
;/* board level header file for chameleon CPU card	*/
;/*							*/
;/* Written By:	David Shepperd <shepperd@@agames.com>	*/
;/*		Atari Games, Corp.			*/
;/*		Stolen mostly from chameleon.h		*/
;/*		by Andrew Dyer @@ Midway Games, Inc.	*/
;/* Date:	Sat May 3 13:30:47 CST 1997		*/
;/*******************************************************/
;
.if not_defined, ALTERNATE_PCI_W2_ADDRESS
ALTERNATE_PCI_W2_ADDRESS == 0
.endc
.if true, OUTPUT_LANG == LANG_C
#if 0
/* CPU memory map  Description			PCI Memory     PCI I/O Map */
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

/* 0x80000000					0x00000000	---------- */
/* 0x807fffff	8MB Base Memory (SDRAM)		0x007fffff	---------- */

/* 0x81000000					0x01000000	---------- */
/* 0x81ffffff	16MB SIMM 1 (FPM DRAM)		0x01ffffff	---------- */

/* 0x82000000					0x02000000	---------- */
/* 0x82ffffff	16MB SIMM 2 (FPM DRAM)		0x02FFFFFF	---------- */

/* 0xA3000000	(16MB)				----------	0x00000000 */
/* 0xA3ffffff	PCI master i/o window		----------	0x0000ffff */

/* 0xA4000000  (64MB)				0x04000000	---------- */
/* 0xA7ffffff  PCI master memory window 1	0x07ffffff	---------- */

 .if true, ALTERNATE_PCI_W2_ADDRESS == 0
/* 0xA8000000	(64MB)				0x08000000	---------- */
/* 0xAbffffff	PCI master memory window 2	0x0bffffff	---------- */

 .endc
/* 0xAc000000  (48MB)				0x0c000000	---------- */
/* 0xAeffffff  unused hole			0x0effffff	---------- */

/* 0xAf000000	(16MB)				----------	---------- */
/* 0xAf0001ff	Nile 3 register Space		----------	---------- */

/* 0xAf000110					0x03000000	---------- */
/* 		NILE 3 Mailbox regs		0x03000fff */

/* 0xb0000000	(256MB unusable)		----------	---------- */
/* 0xbfffffff	Aliases on top of 0xAXXXXXXX	----------	---------- */

 .if true, ALTERNATE_PCI_W2_ADDRESS != 0
/* 0xC0000000	(256MB)				0xc0000000	---------- */
/* 0xCFFFFFFF	PCI master memory window 2	0xcfffffff	---------- */
 .endc
#endif
.endc
.if ndf,HOST_BOARD
	HEX_CONST HOST_BOARD	CHAMELEON
.endc
.if ndf,NUCLEUS_OS
	HEX_CONST NUCLEUS_OS	0
.endc
.if ndf,PROCESSOR
	HEX_CONST PROCESSOR	MIPS4300L
.endc
;
	HEX_CONST WORD0_OFFS 0
	HEX_CONST WORD32_OFFS 4
	HEX_CONST SHORT0_OFFS 0
	HEX_CONST SHORT16_OFFS 2
	HEX_CONST BYTE0_OFFS 0
	HEX_CONST BYTE8_OFFS 1
	HEX_CONST BYTE16_OFFS 2
	HEX_CONST BYTE24_OFFS 3
; Little-Endian Byte offset (in 64 bit address space) is (bit offset)>>3
	HEX_CONST HWORD0_OFFS 0
	HEX_CONST HWORD32_OFFS 4
	HEX_CONST HSHORT0_OFFS 0
	HEX_CONST HSHORT16_OFFS 2
	HEX_CONST HSHORT32_OFFS 4
	HEX_CONST HSHORT48_OFFS 6
	HEX_CONST HBYTE0_OFFS 0
	HEX_CONST HBYTE8_OFFS 1
	HEX_CONST HBYTE16_OFFS 2
	HEX_CONST HBYTE24_OFFS 3
	HEX_CONST HBYTE32_OFFS 4
	HEX_CONST HBYTE40_OFFS 5
	HEX_CONST HBYTE48_OFFS 6
	HEX_CONST HBYTE56_OFFS 7
;/* 
; *
; */
	HEX_CONST MEM_KUSEG	0x00000000 < -0x7FFFFFFF (  2GB, mapped, cached)	>
	HEX_CONST MEM_KSEG0	0x80000000 < -0x9FFFFFFF phys 00000000-1FFFFFFF (512MB, unmapped, cached)	>
	HEX_CONST MEM_KSEG1	0xA0000000 < -0xBFFFFFFF phys 00000000-1FFFFFFF (512MB, unmapped, uncached)	>
	HEX_CONST MEM_KSSEG	0xC0000000 < -0xDFFFFFFF (512MB, mapped)		>
	HEX_CONST MEM_KSEG3	0xE0000000 < -0xFFFFFFFF (512MB, mapped)		>
	HEX_CONST DRAM_BASE	0x80000000 < DRAM phys 0x00000000-0x007FFFFF >
	HEX_CONST DRAM_BASEnc	0xA0000000 < DRAM phys 0x00000000-0x007FFFFF (uncached) >
	HEX_CONST CACHE_MEM_BASE DRAM_BASE+0x00000000
	HEX_CONST DRAM_BANK1	0x81000000 < DRAM (simm) phys 0x01000000-0x01FFFFFF >
	HEX_CONST DRAM_BANK1nc	0xA1000000 < DRAM (simm) phys 0x01000000-0x01FFFFFF (uncached) >
	HEX_CONST DRAM_BANK2	0x82000000 < DRAM (simm) phys 0x02000000-0x03FFFFFF >
	HEX_CONST DRAM_BANK2nc	0xA2000000 < DRAM (simm) phys 0x02000000-0x03FFFFFF (uncached) >
.if not_defined, DRAM_BANK_SIZE
	HEX_CONST DRAM_BANK_SIZE 0x00800000 < Defaults to 8MB per bank >
.endc
.if not_defined, DRAM_BANKS
	DEC_CONST DRAM_BANKS	1	   < Defaults to 1 banks of DRAM >
.endc
.if not_defined, DRAM_SIZE
	HEX_CONST DRAM_SIZE	DRAM_BANKS*DRAM_BANK_SIZE < DRAM size >
.endc
;
	HEX_CONST PCI_IO_BASE		0xA3000000
	HEX_CONST CHAM_PCI_W1_BASE	0xA4000000
.if true, ALTERNATE_PCI_W2_ADDRESS 
	HEX_CONST CHAM_PCI_W2_BASE	ALTERNATE_PCI_W2_ADDRESS
.iff
	HEX_CONST CHAM_PCI_W2_BASE	0xA8000000
.endc
;
	HEX_CONST CHAM_PCICFG_SLOT0	0x00010000 < IDSEL = AD16 >
	DEC_CONST CHAM_PCICFG_SLOT0_V	3
	HEX_CONST CHAM_PCICFG_SLOT1	0x00020000 < IDSEL = AD17 >
	DEC_CONST CHAM_PCICFG_SLOT1_V	4
	HEX_CONST CHAM_PCICFG_SLOT2	0x00040000 < IDSEL = AD18 >
	DEC_CONST CHAM_PCICFG_SLOT2_V	5
	HEX_CONST CHAM_PCICFG_IDE	0x00080000 < IDSEL = AD19 >
	HEX_CONST CHAM_PCICFG_NILE3	0x00100000 < IDSEL = AD20 >
	HEX_CONST CHAM_PCICFG_PLX	0x00200000 < IDSEL = AD21 >
;
;/* the chameleon on-board I/O gets decoded through the chip selects in
;   the PLX9050 chip.  These defines reflect what gets set up in the 
;   plxinit() function.  A better way to do this is with a macro that 
;   uses this define to set up the PLX, but I'm not that smart :-).  These
;   should change when the PLX code changes.  Note that where the PLX shows up 
;   in the VR4300's memory space is also controlled by how the Nile 3 maps
;   PCI memory.  I should get an honorary PhD for figuring this all out...
;   */
;
	HEX_CONST LOCAL_CS_0_BASE	CHAM_PCI_W1_BASE+0x00100000
	HEX_CONST LOCAL_CS_1_BASE	CHAM_PCI_W1_BASE+0x00000100
	HEX_CONST LOCAL_CS_2_BASE	CHAM_PCI_W1_BASE+0x00200000
	HEX_CONST LOCAL_CS_3_BASE	CHAM_PCI_W1_BASE+0x02000000
;
;/* the following defines reflect the 'hard-coded' address decoding 
;   done in the local bus control FPGA.
; */
;
	.macro REG sym, value, comments
	 HEX_CONST 'sym'_BASE	value	<comments>
	VAR	'sym'_T	BASIC_TYPE 'sym'_BASE <comments>
	.endm
;
	.DEFINE BASIC_TYPE	VU16
	REG	A2D		(LOCAL_CS_0_BASE+0x00000)
	REG	LCD		(LOCAL_CS_0_BASE+0x10000)
	REG	IOASIC		(LOCAL_CS_0_BASE+0x20000)
	DEC_CONST IOASIC_OFFSET_SHIFT	1
	DEC_CONST BUS_SCALE		(1<<IOASIC_OFFSET_SHIFT) < IOASIC is scaled to 16 bit address space >
.if not_defined, WHICH_IOASIC
	.include ioasic.mac
.iff
   .macro which_ioasic val
	.include ioasic'val'.mac
   .endm
	which_ioasic \WHICH_IOASIC
.endc
	REG NSS			(LOCAL_CS_0_BASE+0x30000)
	REG GUN			(LOCAL_CS_0_BASE+0x40000)
	REG VSYNC_CLEAR		(LOCAL_CS_0_BASE+0x50000)
.if true, OUTPUT_LANG == LANG_C
#define SST_VSYNC_ACK() (VSYNC_CLEAR_T = 0)
.endc
	REG SSEG		(LOCAL_CS_0_BASE+0x60000)
	HEX_CONST	SSEG_0	0x81
	HEX_CONST	SSEG_1	0xF9
	HEX_CONST	SSEG_2	0xA4
	HEX_CONST	SSEG_3	0xB0
	HEX_CONST	SSEG_4	0x99
	HEX_CONST	SSEG_5	0x92
	HEX_CONST	SSEG_6	0x82
	HEX_CONST	SSEG_7	0xF8
	HEX_CONST	SSEG_8	0x80
	HEX_CONST	SSEG_9	0x98
	HEX_CONST	SSEG_A	0x88
	HEX_CONST	SSEG_B	0x83
	HEX_CONST	SSEG_C	0xC6
	HEX_CONST	SSEG_D	0xA1
	HEX_CONST	SSEG_E	0x86
	HEX_CONST	SSEG_F	0x8E
	HEX_CONST	SSEG_DOT 0x7F
	REG BRAM		(LOCAL_CS_0_BASE+0x70000)
	REG BRAM_UNLK		(LOCAL_CS_0_BASE+0x80000)
	HEX_CONST	BRAM_SIZE 32768*2
	REG INTCTL_IE		(LOCAL_CS_0_BASE+0x90000)
;
;/* interrupt enable register bits */
;
	HEX_CONST INT_ENABLE_IOASIC	0x001
	HEX_CONST INT_ENABLE_NSS_CONN	0x002
	HEX_CONST INT_ENABLE_AUX_UART	0x004
	HEX_CONST INT_ENABLE_PCI_0	0x008
	HEX_CONST INT_ENABLE_PCI_1	0x010
	HEX_CONST INT_ENABLE_PCI_2	0x020
	HEX_CONST INT_ENABLE_A2D	0x040
	HEX_CONST INT_ENABLE_SMC	0x080
	HEX_CONST INT_ENABLE_SWITCH	0x100
	HEX_CONST INT_ENABLE_VSYNC	0x200
	HEX_CONST INT_ENABLE_VSYNC_POL	0x400		<VYSNC Polarity>
	HEX_CONST INT_ENABLE_UART_POL	0x800		<UART Interrupt Polarity>
;
	REG INTCTL_MAP		(LOCAL_CS_0_BASE+0xa0000)
;
;/* interrupt map register bits    */
;
	HEX_CONST INT_MAP_TO_NONE	0x00
	HEX_CONST INT_MAP_TO_INT2	0x01
	HEX_CONST INT_MAP_TO_INT3	0x02
	HEX_CONST INT_MAP_TO_INT4	0x03
	DEC_CONST INT_MAP_OFF_IOASIC	0
	DEC_CONST INT_MAP_OFF_NSS_CONN	2
	DEC_CONST INT_MAP_OFF_AUX_UART	4
	DEC_CONST INT_MAP_OFF_PCI	6
	DEC_CONST INT_MAP_OFF_A2D	8
	DEC_CONST INT_MAP_OFF_SMC	10
	DEC_CONST INT_MAP_OFF_SWITCH	12
	DEC_CONST INT_MAP_OFF_VSYNC	14
.if true, OUTPUT_LANG == LANG_C
#define INT_MAP_IOASIC(line)	((line) << INT_MAP_OFF_IOASIC)
#define INT_MAP_NSS_CONN(line)	((line) << INT_MAP_OFF_NSS_CONN)
#define INT_MAP_AUX_UART(line)	((line) << INT_MAP_OFF_AUX_UART)
#define INT_MAP_PCI(line)	((line) << INT_MAP_OFF_PCI)
#define INT_MAP_A2D(line)	((line) << INT_MAP_OFF_A2D)
#define INT_MAP_SMC(line)	((line) << INT_MAP_OFF_SMC)
#define INT_MAP_SWITCH(line)	((line) << INT_MAP_OFF_SWITCH)
#define INT_MAP_VSYNC(line)	((line) << INT_MAP_OFF_VSYNC)
.endc
;
	REG INTCTL_CAUSE	(LOCAL_CS_0_BASE+0xb0000)
	REG INTCTL_STS		(LOCAL_CS_0_BASE+0xc0000)
	REG GP_STS		(LOCAL_CS_0_BASE+0xc0000) < bits 15:0 (rw) = General purpose status >
	DEC_CONST B_GPSTS_IOA	0			< IOASIC interrupt >
	DEC_CONST B_GPSTS_NSS	1			< NSS interrupt >
	DEC_CONST B_GPSTS_UART	2			< UART interrupt >
	DEC_CONST B_GPSTS_PCI0	3			< PCI slot 0 interrupt >
	DEC_CONST B_GPSTS_PCI1	4			< PCI slot 1 interrupt >
	DEC_CONST B_GPSTS_PCI2	5			< PCI slot 2 interrupt >
	DEC_CONST B_GPSTS_AD	6			< A/D interrupt >
	DEC_CONST B_GPSTS_SMC	7			< Ethernet interrupt >
	DEC_CONST B_GPSTS_DBG	8			< Debug switch interrupt >
	DEC_CONST B_GPSTS_VSY	9			< Vsync interrupt >
	DEC_CONST B_GPSTS_VSYIN 10			< VSYNC input >
	DEC_CONST B_GPSTS_BLOW	11			< Battery low indication (1=low) >
	DEC_CONST B_GPSTS_WDOG	12			< WDOG timeout occured >
	REG RESET_CTL		(LOCAL_CS_0_BASE+0xd0000)
;
;/* reset register bits       */
;
	HEX_CONST RESET_PCI_SLOT_0	0x001
	HEX_CONST RESET_PCI_SLOT_1	0x002
	HEX_CONST RESET_PCI_SLOT_2	0x004
	HEX_CONST RESET_IDE		0x008
	HEX_CONST RESET_IOASIC		0x010
	HEX_CONST RESET_AUX_UART	0x020
	HEX_CONST RESET_SMC		0x040
	HEX_CONST RESET_NSS_CONN	0x080
	HEX_CONST RESET_GUN_CONF	0x100
;
	REG WDOG		(LOCAL_CS_0_BASE+0xe0000)
	HEX_CONST WATCHDOG WDOG_BASE		< Define for .mac files which want WATCHDOG >
	REG SOUND_FIFO		(LOCAL_CS_0_BASE+0xf0000)
;
	HEX_CONST AUX_UART_BASE		LOCAL_CS_1_BASE
;
	HEX_CONST SMC_BASE		LOCAL_CS_2_BASE
;
	HEX_CONST ROMBUS_BASE		LOCAL_CS_3_BASE
;
	DEC_CONST SWINT0_LVL	0		< Software interrupt 0 >
	DEC_CONST SWINT1_LVL	1		< Software interrupt 1 >
	DEC_CONST INT0_LVL	2		< NILE 3 system interrupt >
	DEC_CONST INT1_LVL	3		< IDE Interrupt >
	DEC_CONST INT2_LVL	4		< Interrupt Control PLD >
	DEC_CONST INT3_LVL	5		< Interrupt Control PLD >
	DEC_CONST INT4_LVL	6		< Interrupt Control PLD >
	DEC_CONST INT5_LVL	7		< Internal timer interrupt >
	NI3 == 0				; Enable NILE III interrupt
	DEC_CONST NI3_LVL	INT0_LVL	< NILE III is connected to Int 0 >
	IDE == 1				; Enable IDE vectors
	DEC_CONST IDE_LVL	INT1_LVL	< IDE is connected to Int 1 >
	TIMER == 5				; Enable timer interrupt
	DEC_CONST TIMER_LVL	INT5_LVL	< Timer interrupt is connected to Int 5 >
	DEC_CONST IOASIC_LVL	8		< Fake level >
;
;
; macro ASNC - assign Chameleon interrupt
;
; usage:  ASNC sym, val, bit
;
;	sym - symbol used by VDF in phx_vecs.mac, derived from the
;	      descriptions given in the Chameleon Development System
;	      Programmers Guide.
;
;	val - CPU interrupt pin, set in config.mac by the user to
;	      map and/or enable the specific interrupt as follows...
;
;	      The valid CPU interrupt levels are 2, 3 and 4 for Chameleon
;
;	bit - bit number in registers INTCTL_IE, INTCTL_CAUSE and INTCTL_STS.
;
; synopsis:  Validates the parameter val, and sets sym to true or false to be
;	     used by macro VDF in phx_vecs.mac
;	     If true, defines sym_LVL to equal INTval_LVL, and "validates" the
;	     bit assignment.  The bit values below are valid according to the
;	     documentation available 5/14/96.  Defines B_PIC_sym and sym_NOTES
;	     to be used by the interrupt installer unless sym_NOTES is defined
;	     previously in config.mac.  Accumulates the appropriate bits for
;	     defining the constants INTCTL_MAP_INIT and INTCTL_MASK.
;
	.macro ASNC sym, val, bit, map
	...0 == 0
	.if identical,<val>,<2>
	 ...0 == 1
	 ...P == 1
	.endc
	.if identical,<val>,<3>
	 ...0 == 1
	 ...P == 2
	.endc
	.if identical,<val>,<4>
	 ...0 == 1
	 ...P == 3
	.endc
	sym == ...0
	.if true, ...0
	 sym'_LVL == INT'val'_LVL
	.iff
	 .iif b,val,.mexit 2
	 .iif identical,<val>,<NULL>,.mexit 2
	 .error ; macro ASN - parameter val out of range (can only be 2, 3 or 4)
	.endc
	.iif b,<bit>,.error ; macro ASN - parameter 'bit' missing
	.iif lt,bit,.error ; macro ASN - parameter bit out of range
	.iif true, bit > 9,.error ; macro ASN - parameter bit out of range (must be < 9)
	DEC_CONST B_PIC_'sym	('bit')	< Chameleon Interrupt Control >
	.iif ndf,sym'_NOTES,HEX_CONST sym'_NOTES (1<<bit)
	...C == ...C + ( 1 << bit )
	.if true, (...A&(3<<(2*map))) && ( ((...A&(3<<(2*map))) ) != ( ...P <<(2*map)) )
	 .error ; INTMAP already set for PCI slot
	 .mexit 2
	.endc
	...A == ...A | ( ...P << ( 2*map ) )
	..AA == 1
	.mexit 2
	.endm
;
; macro ASNL - assign Logical interrupt level
;
; usage:  ASNL sym, val
;
;	sym - symbol used by GUTS which needs to be connected to a
;	      Chameleon interrupt.  
;
;	val - previously defined symbol used by VDF in phx_vecs.mac,
;	      used here to make the logical connection by equating
;	      sym to val, and by equating sym_LVL to val_LVL if val
;	      is true.
;
;
	.macro ASNL sym, val
	.if df,val
	 sym == val
	 .iif ne,val,sym'_LVL == val'_LVL
	.endc
	.mexit 2
	.endm
;
;
; macro ASN - assign Chameleon or Logical interrupt
;
; usage:  ASN sym, val, typ, bit
;
;	sym - symbol used by VDF in phx_vecs.mac, derived from the
;	      descriptions given in the Chemeleon Development System
;	      Programmers Guide and the GT-64010 Data Sheet.
;
;	val - CPU interrupt pin, set in config.mac by the user to
;	      map and/or enable the specific interrupt as follows...
;
;	typ - C or c for Chameleon; L or l for Logical.
;
;	bit - bit number in the appropriate cause, enable, or status register.
;	      This field is not used if typ is L or l.
;
	.macro ASN sym, val, typ, bit, map
	.if ndf,val
	 .define num NULL
	.iff
	 .define num \val
	 ...I == val
	.endc
	.iif identical,<typ>,<C>,ASNC sym, num, bit, map
	.iif identical,<typ>,<c>,ASNC sym, num, bit, map
	.iif identical,<typ>,<L>,ASNL sym, val
	.iif identical,<typ>,<l>,ASNL sym, val
	.error ; macro ASN - bad parameter 'typ'
	.endm
;
; Symbols set by the ASN macros to indicate usage - see below.
;
	...A == 0
	..AA == 0
	...B == 0
	..BB == 0
	...C == 0
	...D == 0
	...I == -1
;
	ASN IOA, IOA_ASN, C,  0, 0 ; Expansion Slot interrupt
	ASN NSS, NSS_ASN, C,  1, 1 ; NSS/Hi-Link interrupt
	ASN URT, URT_ASN, C,  2, 2 ; Aux UART
	ASN PC0, PC0_ASN, C,  3, 3 ; PCI slot 0 interrupt
	ASN PC1, PC1_ASN, C,  4, 3 ; PCI slot 1 interrupt
	ASN PC2, PC2_ASN, C,  5, 3 ; PCI slot 2 interrupt
	ASN ADC, ADC_ASN, C,  6, 4 ; A/D Converter interrupt
	ASN SMC, SMC_ASN, C,  7, 5 ; SMC E/N chip interrupt
	ASN DBG, DBG_ASN, C,  8, 6 ; Debug switch interrupt
	ASN VSY, VSY_ASN, C,  9, 7 ; VSYNC interrupt
;
; Make definitions according to usage.
;
.iif true,..AA,HEX_CONST INTCTL_MAP_INIT ...A	< Chameleon Interrupt Map Register >
.iif ne,...C,HEX_CONST INTCTL_MASK ...C < Chameleon Interrupt Control >
;
	HEX_CONST INTS_ON	0xFF01		< Enable all interrupts >
	HEX_CONST INTS_OFF	0xFF00		< Disable all interrupts >
;
	STR_START diag_params
	STR_ELT	  actual_msb	U32  1	<Actual data read from mem (upper 32 bits)>
	STR_ELT	  actual_lsb	U32  1	<Actual data read from mem (lower 32 bits)>
	STR_ELT	  expected_msb	U32  1  <Expected data (upper 32 bits)>
	STR_ELT	  expected_lsb	U32  1	<Expected data (Lower 32 bits)>
	STR_ELT	  bad_address	U32  1  <Failing address>
	STR_ELT	  subtest	U32  1	<Subtest number>
	STR_END	  diag_params
;
.if true, OUTPUT_LANG == LANG_C
#define WDOG WDOG_T
.endc
REM <	Work RAM>
	ARRAY	WRAM,	U32, 	DRAM_BASE, DRAM_SIZE < Working RAM	>
REM <	EEPROM>
  .ifndf EEPROM_SIZE
	EEPROM_SIZE == BRAM_SIZE ; Guaranteed minimum
  .endc
	ARRAY	EEPROM	U8	BRAM_BASE		EEPROM_SIZE < EEPROM 		>
REM <	BRAM>
	ADDR	BRAM 	U8	BRAM_BASE		< BRAM	(non-cached)	>
	VAR	UNLK_EP VU32	BRAM_UNLK_BASE		< BRAM unlock >
;
	.include idt.mac
	.include nile3.mac
	.include plx9050.mac
	.include cham_lcd.mac
	.include pcireg.mac
.endc		;not_defined, _CHAMELEON_MAC_
@


1.6
log
@Added variable WATCHDOG cuz some .mac files want that.
@
text
@d23 46
a68 33
;/* CPU memory map  Description			PCI Memory     PCI I/O Map */
;/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
;
;/* 0x80000000					0x00000000	---------- */
;/* 0x807fffff	8MB Base Memory (SDRAM)		0x007fffff	---------- */
;
;/* 0x81000000					0x01000000	---------- */
;/* 0x81ffffff	16MB SIMM 1 (FPM DRAM)		0x01ffffff	---------- */
;
;/* 0x82000000					0x02000000	---------- */
;/* 0x82ffffff	16MB SIMM 2 (FPM DRAM)		0x02FFFFFF	---------- */
;
;/* 0xA3000000	(16MB)				----------	0x00000000 */
;/* 0xA3ffffff	PCI master i/o window		----------	0x0000ffff */
;
;/* 0xA4000000  (64MB)				0x04000000	---------- */
;/* 0xA7ffffff  PCI master memory window 1	0x07ffffff	---------- */
;
;/* 0xA8000000	(64MB)				0x08000000	---------- */
;/* 0xAbffffff	PCI master memory window 2	0x0bffffff	---------- */
;
;/* 0xAc000000  (48MB)				0x0c000000	---------- */
;/* 0xAeffffff  unused hole			0x0effffff	---------- */
;
;/* 0xAf000000	(16MB)				----------	---------- */
;/* 0xAf0001ff	Nile 3 register Space		----------	---------- */
;
;/* 0xAf000110					0x03000000	---------- */
;/* 		NILE 3 Mailbox regs		0x03000fff */
;
;/* 0xb0000000	(256MB unusable)		----------	---------- */
;/* 0xbfffffff	Aliases on top of 0xAXXXXXXX	----------	---------- */
;
d129 3
d133 1
@


1.5
log
@Corrected comments.
Corrected bit mask calculation.
@
text
@d267 1
@


1.4
log
@Reworked the ASNC macro since the PCI interrupts work
different than the others.
@
text
@d35 2
a36 2
;/* 0xA3000000	(16MB)				----------	0x03000000 */
;/* 0xA3ffffff	PCI master i/o window		----------	0x03ffffff */
d119 1
d121 1
d123 1
d348 1
a348 1
	...A == ...A + ( ...P << ( 2*map ) )
@


1.3
log
@Set to new interrupt layout.
@
text
@d313 1
a313 1
	.macro ASNC sym, val, bit
d341 5
a345 1
	...A == ...A + ( ...P << ( 2 * (bit) ) )
d388 1
a388 1
	.macro ASN sym, val, typ, bit
d395 2
a396 2
	.iif identical,<typ>,<C>,ASNC sym, num, bit
	.iif identical,<typ>,<c>,ASNC sym, num, bit
d412 10
a421 10
	ASN IOA, IOA_ASN, C,  0 ; Expansion Slot interrupt
	ASN NSS, NSS_ASN, C,  1 ; NSS/Hi-Link interrupt
	ASN URT, URT_ASN, C,  2 ; Aux UART
	ASN PC0, PC0_ASN, C,  3 ; PCI slot 0 interrupt
	ASN PC1, PC1_ASN, C,  4 ; PCI slot 1 interrupt
	ASN PC2, PC2_ASN, C,  5 ; PCI slot 2 interrupt
	ASN ADC, ADC_ASN, C,  6 ; A/D Converter interrupt
	ASN SMC, SMC_ASN, C,  7 ; SMC E/N chip interrupt
	ASN DBG, DBG_ASN, C,  8 ; Debug switch interrupt
	ASN VSY, VSY_ASN, C,  9 ; VSYNC interrupt
@


1.2
log
@Corrected GP_STS bits.
@
text
@d239 10
a248 11
	DEC_CONST B_GPSTS_PCI	3			< (any) PCI slot interrupt >
	DEC_CONST B_GPSTS_AD	4			< A/D interrupt >
	DEC_CONST B_GPSTS_SMC	5			< Ethernet interrupt >
	DEC_CONST B_GPSTS_DBG	6			< Debug switch interrupt >
	DEC_CONST B_GPSTS_VSY	7			< Vsync interrupt >
	DEC_CONST B_GPSTS_VSYIN 8			< VSYNC input >
	DEC_CONST B_GPSTS_BLOW	9			< Battery low indication (1=low) >
	DEC_CONST B_GPSTS_WDOG	10			< WDOG timeout occured >
	DEC_CONST B_GPSTS_PCI0	13			< PCI slot 0 Interrupt >
	DEC_CONST B_GPSTS_PCI1	14			< PCI slot 0 Interrupt >
	DEC_CONST B_GPSTS_PCI2	15			< PCI slot 0 Interrupt >
d411 7
a417 5
	ASN PCI, PCI_ASN, C,  3 ; Any PCI slot interrupt
	ASN ADC, ADC_ASN, C,  4 ; A/D Converter interrupt
	ASN SMC, SMC_ASN, C,  5 ; SMC E/N chip interrupt
	ASN DBG, DBG_ASN, C,  6 ; Debug switch interrupt
	ASN VSY, VSY_ASN, C,  7 ; VSYNC interrupt
@


1.1
log
@Initial revision
@
text
@d244 3
a246 2
	DEC_CONST B_GPSTS_BLOW	8			< Battery low indication (1=low) >
	DEC_CONST B_GPSTS_WDOG	9			< WDOG timeout occured >
@
