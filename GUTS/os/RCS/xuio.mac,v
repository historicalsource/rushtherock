head	1.2;
access;
symbols;
locks; strict;
comment	@;; @;


1.2
date	96.03.05.00.51.20;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	96.02.28.00.43.07;	author shepperd;	state Exp;
branches;
next	;


desc
@Switch definitions for UIO board inputs.
Bit definitions for UIO outputs.
,
@


1.2
log
@Added switch support for mace.
@
text
@USE_MACE   == 0
USE_DMS    == 0
USE_HOCKEY == 0
.if defined,ZOID_GAME
 .if defined,ZOID20_MACE
  .if true, ZOID_GAME == ZOID20_MACE
    USE_MACE == 1
  .endc
 .endc
 .if defined,ZOID20_HOCKEY
  .if true, ZOID_GAME == ZOID20_HOCKEY
   USE_HOCKEY == 1
  .endc
 .endc
 .if defined,ZOID20_DMS
  .if true, ZOID_GAME == ZOID20_DMS
   USE_DMS == 1
  .endc
 .endc
.endc
;
 .if ndf,POT_CNT
	HEX_CONST POT_CNT	0
 .endc
 .if	ne,POT_CNT
	ARRAY	AD_PORTS VU32 XCOM+0x20000 POT_CNT
	VAR	AD_STATUS VU32	XCOM		< AtoD STATUS (XCOM)	>
	VAR	POTL_H	VU32	AD_PORTS	< Joystick H AtoD Ports	>
	VAR	POTL_V	VU32	AD_PORTS+4	< Joystick V AtoD Ports	>
	VAR	POTR_H	VU32	AD_PORTS+8	< Thumb Button		>
	VAR	POTR_V	VU32	AD_PORTS+0x0c	< Trigger		>

	HEX_CONST BA_AD_DONE	3	< AtoD finished	== 1		>
	HEX_CONST MA_AD_DONE	(1<<BA_AD_DONE)
 .endc
;
.if true, USE_HOCKEY || USE_MACE
	HEX_CONST J1_BURST	0x80000000
	HEX_CONST J1_PASS	0x40000000
	HEX_CONST J1_SHOOT	0x20000000
	HEX_CONST J1_RIGHT	0x10000000
	HEX_CONST J1_LEFT	0x08000000
	HEX_CONST J1_DOWN	0x04000000
	HEX_CONST J1_UP		0x02000000
	HEX_CONST J1_START	0x01000000
	HEX_CONST J1_ALL	0xFF000000
	HEX_CONST J1_BITS	<J1_UP|J1_DOWN|J1_LEFT|J1_RIGHT>
	HEX_CONST J2_BURST	0x00800000
	HEX_CONST J2_PASS	0x00400000
	HEX_CONST J2_SHOOT	0x00200000
	HEX_CONST J2_RIGHT	0x00100000
	HEX_CONST J2_LEFT	0x00080000
	HEX_CONST J2_DOWN	0x00040000
	HEX_CONST J2_UP		0x00020000
	HEX_CONST J2_START	0x00010000
	HEX_CONST J2_ALL	0x00FF0000
	HEX_CONST J2_BITS	<J2_UP|J2_DOWN|J2_LEFT|J2_RIGHT>
	HEX_CONST J3_BURST	0x00008000
	HEX_CONST J3_PASS	0x00004000
	HEX_CONST J3_SHOOT	0x00002000
	HEX_CONST J3_RIGHT	0x00001000
	HEX_CONST J3_LEFT	0x00000800
	HEX_CONST J3_DOWN	0x00000400
	HEX_CONST J3_UP		0x00000200
	HEX_CONST J3_START	0x00000100
	HEX_CONST J3_ALL	0x0000FF00
	HEX_CONST J3_BITS	<J3_UP|J3_DOWN|J3_LEFT|J3_RIGHT>
	HEX_CONST J4_BURST	0x00000080
	HEX_CONST J4_PASS	0x00000040
	HEX_CONST J4_SHOOT	0x00000020
	HEX_CONST J4_RIGHT	0x00000010
	HEX_CONST J4_LEFT	0x00000008
	HEX_CONST J4_DOWN	0x00000004
	HEX_CONST J4_UP		0x00000002
	HEX_CONST J4_START	0x00000001
	HEX_CONST J4_ALL	0x000000FF
	HEX_CONST J4_BITS	<J4_UP|J4_DOWN|J4_LEFT|J4_RIGHT>
.endc
REM <	the switches let you do s/t options w/o L/R on stix	>
	HEX_CONST J_LEFT	<J1_LEFT | J2_LEFT | J3_LEFT | J4_LEFT>
	HEX_CONST J_RIGHT	<J1_RIGHT | J2_RIGHT | J3_RIGHT | J4_RIGHT>
	HEX_CONST J_UP		<J1_UP | J2_UP | J3_UP | J4_UP>
	HEX_CONST J_DOWN	<J1_DOWN | J2_DOWN | J3_DOWN | J4_DOWN>
	HEX_CONST JOY_BITS	<J_UP | J_DOWN | J_LEFT | J_RIGHT>
	HEX_CONST JOY_VERT	<J_UP | J_DOWN>
;
.if true, USE_HOCKEY || USE_MACE
;;;;   HOCKEY
	HEX_CONST SW_NEXT	<J1_START|J2_START>	< START >
	HEX_CONST SW_ACTION	<J1_SHOOT|J2_SHOOT>	< SHOOT >
	HEX_CONST SW_EXTRA	<J1_PASS|J2_PASS>	< PASS >
.endc
.if true, USE_DMS
;;;;   DMS's stack
;	HEX_CONST SW_NEXT
;	HEX_CONST SW_ACTION
;	HEX_CONST SW_EXTRA
.endc
;
	HEX_CONST JOY_ALL	<JOY_BITS | SW_NEXT | SW_ACTION>
	HEX_CONST SW_ALL	<SW_ACTION | SW_NEXT | SW_EXTRA>
	HEX_CONST SW_BITS	<J1_ALL|J2_ALL|J3_ALL|J4_ALL>
;
	DEC_CONST B_TEST	24	< Selftest switch is on bit 24 >
;        HEX_CONST BC_AUX_LFT    25       < AUX LEFT Coin switch  >
;        HEX_CONST BC_AUX_RGT    27       < AUX RIGHT Coin switch >
        HEX_CONST B_COINL       25       < COIN LEFT>
        HEX_CONST B_COINR       27       < COIN RIGHT >
.if true, OUTPUT_LANG == LANG_C
#define CN_STATUS (ctl_read_debug(0)^((1<<B_COINL)|(1<<B_COINR)))	/* Coin SWITCHES ADDR */
#define TEST (ctl_read_debug(0)^(1<<B_TEST))
;
.endc

@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
.if true, USE_HOCKEY
d87 1
a87 1
.if true, USE_HOCKEY
a92 6
.if true, USE_MACE
;;;;   MACE
	HEX_CONST SW_NEXT	<SW_P1_1>	<  >
	HEX_CONST SW_ACTION	<SW_P1_2>	<  >
	HEX_CONST SW_EXTRA	<SW_P1_START>	<  >
.endc
d95 3
a97 3
	HEX_CONST SW_NEXT	<SW_P1_1>	< RED >
	HEX_CONST SW_ACTION	<SW_P1_5>	< BLUE >
	HEX_CONST SW_EXTRA	<SW_P1_4>	< WHITE >
@
