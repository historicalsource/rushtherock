head	1.24;
access;
symbols;
locks; strict;
comment	@;; @;


1.24
date	97.01.04.00.17.02;	author shepperd;	state Exp;
branches;
next	1.23;

1.23
date	97.01.03.22.50.21;	author shepperd;	state Exp;
branches;
next	1.22;

1.22
date	96.09.12.21.12.03;	author shepperd;	state Exp;
branches;
next	1.21;

1.21
date	96.08.28.03.59.17;	author shepperd;	state Exp;
branches;
next	1.20;

1.20
date	96.08.08.23.16.36;	author forrest;	state Exp;
branches;
next	1.19;

1.19
date	96.07.31.04.24.02;	author forrest;	state Exp;
branches;
next	1.18;

1.18
date	96.06.29.20.50.05;	author shepperd;	state Exp;
branches;
next	1.17;

1.17
date	96.06.18.22.25.58;	author forrest;	state Exp;
branches;
next	1.16;

1.16
date	96.05.30.04.31.38;	author shepperd;	state Exp;
branches;
next	1.15;

1.15
date	96.05.28.17.56.20;	author forrest;	state Exp;
branches;
next	1.14;

1.14
date	96.05.27.22.54.36;	author forrest;	state Exp;
branches;
next	1.13;

1.13
date	96.05.24.22.00.08;	author forrest;	state Exp;
branches;
next	1.12;

1.12
date	96.05.14.19.39.33;	author forrest;	state Exp;
branches;
next	1.11;

1.11
date	96.05.08.19.27.43;	author forrest;	state Exp;
branches;
next	1.10;

1.10
date	96.05.05.22.36.52;	author forrest;	state Exp;
branches;
next	1.9;

1.9
date	96.04.26.20.22.04;	author shepperd;	state Exp;
branches;
next	1.8;

1.8
date	96.04.23.16.48.33;	author forrest;	state Exp;
branches;
next	1.7;

1.7
date	96.04.16.02.59.24;	author shepperd;	state Exp;
branches;
next	1.6;

1.6
date	96.04.15.20.08.30;	author forrest;	state Exp;
branches;
next	1.5;

1.5
date	96.04.15.02.19.52;	author forrest;	state Exp;
branches;
next	1.4;

1.4
date	96.04.10.18.30.30;	author shepperd;	state Exp;
branches;
next	1.3;

1.3
date	96.04.10.01.01.05;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	96.04.10.00.03.43;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	96.04.07.00.05.54;	author shepperd;	state Exp;
branches;
next	;


desc
@Phoenix devsys support files
@


1.24
log
@Conditionalled the definition of IO_XTAL_FREQ
@
text
@.if ndf, _PHOENIX_MAC_
_PHOENIX_MAC_ == 0
.if ndf, _CONSTANTS_MAC_
  .warn ;You should .include constants.mac before including hcr4k.mac
  .include constants.mac
.endc
.if ndf, _PPTYPES_MAC_
  .warn ;You should .include types.mac before including hcr4kk.mac
  .include pptypes.mac
.endc
;
.if ndf,HOST_BOARD
	HEX_CONST HOST_BOARD	PHOENIX
.endc
.if ndf,NUCLEUS_OS
	HEX_CONST NUCLEUS_OS	0
.endc
.if ndf,PROCESSOR
	HEX_CONST PROCESSOR	MIPS4700
.endc
;
REM <	WMS Phoenix board specific definitions>
;
; Little-Endian Byte offset is (bit offset)>>3
	HEX_CONST WORD0_OFFS 0
	HEX_CONST WORD32_OFFS 4
	HEX_CONST SHORT0_OFFS 0
	HEX_CONST SHORT16_OFFS 2
	HEX_CONST BYTE0_OFFS 0
	HEX_CONST BYTE8_OFFS 1
	HEX_CONST BYTE16_OFFS 2
	HEX_CONST BYTE24_OFFS 3
; Little-Endian Byte offset (in 64 bit address space) is (bit offset)>>3
	HEX_CONST HWORD0_OFFS 0
	HEX_CONST HWORD32_OFFS 4
	HEX_CONST HSHORT0_OFFS 0
	HEX_CONST HSHORT16_OFFS 2
	HEX_CONST HSHORT32_OFFS 4
	HEX_CONST HSHORT48_OFFS 6
	HEX_CONST HBYTE0_OFFS 0
	HEX_CONST HBYTE8_OFFS 1
	HEX_CONST HBYTE16_OFFS 2
	HEX_CONST HBYTE24_OFFS 3
	HEX_CONST HBYTE32_OFFS 4
	HEX_CONST HBYTE40_OFFS 5
	HEX_CONST HBYTE48_OFFS 6
	HEX_CONST HBYTE56_OFFS 7
REMB
REMM <The R4k virtual memory map appears as the	following:		>
REME
;  
	HEX_CONST MEM_KUSEG	0x00000000 < -0x7FFFFFFF (  2GB, mapped, cached)	>
	HEX_CONST MEM_KSEG0	0x80000000 < -0x9FFFFFFF phys 00000000-1FFFFFFF (512MB, unmapped, cached)	>
	HEX_CONST MEM_KSEG1	0xA0000000 < -0xBFFFFFFF phys 00000000-1FFFFFFF (512MB, unmapped, uncached)	>
	HEX_CONST MEM_KSSEG	0xC0000000 < -0xDFFFFFFF (512MB, mapped)		>
	HEX_CONST MEM_KSEG3	0xE0000000 < -0xFFFFFFFF (512MB, mapped)		>
;
	HEX_CONST DRAM_BASE	0x80000000 < DRAM phys 0x00000000-0x07FFFFFF >
	HEX_CONST DRAM_BASEnc	0xA0000000 < DRAM phys 0x00000000-0x07FFFFFF (uncached) >
.if not_defined, DRAM_SIZE
	HEX_CONST DRAM_SIZE	0x00800000 < DRAM size (8Mb) >
.endc
	HEX_CONST PCI_MEM_BASE	0xA8000000 < -0x29FFFFFF PCI Memory bus (uncached) >
	HEX_CONST PCI_IO_BASE	0xAA000000 < -0x2BFFFFFF PCI I/O bus (uncached) >
	HEX_CONST GALILEO_BOOT_BASE 0xB4000000 < -0xB40FFFFF GALILEO registers right after reset >
	HEX_CONST GALILEO_BASE	0xAC000000 < -0x2C0FFFFF GALILEO registers (uncached) >
	HEX_CONST EXPAN0_BASE	0xB0000000 < -0x31FFFFFF Expansion connector 0 (PCS0, uncached) >
	HEX_CONST EXPAN1_BASE	0xB2000000 < -0x33FFFFFF Expansion connector 1 (PCS1, uncached) >
	HEX_CONST EXPAN2_BASE	0xB4000000 < -0x34FFFFFF Expansion connector 2 (PCS2, uncached) >
	HEX_CONST OBIO_BASE	0xB5000000 < -0x35FFFFFF On board I/O base (uncached) >
	HEX_CONST EXPAN3_BASE	0xB8000000 < -0x3FBFFFFF Expansion connector 3 (PCS3, uncached) >
	HEX_CONST GALILEO_CS0	EXPAN0_BASE
	HEX_CONST GALILEO_CS1	EXPAN1_BASE
	HEX_CONST GALILEO_CS2	EXPAN2_BASE
	HEX_CONST GALILEO_CS3	EXPAN3_BASE
	HEX_CONST PROM_BASEnc	0xBFC00000 < -0xBFFFFFFF PROM phys (uncached) >
	HEX_CONST PROM_BASE	0x9FC00000 < -0x9FFFFFFF PROM phys (cached) >
	HEX_CONST CACHE_MEM_BASE DRAM_BASE+0x01000000
;
	HEX_CONST IOASIC_BASE	OBIO_BASE+0x00000000
	HEX_CONST BUS_SCALE	8
.if not_defined,IO_XTAL_FREQ
	DEC_CONST IO_XTAL_FREQ	16384000	< Most Phoenix boards have 16.384MHZ IOASIC xtal's >
.endc
	.include ioasic.mac
;
	HEX_CONST INTCTL_BASE	OBIO_BASE+0x00080000
	HEX_CONST INTCTL_IE	INTCTL_BASE+0x00	< bits 15:0 (rw) = Interrupt enable register >
	HEX_CONST INTCTL_MAPA	INTCTL_BASE+0x08	< bits 15:0 (rw) = Interrupt Map register A >
	HEX_CONST INTCTL_MAPB	INTCTL_BASE+0x10	< bits 15:0 (rw) = Interrupt Map register B >
	HEX_CONST INTCTL_CAUSE	INTCTL_BASE+0x18	< bits 15:0 (ro) = Interrupt cause register >
	HEX_CONST INTCTL_STS	INTCTL_BASE+0x20	< bits 15:0 (ro) = Interrupt polled status >
	HEX_CONST INTCTL_GPSTS	INTCTL_BASE+0x28	< bits 15:0 (rw) = Interrupt GP register >
	DEC_CONST B_INTCTL_GPSTS_BLOW		13	< Battery low indication (1=low) >
	HEX_CONST INTCTL_NMI	INTCTL_BASE+0x30	< bits  3:0 (rw) = NMI select/enable register >
	HEX_CONST MISCPLD_BASE	OBIO_BASE+0x00100000
	HEX_CONST MISC_HCTL	MISCPLD_BASE+0x00	< bits 15:0 (ro) = Host control register >
	HEX_CONST MISC_HCMD	MISCPLD_BASE+0x04	< bits 15:0 (ro) = Host command register >
	HEX_CONST MISC_HWFIFO	MISCPLD_BASE+0x08	< bits 15:0 (ro) = Host write data FIFO >
	HEX_CONST MISC_HRFIFO	MISCPLD_BASE+0x0C	< bits 15:0 (wo) = Host read data FIFO >
	HEX_CONST MISC_TCTL	MISCPLD_BASE+0x10	< bits 15:0 (rw) = Target control register >
	HEX_CONST MISC_TRESP	MISCPLD_BASE+0x14	< bits 15:0 (rw) = Target response register >
	HEX_CONST MISC_TSTS	MISCPLD_BASE+0x18	< bits 15:0 (ro) = Target status register >
	HEX_CONST MISC_TTESTP	MISCPLD_BASE+0x1C	< bits 15:0 (rw) = Target test point register >
	HEX_CONST NSS_CTL	MISCPLD_BASE+0x20	< bits 15:0 (rw) = NSS control register >
	HEX_CONST NSS_GAME_CTL	MISCPLD_BASE+0x24	< bits 15:0 (ro) = NSS game control register >
	HEX_CONST NSS_FIFO_STS	MISCPLD_BASE+0x28	< bits 15:0 (ro) = NSS FIFO status >
	HEX_CONST NSS_GAMEINT	MISCPLD_BASE+0x2C	< bits 15:0 (ro) = NSS Game interrupt status >
	HEX_CONST NSS_FIFO_DTA	MISCPLD_BASE+0x30	< bits 15:0 (rw) = NSS read/write FIFO >
	HEX_CONST NSS_FIFO_RST	MISCPLD_BASE+0x34	< bits 15:0 (wo) = NSS FIFO reset register >
	HEX_CONST MISC_STATUS	MISCPLD_BASE+0x38	< bits 15:0 (ro) = Misc status register >
	HEX_CONST MISC_CONFIG	MISCPLD_BASE+0x3C	< bits 15:0 (rw) = Misc configuration reg >
	HEX_CONST MISC_CONFIG_NSS_RESET 0x10		< NSS reset bit >
	HEX_CONST WATCHDOG	OBIO_BASE+0x00180000	< bits  x:x (wo) = Watch dog timer > 
	HEX_CONST COMBO_UART0	OBIO_BASE+0x00200000	< bits  7:0 (rw) = 16552 UART channel 0 >
	HEX_CONST COMBO_UART1	OBIO_BASE+0x00280000	< bits  7:0 (rw) = 16552 UART channel 1 >
	HEX_CONST COMBO_PARA	OBIO_BASE+0x00300000	< bits  7:0 (rw) = 16552 UART parallel port >
	HEX_CONST A_TO_D	OBIO_BASE+0x00380000	< bits  7:0 (rw) = A/D converter >
	HEX_CONST SND_STREAM	OBIO_BASE+0x00400000	< bits 15:0 (wo) = Sound system FIFO >
	HEX_CONST BRAM_BASE	OBIO_BASE+0x00480000	< bits  7:0 (rw) = NVRAM bytes >
.if not_defined,BRAM_SIZE
	HEX_CONST BRAM_SIZE	(32768*4)   		< BRAM size (32k words)					>
.endc
	HEX_CONST BRAM_UNLK	OBIO_BASE+0x00500000	< bits  x:x (wo) = BRAM unlock >
	HEX_CONST IO_RESET	OBIO_BASE+0x00800000	< bits  0:0 (rw) = IOASIC reset bit >
	HEX_CONST PCI_RESET	OBIO_BASE+0x00880000	< bits  0:0 (rw) = PCI bus reset >
;
.if not_defined,RAMROM_BASE
	HEX_CONST RAMROM_BASE	EXPAN2_BASE	< 8MB of RamRom starts here >
.endc
;
	.include galileo.mac			; Get galileo defines
;
	DEC_CONST SWINT0_LVL	0		< Software interrupt 0 >
	DEC_CONST SWINT1_LVL	1		< Software interrupt 1 >
	DEC_CONST INT0_LVL	2		< Interrupt Control PLD (pin 81) >
	DEC_CONST INT1_LVL	3		< Interrupt Control PLD (pin 85) >
	DEC_CONST INT2_LVL	4		< Interrupt Control PLD (pin 82) >
	DEC_CONST INT3_LVL	5		< Interrupt Control PLD (pin 83) >
	DEC_CONST INT4_LVL	6		< Interrupt Control PLD (pin 86) >
	DEC_CONST INT5_LVL	7		< Interrupt Control PLD (pin 87) >
;
	DEC_CONST XBUS0_LVL	8		< Fake levels >
	DEC_CONST XBUS1_LVL	9
	DEC_CONST XBUS2_LVL	10
	DEC_CONST XBUS3_LVL	11
	DEC_CONST IOASIC_LVL	12
;
;	DEC_CONST TIMER_LVL	INT5_LVL	< CPU timer interrupt >
;
;
; If using the XBUS adaptor in an expansion slot, define XPAN_SLOT in config.mac
;
.if defined, XPAN_SLOT
 .iif ndf,XBUS_INT,.error ; Assign XBUS_INT in config.mac
 .if true, XPAN_SLOT == 0
	XS0_ASN == XBUS_INT			; XBUS interrupt assignment
	HEX_CONST XBUS_BASE	EXPAN0_BASE	< XBUS base >
 .endc
 .if true, XPAN_SLOT == 1
	XS1_ASN == XBUS_INT			; XBUS interrupt assignment
	HEX_CONST XBUS_BASE	EXPAN1_BASE	< XBUS base >
 .endc
 .if true, XPAN_SLOT == 2
	XS2_ASN == XBUS_INT			; XBUS interrupt assignment
	HEX_CONST XBUS_BASE	EXPAN2_BASE	< XBUS base >
 .endc
 .if true, XPAN_SLOT == 3
	XS3_ASN == XBUS_INT			; XBUS interrupt assignment
	HEX_CONST XBUS_BASE	EXPAN3_BASE	< XBUS base >
 .endc
 .iif not_defined,XBUS_BASE,.error ; Invalid Expansion Slot XPAN_SLOT
	HEX_CONST XBUS_SLOT0	XBUS_BASE+0x0000000	< XBUS Slot 0 >
	HEX_CONST XBUS_SLOT1	XBUS_BASE+0x0400000	< XBUS Slot 1 >
	HEX_CONST XBUS_SLOT2	XBUS_BASE+0x0800000	< XBUS Slot 2 >
	HEX_CONST XBUS_SLOT3	XBUS_BASE+0x0C00000	< XBUS Slot 3 >
	HEX_CONST XBUS_SLOT4	XBUS_BASE+0x01000000	< XBUS Slot 4 >
	HEX_CONST XBUS_SLOT5	XBUS_BASE+0x01400000	< XBUS Slot 5 >
	HEX_CONST XBUS_SLOT6	XBUS_BASE+0x01800000	< XBUS Slot 6 >
	HEX_CONST XBUS_SLOT7	XBUS_BASE+0x01C00000	< XBUS Slot 7 >
.endc
;
;
; macro ASNP - assign Phoenix interrupt
;
; usage:  ASNP sym, val, bit
;
;	sym - symbol used by VDF in phx_vecs.mac, derived from the
;	      descriptions given in the Phoenix Development System
;	      Programmers Guide.
;
;	val - CPU interrupt pin, set in config.mac by the user to
;	      map and/or enable the specific interrupt as follows...
;
;	      XS0_ASN == 2  Assigns and maps Phoenix Expansion Slot 0
;			    interrupt to CPU interrupt pin 2.
;	      XS1_ASN == 3  Assigns and maps Phoenix Expansion Slot 1
;			    interrupt to CPU interrupt pin 3.
;
;	      The valid CPU interrupt pins are 2, 3, 4 and 5 for Phoenix.
;
;	bit - bit number in registers INTCTL_IE, INTCTL_CAUSE and INTCTL_STS.
;
;
; synopsis:  Validates the parameter val, and sets sym to true or false to be
;	     used by macro VDF in phx_vecs.mac
;	     If true, defines sym_LVL to equal INTval_LVL, and "validates" the
;	     bit assignment.  The bit values below are valid according to the
;	     documentation available 4/14/96.  Defines B_PIC_sym and sym_NOTES
;	     to be used by the interrupt installer unless sym_NOTES is defined
;	     previously in config.mac.  Accumulates the appropriate bits for
;	     defining the constants INTCTL_MAPA_INIT, INTCTL_MAPB_INIT, and
;	     PHOENIX_INTCTL_MASK.
;
	.macro ASNP sym, val, bit
	...0 == 0
	.if identical,<val>,<2>
	 ...0 == 1
	 ...P == 0
	.endc
	.if identical,<val>,<3>
	 ...0 == 1
	 ...P == 1
	.endc
	.if identical,<val>,<4>
	 ...0 == 1
	 ...P == 2
	.endc
	.if identical,<val>,<5>
	 ...0 == 1
	 ...P == 3
	.endc
	sym == ...0
	.if true, ...0
	 sym'_LVL == INT'val'_LVL
	.iff
	 .iif b,val,.mexit 2
	 .iif identical,<val>,<NULL>,.mexit 2
	 .error ; macro ASN - parameter val out of range
	.endc
	.iif b,<bit>,.error ; macro ASN - parameter 'bit' missing
	.iif lt,bit,.error ; macro ASN - parameter bit out of range
	.iif gt,bit-14,.error ; macro ASN - parameter bit out of range
	DEC_CONST B_PIC_'sym	('bit')	< Phoenix Interrupt Control >
	.iif ndf,sym'_NOTES,HEX_CONST sym'_NOTES (1<<bit)
	...C == ...C + ( 1 << bit )
	.if gt,bit-7
	 ...B == ...B + ( ...P << ( 2 * (bit-8) ) )
	 ..BB == 1
	.iff
	 ...A == ...A + ( ...P << ( 2 * (bit) ) )
	 ..AA == 1
	.endc
	.mexit 2
	.endm
;
;
; macro ASNG - assign Galileo interrupt
;
; usage:  ASNG sym, val, bit
;
;	sym - symbol used by VDF in phx_vecs.mac, derived from the
;	      descriptions given in the GT-64010 Data Sheet.
;
;	val - CPU interrupt pin, set in config.mac by the user to
;	      map and/or enable the specific interrupt as follows...
;
;	      PC0_ASN == 0  Enables the Galileo interrupt from the PCI to
;			    the CPU in Galileo cause register bit 26.
;
;	      The only valid CPU interrupt pin is 0 for the Galileo.
;
;	bit - bit number in registers GALILEO_INT_CAUSE and GALILEO_CPU_I_ENA.
;
;
; synopsis:  Validates the parameter val, and sets sym to true or false to be
;	     used by macro VDF in phx_vecs.mac
;	     If true, defines sym_LVL to equal INTval_LVL, and "validates" the
;	     bit assignment.  The bit values below are valid according to the
;	     documentation available 4/14/96.  Defines B_GIC_sym and sym_NOTES
;	     to be used by the interrupt installer unless sym_NOTES is defined
;	     previously in config.mac.  Accumulates the appropriate bits for
;	     defining the constant GALILEO_INTCTL_MASK.
;
	.macro ASNG sym, val, bit
	...0 == 0
	.iif identical,<val>,<0>,...0 == 1
	sym == ...0
	.if true, ...0
	 sym'_LVL == INT'val'_LVL
	.iff
	 .iif b,val,.mexit 2
	 .iif identical,<val>,<NULL>,.mexit 2
	 .error ; macro ASN - parameter val out of range
	.endc
	.iif b,<bit>,.error ; macro ASN - parameter 'bit' missing
	.iif le,bit,.error ; macro ASN - parameter bit out of range
	.iif gt,bit-29,.error ; macro ASN - parameter bit out of range
	DEC_CONST B_GIC_'sym	('bit')	< Galileo Interrupt Control >
	.iif ndf,sym'_NOTES,HEX_CONST sym'_NOTES (1<<bit)
	...D == ...D + ( 1 << bit )
	.iif ne,GALILEO_CPU_INT_m&...D,.error ; macro ASN - parameter bit out of range
	.mexit 2
	.endm
;
;
; macro ASNGM - assign Galileo interrupt mask
;
; usage:  ASNGM sym, val, mask
;
;	sym - symbol used by VDF in phx_vecs.mac, derived from the
;	      descriptions given in the GT-64010 Data Sheet.
;
;	val - CPU interrupt pin, set in config.mac by the user to
;	      map and/or enable the specific interrupt as follows...
;
;	      PC0_ASN == 0  Enables the Galileo interrupt from the PCI to
;			    the CPU in Galileo cause register bit 26.
;
;	      The only valid CPU interrupt pin is 0 for the Galileo.
;
;	mask - bit mask in registers GALILEO_INT_CAUSE and GALILEO_CPU_I_ENA.
;
; synopsis:  Validates the parameter val, and sets sym to true or false to be
;	     used by macro VDF in phx_vecs.mac
;	     If true, defines sym_LVL to equal INTval_LVL, and "validates" the
;	     mask.  The mask values below are valid according to the
;	     documentation available 4/14/96.  Defines sym_NOTES
;	     to be used by the interrupt installer unless sym_NOTES is defined
;	     previously in config.mac.  Accumulates the appropriate bits for
;	     defining the constant GALILEO_INTCTL_MASK.
;
	.macro ASNGM sym, val, mask
	...0 == 0
	.iif identical,<val>,<0>,...0 == 1
	sym == ...0
	.if true, ...0
	 sym'_LVL == INT'val'_LVL
	.iff
	 .iif b,val,.mexit 2
	 .iif identical,<val>,<NULL>,.mexit 2
	 .error ; macro ASN - parameter val out of range
	.endc
	.iif b,<mask>,.error ; macro ASN - parameter 'mask' missing
	.iif ndf,sym'_NOTES,HEX_CONST sym'_NOTES (mask)
	...D == ...D | ( mask )
	.iif ne,GALILEO_CPU_INT_m&...D,.error ; macro ASN - parameter mask out of range
	.mexit 2
	.endm
;
;
; macro ASNL - assign Logical interrupt level
;
; usage:  ASNL sym, val
;
;	sym - symbol used by GUTS which needs to be connected to a
;	      Phoenix or a Galileo interrupt.  The symbol XBUS is
;	      defined below and assigned to the Expansion Slot Dave
;	      is currently using.
;
;	val - previously defined symbol used by VDF in phx_vecs.mac,
;	      used here to make the logical connection by equating
;	      sym to val, and by equating sym_LVL to val_LVL if val
;	      is true.
;
;
	.macro ASNL sym, val
	.if df,val
	 sym == val
	 .iif ne,val,sym'_LVL == val'_LVL
	 .iif ndf,sym'_NOTES,HEX_CONST sym'_NOTES val'_NOTES
	.endc
	.mexit 2
	.endm
;
;
; macro ASN - assign Phoenix, Galileo, or Logical interrupt
;
; usage:  ASN sym, val, typ, bit
;
;	sym - symbol used by VDF in phx_vecs.mac, derived from the
;	      descriptions given in the Phoenix Development System
;	      Programmers Guide and the GT-64010 Data Sheet.
;
;	val - CPU interrupt pin, set in config.mac by the user to
;	      map and/or enable the specific interrupt as follows...
;
;	      PC0_ASN == 0  Enables the Galileo interrupt from the PCI to
;			    the CPU in Galileo cause register bit 26.
;			    The only valid CPU interrupt pin is 0 for the
;			    Galileo.
;	      XS0_ASN == 2  Assigns and maps Phoenix Expansion Slot 0
;			    interrupt to CPU interrupt pin 2.
;	      XS1_ASN == 3  Assigns and maps Phoenix Expansion Slot 1
;			    interrupt to CPU interrupt pin 3.
;
;	typ - P or p for Phoenix; G or g for Galileo; L or l for Logical.
;
;	bit - bit number in the appropriate cause, enable, or status register.
;	      This field is not used if typ is L or l.
;
	.macro ASN sym, val, typ, bit
	.if ndf,val
	 .define num NULL
	.iff
	 .define num \val
	 ...I == val
	.endc
	.iif identical,<typ>,<P>,ASNP sym, num, bit
	.iif identical,<typ>,<p>,ASNP sym, num, bit
	.iif identical,<typ>,<G>,ASNG sym, num, bit
	.iif identical,<typ>,<g>,ASNG sym, num, bit
	.iif identical,<typ>,<M>,ASNGM sym, num, bit
	.iif identical,<typ>,<m>,ASNGM sym, num, bit
	.iif identical,<typ>,<L>,ASNL sym, val
	.iif identical,<typ>,<l>,ASNL sym, val
	.error ; macro ASN - bad parameter 'typ'
	.endm
;
; Symbols set by the ASN macros to indicate usage - see below.
;
	...A == 0
	..AA == 0
	...B == 0
	..BB == 0
	...C == 0
	...D == 0
	...I == -1
;
	ASN XS0, XS0_ASN, P,  0 ; Expansion Slot 0 interrupt
	ASN XS1, XS1_ASN, P,  1 ; Expansion Slot 1 interrupt
	ASN XS2, XS2_ASN, P,  2 ; Expansion Slot 2 interrupt
	ASN XS3, XS3_ASN, P,  3 ; Expansion Slot 3 interrupt
	ASN MIO, MIO_ASN, P,  4 ; Miscellaneous I/O interrupt
	ASN CU1, CU1_ASN, P,  5 ; Combo UART 1 interrupt
	ASN CU2, CU2_ASN, P,  6 ; Combo UART 2 interrupt
	ASN CPP, CPP_ASN, P,  7 ; Combo Parallel Port interrupt
	ASN PCA, PCA_ASN, P,  8 ; PCI A interrupt
	ASN PCB, PCB_ASN, P,  9 ; PCI B interrupt
	ASN PCC, PCC_ASN, P, 10 ; PCI C interrupt
	ASN VSY, VSY_ASN, P, 11 ; PCI D interrupt (VSYNC interrupt)
	ASN IDE, IDE_ASN, P, 12 ; IDE interrupt
	ASN IOA, IOA_ASN, P, 13 ; I/O Asic interrupt
	ASN ADC, ADC_ASN, P, 14 ; A/D Converter interrupt
;
	ASN GAL, GAL_ASN, M, 0x001FF000 ; Any Galileo Error
	ASN MOE, MOE_ASN, G,  1 ; Galileo MemOut
	ASN DOE, DOE_ASN, G,  2 ; Galileo DMAOut
	ASN COE, COE_ASN, G,  3 ; Galileo CPUOut
	ASN DM0, DM0_ASN, G,  4 ; Galileo DMA0Comp
	ASN DM1, DM1_ASN, G,  5 ; Galileo DMA1Comp
	ASN DM2, DM2_ASN, G,  6 ; Galileo DMA2Comp
	ASN DM3, DM3_ASN, G,  7 ; Galileo DMA3Comp
	ASN TM0, TM0_ASN, G,  8 ; Galileo T0Exp
	ASN TM1, TM1_ASN, G,  9 ; Galileo T1Exp
	ASN TM2, TM2_ASN, G, 10 ; Galileo T2Exp
	ASN TM3, TM3_ASN, G, 11 ; Galileo T3Exp
	ASN MRE, MRE_ASN, G, 12 ; Galileo MasRdErr
	ASN SWE, SWE_ASN, G, 13 ; Galileo SlvWrErr
	ASN MWE, MWE_ASN, G, 14 ; Galileo MasWrErr
	ASN SRE, SRE_ASN, G, 15 ; Galileo SlvRdErr
	ASN AEP, AEP_ASN, G, 16 ; Galileo AddrErr
	ASN MEP, MEP_ASN, G, 17 ; Galileo MemErr
	ASN MAS, MAS_ASN, G, 18 ; Galileo MasAbort
	ASN TAR, TAR_ASN, G, 19 ; Galileo TarAbort
	ASN RTY, RTY_ASN, G, 20 ; Galileo RetryCtr
	ASN PC0, PC0_ASN, G, 26 ; Galileo PCI Interrupt
	ASN PC1, PC1_ASN, G, 27 ; Galileo PCI Interrupt
	ASN PC2, PC2_ASN, G, 28 ; Galileo PCI Interrupt
	ASN PC3, PC3_ASN, G, 29 ; Galileo PCI Interrupt
;
; Make definitions according to usage.
;
.iif true,..AA,HEX_CONST INTCTL_MAPA_INIT ...A	< Phoenix Interrupt Map Register A >
.iif true,..BB,HEX_CONST INTCTL_MAPB_INIT ...B	< Phoenix Interrupt Map Register B >
.iif ne,...C,HEX_CONST PHOENIX_INTCTL_MASK ...C	< Phoenix Interrupt Control >
.iif ne,...D,HEX_CONST GALILEO_INTCTL_MASK ...D	< Galileo Interrupt Control >
.iif true,...I >= 0,DEC_CONST GALILEO_LVL ...I	< Galileo Error interrupt level >
;
;
; If using the XBUS adaptor in an expansion slot, define XPAN_SLOT in config.mac
;
.if defined, XPAN_SLOT
 .if true, XPAN_SLOT == 0
	ASN XBUS, XS0, L,
 .endc
 .if true, XPAN_SLOT == 1
	ASN XBUS, XS1, L,
 .endc
 .if true, XPAN_SLOT == 2
	ASN XBUS, XS2, L,
 .endc
 .if true, XPAN_SLOT == 3
	ASN XBUS, XS3, L,
 .endc
.endc
;
	HEX_CONST INTS_ON	0xFF01		< Enable all interrupts >
	HEX_CONST INTS_OFF	(INTS_ON&~1)	< Disable all interrupts >
;
	STR_START diag_params
	STR_ELT	  actual_msb	U32  1	<Actual data read from mem (upper 32 bits)>
	STR_ELT	  actual_lsb	U32  1	<Actual data read from mem (lower 32 bits)>
	STR_ELT	  expected_msb	U32  1  <Expected data (upper 32 bits)>
	STR_ELT	  expected_lsb	U32  1	<Expected data (Lower 32 bits)>
	STR_ELT	  bad_address	U32  1  <Failing address>
	STR_ELT	  subtest	U32  1	<Subtest number>
	STR_END	  diag_params
;
.if true, OUTPUT_LANG == LANG_C
#define WDOG *(VU32 *)WATCHDOG
.endc
REM <	Work RAM>
	ARRAY	WRAM,	U32, 	DRAM_BASE, DRAM_SIZE < Working RAM	>
REM <	EEPROM>
  .ifndf EEPROM_SIZE
	EEPROM_SIZE == BRAM_SIZE ; Guaranteed minimum
  .endc
	ARRAY	EEPROM	U8	BRAM_BASE		EEPROM_SIZE < EEPROM 		>
REM <	BRAM>
	ADDR	BRAM 	U8	BRAM_BASE		< BRAM	(non-cached)	>
	VAR	UNLK_EP VU32	BRAM_UNLK		< BRAM unlock >
;
	.include idt.mac
.endc 		;_PHOENIX_MAC_

@


1.23
log
@Added IO_XTAL_FREQ definition since Phoenix boards do not
have the default IOASIC xtal frequency of 16.667MHZ.
@
text
@d82 1
d84 1
@


1.22
log
@Conditionalled definition of RAMROM_BASE.
@
text
@d82 1
@


1.21
log
@Added GALILEO_CSx constants.
@
text
@d125 1
d127 1
@


1.20
log
@Defined B_INTCTL_GPSTS_BLOW battery low bit.
@
text
@d72 4
@


1.19
log
@Changed to include ioasic.mac
@
text
@d87 1
@


1.18
log
@Renamed PCD interrupt to VSY.
@
text
@d77 3
a79 120
	HEX_CONST IO_DIPSW	IOASIC_BASE+0x00	< bits 15:0 (ro) = dip switches >
	HEX_CONST DIPSW0	0x00000001		< dip switch 0 >
	HEX_CONST DIPSW1	0x00000002		< dip switch 1 >
	HEX_CONST DIPSW2	0x00000004		< dip switch 2 >
	HEX_CONST DIPSW3	0x00000008		< dip switch 3 >
	HEX_CONST DIPSW4	0x00000010		< dip switch 4 >
	HEX_CONST DIPSW5	0x00000020		< dip switch 5 >
	HEX_CONST DIPSW6	0x00000040		< dip switch 6 >
	HEX_CONST DIPSW7	0x00000080		< dip switch 7 >
	HEX_CONST DIPSW8	0x00000100		< dip switch 8 >
	HEX_CONST DIPSW9	0x00000200		< dip switch 9 >
	HEX_CONST DIPSW10	0x00000400		< dip switch 10 >
	HEX_CONST DIPSW11	0x00000800		< dip switch 11 >
	HEX_CONST DIPSW12	0x00001000		< dip switch 12 >
	HEX_CONST DIPSW13	0x00002000		< dip switch 13 >
	HEX_CONST DIPSW14	0x00004000		< dip switch 14 >
	HEX_CONST DIPSW15	0x00008000		< dip switch 15 >
	HEX_CONST IO_MISC	IOASIC_BASE+0x08	< bits 15:0 (ro) = misc inputs >
	HEX_CONST MI0		0x00000001		< miscellaneos input 0 >
	HEX_CONST MI1		0x00000002		< miscellaneos input 1 >
	HEX_CONST MI2		0x00000004		< miscellaneos input 2 >
	HEX_CONST MI3		0x00000008		< miscellaneos input 3 >
	HEX_CONST MI4		0x00000010		< miscellaneos input 4 >
	HEX_CONST MI5		0x00000020		< miscellaneos input 5 >
	HEX_CONST MI6		0x00000040		< miscellaneos input 6 >
	HEX_CONST MI7		0x00000080		< miscellaneos input 7 >
	HEX_CONST MI8		0x00000100		< miscellaneos input 8 >
	HEX_CONST MI9		0x00000200		< miscellaneos input 9 >
	HEX_CONST MI10		0x00000400		< miscellaneos input 10 >
	HEX_CONST MI11		0x00000800		< miscellaneos input 11 >
	HEX_CONST MI12		0x00001000		< miscellaneos input 12 >
	HEX_CONST MI13		0x00002000		< miscellaneos input 13 >
	HEX_CONST MI14		0x00004000		< miscellaneos input 14 >
	HEX_CONST MI15		0x00008000		< miscellaneos input 15 >
	HEX_CONST IO_PLAYER_21	IOASIC_BASE+0x10	< bits 15:0 (ro) = player 1 and player 2 inputs >
	HEX_CONST P1_0		0x00000001		< player 1 switch 0 >
	HEX_CONST P1_1		0x00000002		< player 1 switch 1 >
	HEX_CONST P1_2		0x00000004		< player 1 switch 2 >
	HEX_CONST P1_3		0x00000008		< player 1 switch 3 >
	HEX_CONST P1_4		0x00000010		< player 1 switch 4 >
	HEX_CONST P1_5		0x00000020		< player 1 switch 5 >
	HEX_CONST P1_6		0x00000040		< player 1 switch 6 >
	HEX_CONST P1_7		0x00000080		< player 1 switch 7 >
	HEX_CONST P2_0		0x00000100		< player 2 switch 0 >
	HEX_CONST P2_1		0x00000200		< player 2 switch 1 >
	HEX_CONST P2_2		0x00000400		< player 2 switch 2 >
	HEX_CONST P2_3		0x00000800		< player 2 switch 3 >
	HEX_CONST P2_4		0x00001000		< player 2 switch 4 >
	HEX_CONST P2_5		0x00002000		< player 2 switch 5 >
	HEX_CONST P2_6		0x00004000		< player 2 switch 6 >
	HEX_CONST P2_7		0x00008000		< player 2 switch 7 >
	HEX_CONST IO_PLAYER_43	IOASIC_BASE+0x18	< bits 15:0 (ro) = player 3 and player 4 inputs >
	HEX_CONST P3_0		0x00000001		< player 3 switch 0 >
	HEX_CONST P3_1		0x00000002		< player 3 switch 1 >
	HEX_CONST P3_2		0x00000004		< player 3 switch 2 >
	HEX_CONST P3_3		0x00000008		< player 3 switch 3 >
	HEX_CONST P3_4		0x00000010		< player 3 switch 4 >
	HEX_CONST P3_5		0x00000020		< player 3 switch 5 >
	HEX_CONST P3_6		0x00000040		< player 3 switch 6 >
	HEX_CONST P3_7		0x00000080		< player 3 switch 7 >
	HEX_CONST P4_0		0x00000100		< player 4 switch 0 >
	HEX_CONST P4_1		0x00000200		< player 4 switch 1 >
	HEX_CONST P4_2		0x00000400		< player 4 switch 2 >
	HEX_CONST P4_3		0x00000800		< player 4 switch 3 >
	HEX_CONST P4_4		0x00001000		< player 4 switch 4 >
	HEX_CONST P4_5		0x00002000		< player 4 switch 5 >
	HEX_CONST P4_6		0x00004000		< player 4 switch 6 >
	HEX_CONST P4_7		0x00008000		< player 4 switch 7 >
	HEX_CONST IO_UART_CTL	IOASIC_BASE+0x20	< bits 15:0 (rw) = UART control bits >
	HEX_CONST IO_UART_CTL_38_4_BAUD		12	< Code for 38.4K Baud >
	HEX_CONST IO_UART_CTL_19_2_BAUD		25	< Code for 19.2K Baud >
	HEX_CONST IO_UART_CTL_9600_BAUD		51	< Code for 9600 Baud >
	HEX_CONST IO_UART_CTL_4800_BAUD		103	< Code for 4800 Baud >
	HEX_CONST IO_UART_CTL_GP_OUT		0x0080	< General Purpose Output Bit >
	HEX_CONST IO_UART_CTL_INTERNAL_ENA	0x0200	< 1 = Enable UART; 0 = Clear UART >
	HEX_CONST IO_UART_CTL_ENABLE_ERRORS	0x0400	< 1 = Enable Overrun and Framing Errors and Break Detect >
	HEX_CONST IO_UART_CTL_ENABLE_LOOP_BACK	0x0800	< 1 = Enable Internal Loop-back Mode >
	HEX_CONST IO_UART_CTL_DISABLE_XMITTER	0x1000	< 1 = Prevents data from being sent to the wire >
	HEX_CONST IO_UART_CTL_FORCE_BREAK_OUT	0x2000	< 1 = Force Transmitter Data Output True (BREAK) >
	HEX_CONST IO_UART_CTL_IGNORE_CTS_IN	0x4000	< 1 = Ignore CTS Input >
	HEX_CONST IO_UART_CTL_FORCE_CTS_OUT	0x8000	< 1 = Force CTS False; 0 = Receiver controls CTS >
	HEX_CONST IO_UART_TX	IOASIC_BASE+0x28	< bits  7:0 (rw) = UART transmit register >
	HEX_CONST IO_UART_RCV	IOASIC_BASE+0x30	< bits 15:0 (ro) = UART receive/status registers >
	HEX_CONST IO_UART_RCV_CHAR_MASK		0x00ff	< Character Mask >
	HEX_CONST IO_UART_RCV_BREAK_DETECT	0x0100	< Break Detect Status >
	HEX_CONST IO_UART_RCV_FRAME_ERROR	0x0200	< Framing Error Status >
	HEX_CONST IO_UART_RCV_OVER_RUN		0x0400	< Overrun Error Status >
	HEX_CONST IO_UART_RCV_FULL		0x0800	< Receiver FIFO Full >
	HEX_CONST IO_UART_RCV_CHAR		0x1000	< Received Character Ready >
	HEX_CONST IO_UART_XMT_EMPTY		0x2000	< Transmitter Empty >
	HEX_CONST IO_UART_RCV_CTS_IN		0x4000	< CTS In True >
	HEX_CONST IO_UART_RCV_CTS_OUT		0x8000	< CTS Out True >
	HEX_CONST IO_UART_RCV_FIFO_SIZE		4	< Internal Receiver FIFO Size >
	HEX_CONST IO_METER	IOASIC_BASE+0x38	< bits  4:0 (rw) = meter control register >
	HEX_CONST IO_H2SND_CTL	IOASIC_BASE+0x40	< bits 15:0 (rw) = Host to Sound control register >
	HEX_CONST IO_H2SND_DTA	IOASIC_BASE+0x48	< bits 15:0 (rw) = Host to Sound data register >
	HEX_CONST IO_SND_STS	IOASIC_BASE+0x50	< bits 15:0 (ro) = Host Sound status >
	HEX_CONST IO_SND2H_DTA	IOASIC_BASE+0x58	< bits 15:0 (ro) = Sound to Host data register >
	HEX_CONST IO_H2MIC_CMD	IOASIC_BASE+0x60	< bits  3:0 (rw) = Host to microcontroller control >
	HEX_CONST IO_MIC2H_DTA	IOASIC_BASE+0x68	< bits  7:0 (ro) = MIC to host data register >
	HEX_CONST IO_MAIN_STS	IOASIC_BASE+0x70	< bits 15:0 (ro) = Main status register >
	HEX_CONST IO_MAIN_CTL	IOASIC_BASE+0x78	< bits 15:0 (rw) = Main control register >
	HEX_CONST IO_MAIN_GLOBAL_INT		0x0001	< Global Interrupt Enable >
	HEX_CONST IO_MAIN_FRC_HOST_INT		0x0002	< Force Host Interrupt >
	HEX_CONST IO_MAIN_MC_ACK		0x0004	< Microcontroller Acknowledge >
	HEX_CONST IO_MAIN_FIFO_EMPTY		0x0008	< FIFO Empty Flag >
	HEX_CONST IO_MAIN_FIFO_HALF		0x0010	< FIFO Half Full >
	HEX_CONST IO_MAIN_FIFO_FULL		0x0020	< FIFO Full Flag >
	HEX_CONST IO_MAIN_STH_DATA_FULL		0x0040	< Sound to Host Data Full >
	HEX_CONST IO_MAIN_HTS_DATA_EMPTY	0x0080	< Host to Sound Data Empty >
	HEX_CONST IO_MAIN_UART_BRK_DETECT	0x0100	< UART Break Detect >
	HEX_CONST IO_MAIN_UART_FRAME_ERROR	0x0200	< UART Frame Error >
	HEX_CONST IO_MAIN_UART_OVER_RUN		0x0400	< UART Over Run >
	HEX_CONST IO_MAIN_UART_RCV_FULL		0x0800	< UART Receiver Full >
	HEX_CONST IO_MAIN_UART_RCV_CHAR		0x1000	< UART Received Character >
	HEX_CONST IO_MAIN_UART_XMT_EMPTY	0x2000	< UART Transmitter Empty >
	HEX_CONST IO_MAIN_UART_CTS_IN		0x4000	< UART CTS In (Status Register) >
	HEX_CONST IO_MAIN_UART_CTS_OUT		0x8000	< UART CTS Out (Status Register) >
	HEX_CONST IO_MAIN_LED_ON		0x4000	< LED O/P On (Control Register) >
	HEX_CONST IO_MAIN_TI320cx_MODE		0x8000	< TI-320cx Mode (Control Register) >
@


1.17
log
@Added line to ASNL macro to generate the _NOTES symbol.
@
text
@d548 1
a548 1
	ASN PCD, PCD_ASN, P, 11 ; PCI D interrupt
@


1.16
log
@Added a ASNGM to assign a bit mask to an interrupt level. Added
a GALILEO_LVL assignment if any galileo interrupts are enabled.
@
text
@d478 1
@


1.15
log
@Added definition of IO_UART_RCV_FIFO_SIZE.
@
text
@d414 45
d513 1
d519 2
d534 1
d552 1
d584 1
@


1.14
log
@Added definition of fake level IOASIC_LVL.
@
text
@d169 1
@


1.13
log
@Added bit mask definitions for IO_UART_CTL, IO_UART_RCV, and IO_MAIN registers.
@
text
@d253 1
@


1.12
log
@Added some comments.
@
text
@d146 12
d160 9
d178 18
@


1.11
log
@Added XBUS definitions.
@
text
@d446 15
a460 15
	ASN XS0, XS0_ASN, P,  0
	ASN XS1, XS1_ASN, P,  1
	ASN XS2, XS2_ASN, P,  2
	ASN XS3, XS3_ASN, P,  3
	ASN MIO, MIO_ASN, P,  4
	ASN CU1, CU1_ASN, P,  5
	ASN CU2, CU2_ASN, P,  6
	ASN CPP, CPP_ASN, P,  7
	ASN PCA, PCA_ASN, P,  8
	ASN PCB, PCB_ASN, P,  9
	ASN PCC, PCC_ASN, P, 10
	ASN PCD, PCD_ASN, P, 11
	ASN IDE, IDE_ASN, P, 12
	ASN IOA, IOA_ASN, P, 13
	ASN ADC, ADC_ASN, P, 14
d462 24
a485 24
	ASN MOE, MOE_ASN, G,  1
	ASN DOE, DOE_ASN, G,  2
	ASN COE, COE_ASN, G,  3
	ASN DM0, DM0_ASN, G,  4
	ASN DM1, DM1_ASN, G,  5
	ASN DM2, DM2_ASN, G,  6
	ASN DM3, DM3_ASN, G,  7
	ASN TM0, TM0_ASN, G,  8
	ASN TM1, TM1_ASN, G,  9
	ASN TM2, TM2_ASN, G, 10
	ASN TM3, TM3_ASN, G, 11
	ASN MRE, MRE_ASN, G, 12
	ASN SWE, SWE_ASN, G, 13
	ASN MWE, MWE_ASN, G, 14
	ASN SRE, SRE_ASN, G, 15
	ASN AEP, AEP_ASN, G, 16
	ASN MEP, MEP_ASN, G, 17
	ASN MAS, MAS_ASN, G, 18
	ASN TAR, TAR_ASN, G, 19
	ASN RTY, RTY_ASN, G, 20
	ASN PC0, PC0_ASN, G, 26
	ASN PC1, PC1_ASN, G, 27
	ASN PC2, PC2_ASN, G, 28
	ASN PC3, PC3_ASN, G, 29
@


1.10
log
@Defined XBUS_BASE conditional on XPAN_SLOT, and defined XBUS_SLOTx.
@
text
@d218 32
a493 6
; The XBUS is assigned to Expansion Slot 1 Interrupt
;
	ASN XBUS, XS1, L,
;
	HEX_CONST INTS_ON	0xFF01		< Enable all interrupts >
	HEX_CONST INTS_OFF	(INTS_ON&~1)	< Disable all interrupts >
d499 1
a499 1
	HEX_CONST XBUS_BASE	EXPAN0_BASE		< XBUS base >
d502 1
a502 1
	HEX_CONST XBUS_BASE	EXPAN1_BASE		< XBUS base >
d505 1
a505 1
	HEX_CONST XBUS_BASE	EXPAN2_BASE		< XBUS base >
d508 1
a508 1
	HEX_CONST XBUS_BASE	EXPAN3_BASE		< XBUS base >
a509 11
 .if not_defined, XBUS_BASE
 .error ; Invalid XPAN_SLOT
 .endc
	HEX_CONST XBUS_SLOT0	XBUS_BASE+0x0000000	< XBUS Slot 0 >
	HEX_CONST XBUS_SLOT1	XBUS_BASE+0x0400000	< XBUS Slot 1 >
	HEX_CONST XBUS_SLOT2	XBUS_BASE+0x0800000	< XBUS Slot 2 >
	HEX_CONST XBUS_SLOT3	XBUS_BASE+0x0C00000	< XBUS Slot 3 >
	HEX_CONST XBUS_SLOT4	XBUS_BASE+0x01000000	< XBUS Slot 4 >
	HEX_CONST XBUS_SLOT5	XBUS_BASE+0x01400000	< XBUS Slot 5 >
	HEX_CONST XBUS_SLOT6	XBUS_BASE+0x01800000	< XBUS Slot 6 >
	HEX_CONST XBUS_SLOT7	XBUS_BASE+0x01C00000	< XBUS Slot 7 >
d511 3
@


1.9
log
@Fixed memory map for PCI_IO and PCI_MEM
@
text
@d469 28
@


1.8
log
@Defined switch bit masks.
@
text
@d63 2
a64 2
	HEX_CONST PCI_IO_BASE	0xA8000000 < -0x29FFFFFF PCI I/O bus (uncached) >
	HEX_CONST PCI_MEM_BASE	0xAA000000 < -0x2BFFFFFF PCI Memory bus (uncached) >
@


1.7
log
@Adjusted for new names.
@
text
@d78 16
d95 16
d112 16
d129 16
@


1.6
log
@Define sym_NOTES using HEX_CONST macro.
@
text
@a21 2
	.include galileo.mac
;
d135 2
d151 1
a151 1
	DEC_CONST TIMER_LVL	INT5_LVL	< CPU timer interrupt >
d215 1
a215 1
	.iif ndf,sym'_NOTES,HEX_CONST sym'_NOTES ( 1 << bit )
d270 1
a270 1
	.iif ndf,sym'_NOTES,HEX_CONST sym'_NOTES ( 1 << bit )
d272 1
a272 1
	.iif ne,GALILEO_CPU_INT&...D,.error ; macro ASN - parameter bit out of range
@


1.5
log
@Defined the ASNx macro set to assign the Phoenix, Galileo, and Logical Interrupts.
Used the macros to provide interrupt configuration support in accordance with the
Phoenix Development System Programmers Guide and the GT-64010 Data Sheet.
For use with phx_vecs.mac in Phoenix GUTS.
@
text
@d215 1
a215 1
	.iif ndf,sym'_NOTES,sym'_NOTES == ( 1 << bit )
d270 1
a270 1
	.iif ndf,sym'_NOTES,sym'_NOTES == ( 1 << bit )
@


1.4
log
@Moved the cache memory base to bank 1
@
text
@d22 2
d139 263
a401 1
	DEC_CONST TIMER_LVL	7		< CPU timer interrupt >
@


1.3
log
@Correcte addressing for MISC_xxx options.
@
text
@d74 1
a74 1
	HEX_CONST CACHE_MEM_BASE DRAM_BASE
@


1.2
log
@Fixed the WDOG definition
,
@
text
@d103 16
a118 15
	HEX_CONST MISC_HCMD	MISCPLD_BASE+0x08	< bits 15:0 (ro) = Host command register >
	HEX_CONST MISC_HWFIFO	MISCPLD_BASE+0x10	< bits 15:0 (ro) = Host write data FIFO >
	HEX_CONST MISC_HRFIFO	MISCPLD_BASE+0x18	< bits 15:0 (wo) = Host read data FIFO >
	HEX_CONST MISC_TCTL	MISCPLD_BASE+0x20	< bits 15:0 (rw) = Target control register >
	HEX_CONST MISC_TRESP	MISCPLD_BASE+0x28	< bits 15:0 (rw) = Target response register >
	HEX_CONST MISC_TSTS	MISCPLD_BASE+0x30	< bits 15:0 (ro) = Target status register >
	HEX_CONST MISC_TTESTP	MISCPLD_BASE+0x38	< bits 15:0 (rw) = Target test point register >
	HEX_CONST NSS_CTL	MISCPLD_BASE+0x40	< bits 15:0 (rw) = NSS control register >
	HEX_CONST NSS_GAME_CTL	MISCPLD_BASE+0x48	< bits 15:0 (ro) = NSS game control register >
	HEX_CONST NSS_FIFO_STS	MISCPLD_BASE+0x50	< bits 15:0 (ro) = NSS FIFO status >
	HEX_CONST NSS_GAMEINT	MISCPLD_BASE+0x58	< bits 15:0 (ro) = NSS Game interrupt status >
	HEX_CONST NSS_FIFO_DTA	MISCPLD_BASE+0x60	< bits 15:0 (rw) = NSS read/write FIFO >
	HEX_CONST NSS_FIFO_RST	MISCPLD_BASE+0x68	< bits 15:0 (wo) = NSS FIFO reset register >
	HEX_CONST MISC_STATUS	MISCPLD_BASE+0x70	< bits 15:0 (ro) = Misc status register >
	HEX_CONST MISC_CONFIG	MISCPLD_BASE+0x78	< bits 15:0 (rw) = Misc configuration reg >
@


1.1
log
@Initial revision
@
text
@d118 1
a118 1
	HEX_CONST WDOG		OBIO_BASE+0x00180000	< bits  x:x (wo) = Watch dog timer > 
d150 1
a150 1
extern U32 *prc_smack_wdog(void);
@
