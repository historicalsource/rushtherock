head	1.15;
access;
symbols
	CJ_206:1.15
	CJ2_05:1.15
	CJ2_04:1.15;
locks; strict;
comment	@;; @;


1.15
date	96.02.28.18.28.49;	author shepperd;	state Exp;
branches;
next	1.14;

1.14
date	96.02.28.03.48.58;	author shepperd;	state Exp;
branches;
next	1.13;

1.13
date	96.02.24.22.09.46;	author shepperd;	state Exp;
branches;
next	1.12;

1.12
date	95.12.15.02.06.08;	author shepperd;	state Exp;
branches;
next	1.11;

1.11
date	95.12.05.02.13.02;	author shepperd;	state Exp;
branches;
next	1.10;

1.10
date	95.12.05.01.57.37;	author shepperd;	state Exp;
branches;
next	1.9;

1.9
date	95.11.10.23.32.29;	author shepperd;	state Exp;
branches;
next	1.8;

1.8
date	95.11.10.03.01.28;	author shepperd;	state Exp;
branches;
next	1.7;

1.7
date	95.11.08.22.26.42;	author shepperd;	state Exp;
branches;
next	1.6;

1.6
date	95.11.07.21.49.51;	author shepperd;	state Exp;
branches;
next	1.5;

1.5
date	95.10.31.20.37.33;	author shepperd;	state Exp;
branches;
next	1.4;

1.4
date	95.10.31.02.26.42;	author shepperd;	state Exp;
branches;
next	1.3;

1.3
date	95.10.20.00.52.13;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	95.09.12.20.52.16;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	95.07.10.18.48.31;	author shepperd;	state Exp;
branches;
next	;


desc
@IDT R3K/R4K exception vectors
@


1.15
log
@Temporarily removed the clear of CTS_ZERO_MAP
@
text
@OUTPUT_LANG 	==  4		; LANG_ASR3k

	.include config.mac

.if ndf, ICELESS_STUB
ICELESS_STUB == 0
ICELESS_STUB = 0
.endc
.if ndf, TINY_MODE
TINY_MODE == 0
.endc

	.globl	begin, except

	.set	noat
	.set	noreorder

	.text
	
FRAME startup, global=1
	j	begin		;# reset vector (0xBFC00000) *
	.align	4		;# skip up to 0xBFC00010

	.globl	pktInit, pktPoll, pktQueRecv, pktQueSend

	.globl ROMCTS_INIT, ROM_VECTORS

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;  WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING 
;
; The following table is constructed according the the definition of the structure
; ROM_VECTOR_STR in idt.mac. If you change anything here be sure to update the struct
; definition in idt.mac. Also, if you change anything here without rebuilding
; _all_ flavors of GUTS _and_ STUB, you will certainly break them such that they will
; not likely work together if at all.
;
ROM_VECTORS:
	.globl	exception_tbl, exception_funcs
exception_tbl:
	.word	exception_funcs	;# Pointer to RAM based array of pointers to functions
	.word	ROMVBR		;# Remains for compatibility with old stub code
	.word	INIT_SP		;# last address in SRAM to use, value to init stack
				;# to external init routines (ICELESS stub for example)
	.word	begin		;# pointer to the OS entry address
.if true, ICELESS_STUB > 0
pktInit:
	.word	pktInit_p	;# Pointer to packet init code
pktPoll:
	.word	pktPoll_p	;# Pointer to packet poll code
pktQueRecv:
	.word	pktQueRecv_p	;# Pointer to packet receive code
pktQueSend:
	.word	pktQueSend_p	;# Pointer to packet send code
.iff
pktInit:
	.word	0		;# Pointer to packet init code
pktPoll:
	.word	0		;# Pointer to packet poll code
pktQueRecv:
	.word	0		;# Pointer to packet receive code
pktQueSend:
	.word	0		;# Pointer to packet send code
.endc
	.space	4		;# Remains for compatibility with old stub code
ROMVBR:	.space	8*4		;# Old stub's IRQ vectors went here
.if true, HOST_BOARD == LCR3K
	.space	4		;# Old stub's exception code used this location as a temp
 .if true, ICELESS_STUB > 0
	.space	2*4
 .iff
	.word	normal_exception ;# Old stub code may reference these two locations
  .if not_defined, NO_CHEAP_EXCEPTION
	NO_CHEAP_EXCEPTION == 0
  .endc
  .if true, NO_CHEAP_EXCEPTION
	.space	4
  .iff
	.word	cheap_exception
  .endc
 .endc
.endc
	.space	15*4		;# Old stub's non-IRQ exception vector table went here
.if true, (HOST_BOARD == HCR4K) || (HOST_BOARD == MB4600)
ROMCTS_INIT:
 .if true, (HOST_BOARD == MB4600)
  .if true, 1 || (TINY_MODE == 0)
	.word (CTS_FIFO_RST|CTS_ZERO_MAP|CTS_LED_CR1|CTS_LED_CR2|CTS_LED_CR3) & ~(CTS_FIFO_ENAB|CTS_XBUS_INT|CTS_FIFO_FULLINT|CTS_FIFO_MTINT)
  .iff
	.word (CTS_FIFO_RST|CTS_LED_CR1|CTS_LED_CR2|CTS_LED_CR3) & ~(CTS_FIFO_ENAB|CTS_XBUS_INT|CTS_FIFO_FULLINT|CTS_FIFO_MTINT)
  .endc
 .iff
	.word (CTS_FIFO_RST|CTS_ZERO_MAP|CTS_LED_CR1|CTS_LED_CR2|CTS_LED_CR3) & ~(CTS_FIFO_ENAB|CTS_XBUS_RST|CTS_FIFO_FULLINT|CTS_FIFO_MTINT)
 .endc
.iff
	.word	0		;# Other processors don't use this
.endc
.if true, ICELESS_STUB == 0
	.word	except		;# pointer to game's exception handler
.iff
	.word	0		;# Don't init the exception handler ptr on ICELESS
.endc
.if defined, STUB_SW_ADDR
	.word	STUB_SW_ADDR	;# Address to read to get switches
.iff
	.word	0
.endc
.if defined, STUB_SW_BIT
	.word	STUB_SW_BIT	;# Bit mask to check at STUB_SW_ADDR
.iff
	.word	0
.endc
	.word	0		;# on 3K, pointer to stub's stop on exception handler
	.word	0		;# on 3K, pointer to game's message
;
; End of ROM_VECTOR_STR structure
;------------------------------------------------------------------------------
;
.if true, (PROCESSOR&-16) == MIPS4000
	.align	9		;# advance pc to 0xBFC00200 (4k) *
.iff
	.align	8		;# advance pc to 0xBFC00100 (3k) *
.endc

tlb:	j	except		;# tlb refill exception

	.align	7		;# advance pc to 0xBFC00180 (3k) or 0xBFC00280 (4k) *

.if true, (PROCESSOR&-16) == MIPS4000
xtlb:	j	except		;# xtlb refill exception at 0xBFC00280
	.align	7		;# advance pc to 0xBFC00300
cache_err:
	j	except		;# cache errors
	.align	7		;# advance pc to 0xBFC00380
.endc

	.globl	stub_running
.if true, (HOST_BOARD == HCR4K) || (HOST_BOARD == MB4600)
stub_running = RRBUS_BASEnc+0x380-4
.iff
stub_running = . - 4		;# grab a "vector" so the game can use it
.endc
excepthd:			;# all other exceptions enter at 0xBFC00180 or 0xBFC00380 *
	j	except
	.set	at
	.set	reorder
ENDFRAME startup

	.align 7		;# advance pc to 0xBFC00200 (3k) or 0xBFC00400 (4k) *
@


1.14
log
@Changed the default CTRL reg init in TINY_MODE
@
text
@d86 1
a86 1
  .if true, TINY_MODE == 0
@


1.13
log
@Made the pkt* vectors global..
@
text
@d86 1
d88 3
@


1.12
log
@Added vectors for floating point exception <=> stub interface.
@
text
@a23 1
.if true, ICELESS_STUB > 0
a24 1
.endc
d55 8
a62 1
	.space	4*4		;# Placeholder in non-stub code
@


1.11
log
@Added conditional NO_CHEAP_EXCEPTION to exclude cheap exception handler.
@
text
@d103 2
@


1.10
log
@Added conditional around cheap_exception
@
text
@d71 2
a73 2
  .iff
	.space	4
@


1.9
log
@Added an additional vector for stub to read start switch.
@
text
@d67 4
d72 3
@


1.8
log
@The NORMAL and CHEAP exceptions are not in th R4K systems so they were commented out.
@
text
@d86 10
@


1.7
log
@Moved the variable stub_running to RRBUS_BASEnc+0x380
@
text
@d61 1
a62 1
.if true, HOST_BOARD == LCR3K
@


1.6
log
@Renamed STACK_INIT to INIT_SP to match what everything else uses
@
text
@d110 1
a110 1
stub_running = RRBUS_BASE+0x380-4
@


1.5
log
@Renamed exception_table to exception_tbl to avoid problems with non-updated Makefiles et al.
@
text
@d44 1
a44 1
	.word	STACK_INIT	;# last address in SRAM to use, value to init stack
@


1.4
log
@Added numerous changes to support R4K
@
text
@d40 2
a41 2
	.globl	exception_table, exception_funcs
exception_table:
@


1.3
log
@Added a CTSINIT entry containing initial control register settings.
@
text
@d13 1
a13 1
	.globl	ROM_VECTORS, begin, except
a23 1
	.globl	ROMVBR, cputimerint
d28 11
d40 4
a43 2
	.word	RAMVBR		;# pointer to RAM based vector table
	.word	ROMVBR		;# pointer to ROM based vector table
d49 1
a49 1
	.word	pktInit_p
d51 1
a51 1
	.word	pktPoll_p
d53 1
a53 1
	.word	pktQueRecv_p
d55 1
a55 1
	.word	pktQueSend_p
d57 12
a68 1
	.space	4*4
d70 1
a71 1
	.globl ROMCTS_INIT
a77 32
.endc
	.word	0		;#  TLB exception
ROMVBR:	.word	swint0		;# s/w interrupt
	.word	swint1		;# s/w interrupt
	.word	0		;# ICELESS interrupt
.if true, ((HOST_BOARD == HCR4K) || (HOST_BOARD == MB4600)) && (TINY_MODE == 0)
	.word	xbusint		;# Any XBUS interrupt
	.word	0		;# undefined
	.word	fifo_empty_int	;# TBUS FIFO empty
	.word	fifo_full_int	;# TBUS FIFO full
.iff
  .if true, HOST_BOARD == LCR3K
	.word	xbus0int	;# XBUS IRQ 0
	.word	xbus1int	;# XBUS IRQ 1
	.word	xbus2int	;# XBUS IRQ 2
	.word	xbus3int	;# XBUS IRQ 3
  .iff
	.word	0
	.word	0
	.word	0
	.word	0
  .endc
.endc
.if true, TINY_MODE == 0
	.word	cputimerint	;# CPU timer interrupt
	.word	0		;# place holder for temp
	.word	normal_exception ;# general exception handler
 .if true, (HOST_BOARD == MB4600) || (HOST_BOARD == HCR4K)
	.word	normal_exception ;#  0, h/w or s/w interrupt
 .iff
	.word	cheap_exception	;#  0, h/w or s/w interrupt
 .endc
d79 1
a79 4
	.word	0		;# CPU timer
	.word	0		;# place holder
	.word	0		;# normal_exception
	.word	0		;# cheap_exception
d81 2
a82 22
	.word	0		;#  1, TLB modification
	.word	0		;#  2, TLB load or I fetch
	.word	0		;#  3, TLB store
	.word	0		;#  4, Address error on load/I-fetch
	.word	0		;#  5, Address error on store
	.word	0		;#  6, Bus error on I-fetch 
	.word	0		;#  7, Bus error on data load
	.word	0		;#  8, SYSCALL instruction
	.word	0		;#  9, Breakpoint instruction
	.word	0		;# 10, reserved instruction
	.word	0		;# 11, Co-processor unusable
	.word	0		;# 12, Integer Arithemtic overflow
.if true, ((PROCESSOR&-16) == MIPS4000)
	.word	0		;# 13, TRAP exception
	.word	0		;# 14, reserved
	.word	0		;# 15, Floating point exception
  .if true, HOST_BOARD != MB4600
	.word	xbus0int
	.word	xbus1int
	.word	xbus2int
	.word	xbus3int
  .endc
d84 1
a84 1
				;# 13-31, unused
d86 4
a89 1

@


1.2
log
@Added a pointer to stub's variable stub_running.
@
text
@d9 3
d47 9
d60 1
a60 1
.if true, (HOST_BOARD == HCR4K) || (HOST_BOARD == MB4600)
d78 1
d82 1
a82 1
.if true, (HOST_BOARD == MB4600) || (HOST_BOARD == HCR4K)
d84 3
d88 4
a91 1
	.word	cheap_exception	;#  0, h/w or s/w interrupt
d105 1
a105 1
.if true, (PROCESSOR&-16) == MIPS4000
@


1.1
log
@Initial revision
@
text
@d90 1
d95 1
d119 3
d123 1
@
