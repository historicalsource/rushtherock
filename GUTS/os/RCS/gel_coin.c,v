head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	95.11.09.18.13.14;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	95.04.27.23.39.44;	author birmingham;	state Exp;
branches;
next	1.1;

1.1
date	94.12.16.17.15.02;	author albaugh;	state Exp;
branches;
next	;


desc
@George Edward Logg's implementation of the ancient 6502 coin-debounce code
@


1.3
log
@Protected all the #define's, that weren't already, with #ifndef's.
@
text
@/*	gel_coin.c
 *		Copyright 1988-1994 ATARI GAMES.
 *	Unauthorized reproduction, adaptation, distribution, performance or
 *	display of this computer program or the associated audiovisual work
 *	is strictly prohibited
 */

/* INSTRUCTIONS:	look for the symbol	>>-->
 *		to find out where to customize for your use
 */
#include <config.h>
#include <os_proto.h>
#include <st_proto.h>

/* Revised:
*	15-NOV-84 to reflect actual switch positions (aux,left,right)
*	14-FEB-85 to handle partial credits from bonus coins
*	26-MAR-85 for DND hardware (four mechs, equal value, separate counts
*	18-JUN-87 for generic U.S. removed many hardware dependencies
*	07-DEC-87 moved coinmenu[] into this file.
*		  converted from separate to common coin chutes.
*	09-MAR-88 Revised comments to agree with hardware move from
*		  two center to two rightmost mechs
*	08-FEB-91 using the whole new scheme
*	23-JUN-92 as part of the reorganization of the OS
*	27-AUG-93 as part of CAGE - moving coin stuff to host. (Ed Logg)
*	27-JAN-94 split back into coin94.c (generic coin stuff) and
*		  gel_coin.c (George Edward Logg)
*/

/*	This file contains the code specific to the host-based coin
*	validation from BOUNTY, originally written by Ed Logg. Ed had
*	merged coin.c and coin91.c into one file to get around debugger
*	problems with code in #included files. I have re-split the files,
*	but created a more well-defined interface between validation and
*	accounting, in the form of cn_add_coin() in coin94.c, which see.
*/

/* >>-->
*	With a 4ms IRQ the routine cn_irq should be called.
*	See coin.h for definitions to twiddle.
*/
#include <coin.h>

static const char mechno[] = MECH_ORDER;


/*
* >>--> NOW setup the electric mech control macros <<<<<
*
*	You must #define COUNTER_ON,COUNTER_OFF if we want 680x0
*	to run EMCounters (see COIN91)
*
***  EXAMPLE: Define this way for two mechs:
*
*	COUNTER_ON(x)	prc_mod_latch(x < 2 ? LM_CNT_RGT : LM_CNT_LFT);
*	COUNTER_OFF(x)	prc_mod_latch(x < 2 ? ~LM_CNT_RGT : ~LM_CNT_LFT);
*
*  The following alternative uses an array of BIT MASKS that will be
*   set/cleared into the latch word.  The values in the array come
*   from definitions in CONFIG.MAC.  NOTE that the fourth 'coin counter'
*   actually is the CARD VENDOR in this example.
*
*	The indices of EMC_MAP correspond to the VALUES of the switch
*	#DEFINEitions.  For example, if LFT_M is defined as (0) then
*	the first (zeroth) entry in EMC_MAP defines the bit to click
*	for his mech.  If you DON'T redefine the values for LFT_M or
*	RGT_M (which you SHOULDN'T do anyway!) then you'll be fine.
*/
#ifndef LM_EMC_L
#define LM_EMC_L (0)
#endif
#ifndef LM_EMC_R
#define LM_EMC_R (0)
#endif

/* >>-> Use these if you've got two real mechs			*/
static const unsigned short emc_map[] = { LM_EMC_L, LM_EMC_R, 0, 0 };
#if 0
/* >>-> Use these if you've got four real mechs			*/
static const unsigned short emc_map[] = { LM_EMC_L, LM_EMC_LC, LM_EMC_RC, LM_EMC_R };
#endif

#ifndef COUNTER_ON
# define COUNTER_ON(i) prc_mod_latch(emc_map[i])	/* turn on Electro-mech */
#endif
#ifndef COUNTER_OFF
# define COUNTER_OFF(i) prc_mod_latch(~emc_map[i]) /* turn off Eectro-mech */
#endif

#ifndef __STDC__
#define const
#define volatile
#endif


/* 	The following is used to determine what number of "fabricated" credits
*	should be alledged if the game is set in free-play. In general, it
*	should match the amount needed to start all players.
*/
#ifndef MAX_NEEDED_CREDS
#define MAX_NEEDED_CREDS (4)
#endif

/*	While keyed on EER_CNOPT, this also serves to get EER_CC0.
*/
#ifndef EER_CNOPT
#include <eer_defs.h>
#endif

/* 	The following limit was 25, but bumping to 30 used to leave room for
*	a $5 bill even with most generous bonus adder. Now if some bozo sets
*	bonus adder at "four gives 3" and dollar mech at 8, a five will be
* 	worth 70, which is close enough to infinite for most operators!
*/
#ifndef MAXCOINS
#define MAXCOINS 30
#endif

/*	cn_credit() returns whole credits and partial credits.
*	The following #define determines whether or not to reduce
*	the partial credit fraction. (e.g. 4/8->1/2)
*/
#ifndef CREDS_REDUCE
#define	CREDS_REDUCE	1	/* reduce partial credit fractions	*/
#endif

/*	These are used to read coin inputs every 4mSec, and uses the basic 
*	validation of coin pulses. The criteria are the same as the 6502
*  	coin routine.  A valid coin is a 16-800 mSec contact closure preceded
*  	and followed by at least 33 mSec of contact open. Bounce at the edges
*  	of these periods is ignored, but the 16mSec minimum must be 4 solid 
*	samples.
*/
#ifndef ON_MAX
# define ON_MAX		200		/* samples @@ 4mSec = 800 mSec */
#endif
#ifndef ON_MIN
# define ON_MIN		4		/* samples @@ 4mSec = 16 mSec */
#endif
#ifndef OFF_MIN
# define OFF_MIN	8		/* samples @@ 4mSec = 33 mSec */
#endif

static unsigned char cnon[8];
static unsigned char cnoff[8];

#ifdef COUNTER_ON
/*	Each byte of cctim is conceptually two nybbles. The upper contains 
*	a "pulse timer" that counts from Fx to 0x, turning the corresponding 
*	counter on for Fx-8x and off for 7x to 0x. The bottom nybble contains 
*	up to 15 "queued" pulses.  There is no check for overflow.
*/

static unsigned char cctim[4];

/*		cn_coin_counters(), cn_emc_drive()
*	The following stuff added to deal with "host"-driven electromechanical
*	counters. This was first done on BATMAN. The user needs to define
*	two macros: COUNTER_ON and COUNTER_OFF that do the appropriate
*	magic to turn the specified counter on or off respectively. The
*	array cctim contains "timers" for up to four mechs. Any
*	mapping from mech number to electro-mechanical counter is up to
*	the aforemention macros. 
*
*	This routine must be called every 16ms.  
*
*	Coin counts may be lost if the number of coins exceeds 16 while the
*	counter is busy counting earlier counts.
*
*	The first name (cn_coin_counters()) is retained as a "stub" for
*	harmless operation with games which insist on calling it directly.
*	The new name (cn_emc_drive()) is the actual routine, and should
*	only be called from erc_vbex() or cn_irq() (but not both) at the
*	correct interval (16 milliseconds).
*/
void cn_coin_counters() { return; }
static void
cn_emc_drive()
{
    int i,timeval,pending;

    pending = -1;

    for ( i = 0 ; i < 4 ; ++i ) 
    {
	if ( (timeval = cctim[i]) != 0 ) 
	{
	    pending = i;
	    if ( (timeval -= 0x10) < 0 ) continue;
	    cctim[i] = timeval;
	    if ( (timeval & 0xF0) == 0x70 ) COUNTER_OFF(i);
	    return;
	}
    }
    if ( pending >= 0 ) 
    {
	/* no running timer, but we have (at least) one pending.
	*  decrement both nybbles to start timer
	*/
	cctim[pending] += 0xEF;
	COUNTER_ON(pending);
    }
    return;
}

/* 		cn_click_counter()
*	This routine "queues" a pulse to drive an electro-mechanical coin
*	counter.
*/
void 
cn_click_counter
PARMS((
    unsigned int counter_num
))
{
    if ( counter_num >= sizeof(cctim)/sizeof(cctim[0]) ) return;
    if((cctim[counter_num] & 0xF) != 0xF)
	++cctim[counter_num];	/* Trigger a pulse on a coin-mech line	*/
}

/* 		cn_click_vendor()
*	This routine drives a coin counter like vendor as defined by the 
*	definition VEND_M if there is one.
*/
#ifdef	VEND_M
void 
cn_click_vendor()
{
    cn_click_counter(VEND_M);
}
#endif	/* def VEND_M */
#else
void cn_coin_counters() { return;}

/* 		cn_click_counter()
*	This routine "queues" a pulse to drive an electro-mechanical coin
*	counter.
*/
void 
cn_click_counter
PARMS((
    unsigned int counter_num
)){;}
#endif


/*		erc_vbex()
 *	A "compatibility hack". This is the only routine that should be
 *	called from the game Vblank routine. For the case of host-read
 *	coind switches and host-driven coin counters, we just run the
 *	electro-mechanical coin-counter drivers and do the EEPROM stuff.
 *	This actually should be part of cn_irq() (4millisecond IRQ)
 *	processing, but politics intrudes...
 */

/* !!! */
void erc_vbex ()
{
#if (0)
	cn_emc_drive();
#endif
}


/*		cn_irq()
*
*	This routine looks at the coin inputs every 4mSec, and does the
*  	basic validation of coin pulses. The criteria are the same as the 6502
*  	coin routine.  A valid coin is a 16-800 mSec contact closure preceded
*  	and followed by at least 33 mSec of contact open. Bounce at the edges
*  	of these periods is ignored, but the 16mSec minimum must be 4 solid 
*	samples.  This routine replaces the assembly program and cn_cvt_crdt().
*
*	cn_add_coin() will ignore input if cn_init() has not been run
*	(inited == 0)
*/

static int divsor;

void
cn_irq()
{
    short i,m,coins;

    coins = CN_STATUS;

    for ( i = 0; i < sizeof(mechno); ++i ) 
    {
	if ( (m = mechno[i]) < 0 ) continue; /* not real mech */
	
	if ( (coins&(1<<i)) == 0)	/* coin present */
	{
	    cnoff[i] = 0;		/* clear off counter */
	    if (cnon[i] != 0)		/* decrement on counter */
		--cnon[i];
	}
	else 				/* coin absent */
	{
	    cnoff[i] += 1;	    	/* increase off counter */
	    if (cnon[i] >= (ON_MAX-ON_MIN) /* not on long enough */
	    || cnon[i] == 0)		/* or on too long */
	    {
		cnon[i] = ON_MAX;	/* restart coin check */
	    }
	    else if (cnoff[i] >= OFF_MIN) /* off long enough */
	    {
		if ( (m = mechno[i]) >= 0 ) /* a valid coin is detected */
		{
		    cn_add_coin(m);	/* add a coin */
		}
		cnon[i] = ON_MAX;	/* start next coin */
	    }		
	}
    }
    if ( (++divsor & 3) == 0 ) cn_emc_drive();
}


/*		cn_total_coins()
*	Returns total _value_ of coins recorded in EEPROM. This _assumes_
*	that the mech-multipliers have not been changed since the stats
*	were cleared.
*/
unsigned long cn_total_coins()
{
    unsigned long coins,value;
    unsigned short m;
    short i;
    int mech;
    int mode;
    int seen = 0;

    mode = eer_gets(EER_CNOPT);
    if ( mode < 0 ) return -1;

    coins = 0;

#if (HAS_TWO)
    for (i = 1 ; i >= 0 ; --i) 
    {
	if ( (mech = mechno[i+2]) < 0 ) continue;
#else
    for (i = sizeof(mechno)-1 ; i >= 0 ; --i) 
    {
	if ( (mech = mechno[i]) < 0 ) continue;
#endif
	if ( seen & (1<<mech) ) continue;
	seen |= (1<<mech);
	value = eer_gets(mech+EER_CC0);
	if ( mech == 1 ) m = cmode_rmul(mode) + 1;	/* m = 1-8 */
	else if ( mech == 0 ) m = cmode_lmul(mode) + 1;	/* m = 1-8 */
	else m = 1;
	for ( ; m != 0 ; --m ) coins += value;
    }
    return coins;
}
@


1.2
log
@added call to Electro-Mechanical Coin Counter driver from cn_irq.
finished demolition of erc_vbex().
@
text
@d84 6
a89 2
#define COUNTER_ON(i) prc_mod_latch(emc_map[i])	/* turn on Electro-mech */
#define COUNTER_OFF(i) prc_mod_latch(~emc_map[i]) /* turn off Eectro-mech */
a90 1

d135 10
a144 3
#define ON_MAX		200		/* samples @@ 4mSec = 800 mSec */
#define	ON_MIN		4		/* samples @@ 4mSec = 16 mSec */
#define	OFF_MIN		8		/* samples @@ 4mSec = 33 mSec */
@


1.1
log
@Initial revision
@
text
@d250 1
d252 1
d269 1
d306 1
@
