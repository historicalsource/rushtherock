head	1.3;
access;
symbols
	RUSH_1_06A:1.3;
locks; strict;
comment	@ * @;


1.3
date	96.11.20.00.18.48;	author shepperd;	state Exp;
branches;
next	1.2;

1.2
date	96.10.07.16.47.54;	author shepperd;	state Exp;
branches;
next	1.1;

1.1
date	96.10.01.18.13.33;	author shepperd;	state Exp;
branches;
next	;


desc
@Support for QIO and Filesystem error messages.
@


1.3
log
@Moved the contents of qio_errs.h into qio.h and removed all
references to qio_errs.h.
@
text
@/*
 *	qio_errs.h
 *
 *		Copyright 1996 Atari Games, Corp.
 *	Unauthorized reproduction, adaptation, distribution, performance or 
 *	display of this computer program or the associated audiovisual work
 *	is strictly prohibited.
 *
 * This file is now obsolete. Its contents have been moved into qio.h
 */
@


1.2
log
@Still under development. Not ready for prime time.
@
text
@d2 1
a2 1
 *	errors.h
a7 50
 */
#ifndef _QIO_ERRS_H_
#define _QIO_ERRS_H_

/* The following are error codes returned by various fsys and qio functions. */

#define QIO_ERR_CODE(x) ( (x) & ((1<<SEVERITY_SHIFT)-1) )
#define QIO_ERR_SEV(x)	( ((x) >> SEVERITY_SHIFT) & 3 )
#define QIO_ERR_FAC(x)	( ((x) >> FACILITY_SHIFT) )

#define QIO_ERR_MSG(name, init, text) name init

enum error_codes {
    FACILITY_SHIFT=10,		/* number of bits to shift right to get facility code */
    SEVERITY_SHIFT=8,		/* number of bits to shift right to get severity code */
    SEVERITY_ERROR=0,		/* error is the normal case */
    SEVERITY_INFO=1<<SEVERITY_SHIFT,	/* code is informational */
    SEVERITY_FATAL=2<<SEVERITY_SHIFT,	/* code is fatal */
    SEVERITY_WARN=3<<SEVERITY_SHIFT,	/* code is a warning */
    FACILITY_FSYS_IO=1,		/* FSYS I/O errors */
    FACILITY_MOUNT,		/* volume MOUNT errors */
    FACILITY_INITFS,		/* volume INIT errors */
    FACILITY_CREATE,		/* file CREATE errors */
    FACILITY_DELETE,		/* file DELETE errors */
    FACILITY_LOOKUP,		/* file LOOKUP errors */
    FACILITY_OPEN,		/* file OPEN errors */
    FACILITY_EXTEND,		/* file EXTEND errors */
    FACILITY_SYNC,		/* volume SYNC errors */
    FACILITY_FREE,		/* volume FREE errors */
    FACILITY_MUTEX,		/* MUTEX handling errors */
    FACILITY_QIO,		/* QIO errors */
    FACILITY_HDIO,		/* Hard Drive I/O errors */
#include "qio_elst.h"
    MAX_ERROR_MSGS		/* placeholder for end of list */
};

#undef QIO_ERR_MSG

/************************************************************
 * io_errmsg - decode status code into an ASCII error message
 * 
 * At entry:
 *	sts - status code to decode (one of the values listed above)
 *	ans - ptr to string into which message will be placed
 *	size - size of string
 *
 * At exit:
 *	returns 'ans' which will have had the text of the decoded
 *	message copied into it or a "unknown error xxxxxxxx" string
 *	if the code isn't decodable.
d9 1
a10 4

extern char *qio_errmsg(int sts, char *ans, int size);

#endif		/* _ERRORS_H_ */
@


1.1
log
@Initial revision
@
text
@d27 1
a27 3
    FACILITY_QIO=1,		/* QIO errors */
    FACILITY_MUTEX,		/* MUTEX handling errors */
    FACILITY_FSYS_IO,		/* FSYS I/O errors */
d37 2
d61 1
a61 1
extern char *io_errmsg(int sts, char *ans, int size);
@
